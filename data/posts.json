[
    {
        "id": 1,
        "title": "Hello world!",
        "content": "<!-- wp:paragraph -->\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Updated the <strong>content<\/strong> again<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Updated the <strong>content<\/strong> again<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Welcome to WordPress. This is your first post. Edit or delete it, then start writing!<\/p>\n\n\n\n<p>Updated the <strong>content<\/strong> again<\/p>\n",
        "date": "2024-10-13 02:29:04",
        "slug": "hello-world",
        "excerpt": "Welcome to WordPress. This is your first post. Edit or delete it, then start writing! Updated the content again",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 686,
        "title": "Resolution range, not breakpoints",
        "content": "<!-- wp:paragraph -->\n<p>Was working on a system for our breakpoints and was just not happy with how things had been. It never seemed to make sense but I couldn't articulate why.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then I stumbled upon this blog post by David Gilbertson - <a href=\"https:\/\/medium.com\/free-code-camp\/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862\">https:\/\/medium.com\/free-code-camp\/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The main concept he hits home with is the idea of screen resolution ranges. That was what I was missing. It never made sense to have a breakpoint at 320px for mobile because then at 321px we see the tablet version?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>He's got some great illustrations as well. Even though the article is 8 years old, don't let that scare you away. You can find some updated numbers on popular screen sizes, but the principles are going to work for any application.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Was working on a system for our breakpoints and was just not happy with how things had been. It never seemed to make sense but I couldn't articulate why.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then I stumbled upon this blog post by David Gilbertson - <a href=\"https:\/\/medium.com\/free-code-camp\/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862\">https:\/\/medium.com\/free-code-camp\/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The main concept he hits home with is the idea of screen resolution ranges. That was what I was missing. It never made sense to have a breakpoint at 320px for mobile because then at 321px we see the tablet version?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>He's got some great illustrations as well. Even though the article is 8 years old, don't let that scare you away. You can find some updated numbers on popular screen sizes, but the principles are going to work for any application.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Was working on a system for our breakpoints and was just not happy with how things had been. It never seemed to make sense but I couldn&#8217;t articulate why.<\/p>\n\n\n\n<p>Then I stumbled upon this blog post by David Gilbertson &#8211; <a href=\"https:\/\/medium.com\/free-code-camp\/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862\">https:\/\/medium.com\/free-code-camp\/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862<\/a><\/p>\n\n\n\n<p>The main concept he hits home with is the idea of screen resolution ranges. That was what I was missing. It never made sense to have a breakpoint at 320px for mobile because then at 321px we see the tablet version?<\/p>\n\n\n\n<p>He&#8217;s got some great illustrations as well. Even though the article is 8 years old, don&#8217;t let that scare you away. You can find some updated numbers on popular screen sizes, but the principles are going to work for any application.<\/p>\n",
        "date": "2024-04-04 16:49:50",
        "slug": "resolution-range-not-breakpoints",
        "excerpt": "Was working on a system for our breakpoints and was just not happy with how things had been. It never seemed to make sense but I couldn&#8217;t articulate why. Then I stumbled upon this blog post by David Gilbertson &#8211; https:\/\/medium.com\/free-code-camp\/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862 The main concept he hits home with is the idea of screen resolution ranges. [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 680,
        "title": "Force ipv4 in Bitbucket pipeline",
        "content": "<!-- wp:paragraph -->\n<p>This goes over my head but going to attempt to provide a little background.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I ran into this issue because I'm trying to wait for a web server to spin up in the pipeline so I can run some Cypress tests. Looks a little like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>npm run start &amp; npx wait-on -i 1000 -v http:\/\/localhost:3000\/<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">IP confusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Apparently the issue comes from a \"happy eyeballs\" issue. I wonder if I've written about this before...should have checked my own blog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The tl;dr is that \"happy eyeballs\" will check both IPv4 and IPv6 and prefer one or the other if both exist. It's one of the those, \"it just works\" technologies. I guess node now defers to the operating system now for this feature.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs\">https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/jeffbski\/wait-on\/issues\/109\">https:\/\/github.com\/jeffbski\/wait-on\/issues\/109<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Script fix<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I found this fix that seems to do the job in our pipelines. I haven't vetted everything in this script so buyer beware.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/github.com\/undergroundwires\/privacy.sexy\/blob\/master\/.github\/actions\/force-ipv4\/force-ipv4.sh<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This goes over my head but going to attempt to provide a little background.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I ran into this issue because I'm trying to wait for a web server to spin up in the pipeline so I can run some Cypress tests. Looks a little like this:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>npm run start &amp; npx wait-on -i 1000 -v http:\/\/localhost:3000\/<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">IP confusion<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Apparently the issue comes from a \"happy eyeballs\" issue. I wonder if I've written about this before...should have checked my own blog.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The tl;dr is that \"happy eyeballs\" will check both IPv4 and IPv6 and prefer one or the other if both exist. It's one of the those, \"it just works\" technologies. I guess node now defers to the operating system now for this feature.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs\">https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/github.com\/jeffbski\/wait-on\/issues\/109\">https:\/\/github.com\/jeffbski\/wait-on\/issues\/109<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Script fix<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I found this fix that seems to do the job in our pipelines. I haven't vetted everything in this script so buyer beware.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/github.com\/undergroundwires\/privacy.sexy\/blob\/master\/.github\/actions\/force-ipv4\/force-ipv4.sh<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>This goes over my head but going to attempt to provide a little background.<\/p>\n\n\n\n<p>I ran into this issue because I&#8217;m trying to wait for a web server to spin up in the pipeline so I can run some Cypress tests. Looks a little like this:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm run start &amp; npx wait-on -i 1000 -v http:\/\/localhost:3000\/<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">IP confusion<\/h2>\n\n\n\n<p>Apparently the issue comes from a &#8220;happy eyeballs&#8221; issue. I wonder if I&#8217;ve written about this before&#8230;should have checked my own blog.<\/p>\n\n\n\n<p>The tl;dr is that &#8220;happy eyeballs&#8221; will check both IPv4 and IPv6 and prefer one or the other if both exist. It&#8217;s one of the those, &#8220;it just works&#8221; technologies. I guess node now defers to the operating system now for this feature.<\/p>\n\n\n\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs\">https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs<\/a><\/p>\n\n\n\n<p><a href=\"https:\/\/github.com\/jeffbski\/wait-on\/issues\/109\">https:\/\/github.com\/jeffbski\/wait-on\/issues\/109<\/a><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Script fix<\/h2>\n\n\n\n<p>I found this fix that seems to do the job in our pipelines. I haven&#8217;t vetted everything in this script so buyer beware.<\/p>\n\n\n\n<p>https:\/\/github.com\/undergroundwires\/privacy.sexy\/blob\/master\/.github\/actions\/force-ipv4\/force-ipv4.sh<\/p>\n",
        "date": "2024-04-04 15:21:59",
        "slug": "force-ipv4-in-bitbucket-pipeline",
        "excerpt": "This goes over my head but going to attempt to provide a little background. I ran into this issue because I&#8217;m trying to wait for a web server to spin up in the pipeline so I can run some Cypress tests. Looks a little like this: IP confusion Apparently the issue comes from a &#8220;happy [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 671,
        "title": "How to win the z-index wars",
        "content": "<!-- wp:paragraph -->\n<p>This is going to be a disappointing answer - don't fight them in the first place.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I recently saw what I thought was the funniest and most poignant example of the z-index wars.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>z-index: calc(9e999);<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I don't even know if that works since the maximum z-index value is <code>2147483647<\/code>. I had to look up what <code>9e999<\/code> represents in Google. Now I'm not sure this is true for CSS but:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>9e999 or other overflow number is\u00a0<strong>SQLite representation of infinity<\/strong>.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Infinity! Ha!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">But seriously, have a z-index plan<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The one way to avoid these wars is to have a plan. Define specific z-index values that represent various levels of your site. That way you always know where something should go and how to get above it without resulting to an infinity equation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This article on Smashing Magazine has some great ideas of how you can setup systems to deal with z-index - <a href=\"https:\/\/www.smashingmagazine.com\/2021\/02\/css-z-index-large-projects\/\">https:\/\/www.smashingmagazine.com\/2021\/02\/css-z-index-large-projects\/<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Also, take a look at the z-index systems of some popular design systems.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><a href=\"https:\/\/www.lightningdesignsystem.com\/design-tokens\/#category-z-index\">Lightning Design System (SalesForce)<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/design.learn.microsoft.com\/tokens\/z-index.html\">Atlas Design System (Microsoft)<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/cloudscape.design\/get-started\/dev-guides\/z-index\/\">Cloudscape Design System<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Modifiers<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Maybe my favorite idea from the z-index article is the idea of <code>before<\/code> and <code>after<\/code> modifiers.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It may seem silly to create a css variable that is literally <code>1<\/code> and <code>-1<\/code>, but think code readability.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>--z-index-above: 1;<br>--z-index-below: -1<br><br>.myClass {<br>  z-index: calc(var(--z-index-header) + var(--z-index-below));<br>}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I'll admit, it is a little verbose, but it's super obvious what is happening.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Make z-index peace, not z-index war!<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is going to be a disappointing answer - don't fight them in the first place.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I recently saw what I thought was the funniest and most poignant example of the z-index wars.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>z-index: calc(9e999);<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I don't even know if that works since the maximum z-index value is <code>2147483647<\/code>. I had to look up what <code>9e999<\/code> represents in Google. Now I'm not sure this is true for CSS but:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/quote",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/paragraph",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<p>9e999 or other overflow number is\u00a0<strong>SQLite representation of infinity<\/strong>.<\/p>\n"
                    }
                ],
                "innerHTML": "\n<blockquote class=\"wp-block-quote\"><\/blockquote>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Infinity! Ha!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">But seriously, have a z-index plan<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The one way to avoid these wars is to have a plan. Define specific z-index values that represent various levels of your site. That way you always know where something should go and how to get above it without resulting to an infinity equation.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This article on Smashing Magazine has some great ideas of how you can setup systems to deal with z-index - <a href=\"https:\/\/www.smashingmagazine.com\/2021\/02\/css-z-index-large-projects\/\">https:\/\/www.smashingmagazine.com\/2021\/02\/css-z-index-large-projects\/<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Also, take a look at the z-index systems of some popular design systems.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><a href=\"https:\/\/www.lightningdesignsystem.com\/design-tokens\/#category-z-index\">Lightning Design System (SalesForce)<\/a><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><a href=\"https:\/\/design.learn.microsoft.com\/tokens\/z-index.html\">Atlas Design System (Microsoft)<\/a><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><a href=\"https:\/\/cloudscape.design\/get-started\/dev-guides\/z-index\/\">Cloudscape Design System<\/a><\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Modifiers<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Maybe my favorite idea from the z-index article is the idea of <code>before<\/code> and <code>after<\/code> modifiers.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It may seem silly to create a css variable that is literally <code>1<\/code> and <code>-1<\/code>, but think code readability.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>--z-index-above: 1;<br>--z-index-below: -1<br><br>.myClass {<br>  z-index: calc(var(--z-index-header) + var(--z-index-below));<br>}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I'll admit, it is a little verbose, but it's super obvious what is happening.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Make z-index peace, not z-index war!<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>This is going to be a disappointing answer &#8211; don&#8217;t fight them in the first place.<\/p>\n\n\n\n<p>I recently saw what I thought was the funniest and most poignant example of the z-index wars.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>z-index: calc(9e999);<\/code><\/pre>\n\n\n\n<p>I don&#8217;t even know if that works since the maximum z-index value is <code>2147483647<\/code>. I had to look up what <code>9e999<\/code> represents in Google. Now I&#8217;m not sure this is true for CSS but:<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>9e999 or other overflow number is\u00a0<strong>SQLite representation of infinity<\/strong>.<\/p>\n<\/blockquote>\n\n\n\n<p>Infinity! Ha!<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">But seriously, have a z-index plan<\/h2>\n\n\n\n<p>The one way to avoid these wars is to have a plan. Define specific z-index values that represent various levels of your site. That way you always know where something should go and how to get above it without resulting to an infinity equation.<\/p>\n\n\n\n<p>This article on Smashing Magazine has some great ideas of how you can setup systems to deal with z-index &#8211; <a href=\"https:\/\/www.smashingmagazine.com\/2021\/02\/css-z-index-large-projects\/\">https:\/\/www.smashingmagazine.com\/2021\/02\/css-z-index-large-projects\/<\/a><\/p>\n\n\n\n<p>Also, take a look at the z-index systems of some popular design systems.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li><a href=\"https:\/\/www.lightningdesignsystem.com\/design-tokens\/#category-z-index\">Lightning Design System (SalesForce)<\/a><\/li>\n\n\n\n<li><a href=\"https:\/\/design.learn.microsoft.com\/tokens\/z-index.html\">Atlas Design System (Microsoft)<\/a><\/li>\n\n\n\n<li><a href=\"https:\/\/cloudscape.design\/get-started\/dev-guides\/z-index\/\">Cloudscape Design System<\/a><\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Modifiers<\/h2>\n\n\n\n<p>Maybe my favorite idea from the z-index article is the idea of <code>before<\/code> and <code>after<\/code> modifiers.<\/p>\n\n\n\n<p>It may seem silly to create a css variable that is literally <code>1<\/code> and <code>-1<\/code>, but think code readability.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>--z-index-above: 1;<br>--z-index-below: -1<br><br>.myClass {<br>  z-index: calc(var(--z-index-header) + var(--z-index-below));<br>}<\/code><\/pre>\n\n\n\n<p>I&#8217;ll admit, it is a little verbose, but it&#8217;s super obvious what is happening.<\/p>\n\n\n\n<p>Make z-index peace, not z-index war!<\/p>\n",
        "date": "2024-03-28 09:57:04",
        "slug": "how-to-win-the-z-index-wars",
        "excerpt": "This is going to be a disappointing answer &#8211; don&#8217;t fight them in the first place. I recently saw what I thought was the funniest and most poignant example of the z-index wars. I don&#8217;t even know if that works since the maximum z-index value is 2147483647. I had to look up what 9e999 represents [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 668,
        "title": "I messed up, git me back to what is on origin!",
        "content": "<!-- wp:paragraph -->\n<p>I can't tell you how much I used this command and yet every time I have to look it up. Maybe if I write a quick blog about it I'll remember. Or at least I can bookmark it for when I need it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Checkout the local branch you want to replace (for instance <code>mybranch<\/code>)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>git reset --hard origin\/mybranch<\/code><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This updates your local HEAD branch to be the same revision as origin\/mybranch, and\u00a0<code>--hard<\/code>\u00a0will sync this change into the index and workspace as well.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I can't tell you how much I used this command and yet every time I have to look it up. Maybe if I write a quick blog about it I'll remember. Or at least I can bookmark it for when I need it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Checkout the local branch you want to replace (for instance <code>mybranch<\/code>)<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><code>git reset --hard origin\/mybranch<\/code><\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n<\/ol>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This updates your local HEAD branch to be the same revision as origin\/mybranch, and\u00a0<code>--hard<\/code>\u00a0will sync this change into the index and workspace as well.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I can&#8217;t tell you how much I used this command and yet every time I have to look it up. Maybe if I write a quick blog about it I&#8217;ll remember. Or at least I can bookmark it for when I need it.<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Checkout the local branch you want to replace (for instance <code>mybranch<\/code>)<\/li>\n\n\n\n<li><code>git reset --hard origin\/mybranch<\/code><\/li>\n<\/ol>\n\n\n\n<p>This updates your local HEAD branch to be the same revision as origin\/mybranch, and\u00a0<code>--hard<\/code>\u00a0will sync this change into the index and workspace as well.<\/p>\n",
        "date": "2024-03-21 11:30:01",
        "slug": "i-messed-up-git-me-back-to-what-is-on-origin",
        "excerpt": "I can&#8217;t tell you how much I used this command and yet every time I have to look it up. Maybe if I write a quick blog about it I&#8217;ll remember. Or at least I can bookmark it for when I need it. This updates your local HEAD branch to be the same revision as [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 573,
        "title": "The DPI Myth: Forget DPI and Embrace the Pixel",
        "content": "<!-- wp:paragraph -->\n<p>The transition from print to screen from a designers perspective hasn't been the smoothest. In the early days of the web, graphic designers who had spent their careers designing brochures and billboards were tasked to create experiences for this new screen medium.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Naturally their muscle memory would apply print design principles to the screen. What we ended up with is a lot of fixed width websites that looked the same on whatever device you used. Granted, at the time most computer sported 800x600 15 inch displays (or 1024x768 if you were really lucky) so it mostly worked.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The responsive design era<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The smartphone era brought with it the idea that screen size was supremely flexible. The same website had to look good on a display width of 320 pixels as 1920 pixels. This led to the rise of <em>responsive design<\/em>, the idea that the site could morph to accommodate whatever screen size it was given.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pixel density vs DPI<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To say that DPI is irrelevant for screen mediums is not totally true, but its application is based on the screen itself and not on what is displayed on it. Pixel density refers to the number of pixels that are squeezed into a specific amount of space. We can use the term PPI (or pixels per inch) though that's not a widely used term.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we use the common denominator of what I see marketed as FHD (full HD or 1080p), that gives us 1920 pixels across and 1080 pixels down. When we spread those pixels over a 24 inch monitor we get a pixel density of roughly 92. At that same resolution on a 50 inch screen we have a much lower pixel density of around 44.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That means pixel density is not based on an image, but on the screen size itself.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":579,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/tv-1.png?w=530\" alt=\"\" class=\"wp-image-579\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Forget DPI - embrace the pixel<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The goal is still to make sure you are using up all the pixels you are given. If you want an image to take up half of a full HD screen (1920 x 1080) then you should provide an image that is at least 960px wide.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That is until I write that blog that explains how a pixel is not really a pixel anymore. Until next time!<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The transition from print to screen from a designers perspective hasn't been the smoothest. In the early days of the web, graphic designers who had spent their careers designing brochures and billboards were tasked to create experiences for this new screen medium.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Naturally their muscle memory would apply print design principles to the screen. What we ended up with is a lot of fixed width websites that looked the same on whatever device you used. Granted, at the time most computer sported 800x600 15 inch displays (or 1024x768 if you were really lucky) so it mostly worked.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The responsive design era<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The smartphone era brought with it the idea that screen size was supremely flexible. The same website had to look good on a display width of 320 pixels as 1920 pixels. This led to the rise of <em>responsive design<\/em>, the idea that the site could morph to accommodate whatever screen size it was given.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Pixel density vs DPI<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>To say that DPI is irrelevant for screen mediums is not totally true, but its application is based on the screen itself and not on what is displayed on it. Pixel density refers to the number of pixels that are squeezed into a specific amount of space. We can use the term PPI (or pixels per inch) though that's not a widely used term.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If we use the common denominator of what I see marketed as FHD (full HD or 1080p), that gives us 1920 pixels across and 1080 pixels down. When we spread those pixels over a 24 inch monitor we get a pixel density of roughly 92. At that same resolution on a 50 inch screen we have a much lower pixel density of around 44.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That means pixel density is not based on an image, but on the screen size itself.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 579,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/tv-1.png?w=530\" alt=\"\" class=\"wp-image-579\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 530,
                    "height": 513,
                    "file": "2024\/01\/tv-1.png",
                    "filesize": 7548,
                    "sizes": {
                        "medium": {
                            "file": "tv-1-300x290.png",
                            "width": 300,
                            "height": 290,
                            "mime-type": "image\/png",
                            "filesize": 8205
                        },
                        "thumbnail": {
                            "file": "tv-1-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 3267
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Forget DPI - embrace the pixel<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The goal is still to make sure you are using up all the pixels you are given. If you want an image to take up half of a full HD screen (1920 x 1080) then you should provide an image that is at least 960px wide.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That is until I write that blog that explains how a pixel is not really a pixel anymore. Until next time!<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>The transition from print to screen from a designers perspective hasn&#8217;t been the smoothest. In the early days of the web, graphic designers who had spent their careers designing brochures and billboards were tasked to create experiences for this new screen medium.<\/p>\n\n\n\n<p>Naturally their muscle memory would apply print design principles to the screen. What we ended up with is a lot of fixed width websites that looked the same on whatever device you used. Granted, at the time most computer sported 800&#215;600 15 inch displays (or 1024&#215;768 if you were really lucky) so it mostly worked.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The responsive design era<\/h2>\n\n\n\n<p>The smartphone era brought with it the idea that screen size was supremely flexible. The same website had to look good on a display width of 320 pixels as 1920 pixels. This led to the rise of <em>responsive design<\/em>, the idea that the site could morph to accommodate whatever screen size it was given.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Pixel density vs DPI<\/h2>\n\n\n\n<p>To say that DPI is irrelevant for screen mediums is not totally true, but its application is based on the screen itself and not on what is displayed on it. Pixel density refers to the number of pixels that are squeezed into a specific amount of space. We can use the term PPI (or pixels per inch) though that&#8217;s not a widely used term.<\/p>\n\n\n\n<p>If we use the common denominator of what I see marketed as FHD (full HD or 1080p), that gives us 1920 pixels across and 1080 pixels down. When we spread those pixels over a 24 inch monitor we get a pixel density of roughly 92. At that same resolution on a 50 inch screen we have a much lower pixel density of around 44.<\/p>\n\n\n\n<p>That means pixel density is not based on an image, but on the screen size itself.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"530\" height=\"513\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/tv-1.png?w=530\" alt=\"\" class=\"wp-image-579\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/tv-1.png 530w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/tv-1-300x290.png 300w\" sizes=\"(max-width: 530px) 100vw, 530px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Forget DPI &#8211; embrace the pixel<\/h2>\n\n\n\n<p>The goal is still to make sure you are using up all the pixels you are given. If you want an image to take up half of a full HD screen (1920 x 1080) then you should provide an image that is at least 960px wide.<\/p>\n\n\n\n<p>That is until I write that blog that explains how a pixel is not really a pixel anymore. Until next time!<\/p>\n",
        "date": "2024-02-15 21:44:09",
        "slug": "the-dpi-myth-forget-dpi-and-embrace-the-pixel",
        "excerpt": "The transition from print to screen from a designers perspective hasn&#8217;t been the smoothest. In the early days of the web, graphic designers who had spent their careers designing brochures and billboards were tasked to create experiences for this new screen medium. Naturally their muscle memory would apply print design principles to the screen. What [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2024\/02\/gemini_generated_image-1.jpeg"
    },
    {
        "id": 649,
        "title": "Exports fields and Webpack 4: It just doesn't work",
        "content": "<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">tl;dr<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Webpack 4 does not support the exports field of imported packages. Take it as a sign you need to upgrade to webpack 5.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Module not found: Error: Can't resolve<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This was the error I was getting when trying to import our new component library to an older Webpack 4 project. It was a confusing error because I could see the package in the node_modules folder, TypeScript was configured correctly, and I could import any other module from node_modules.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I started to catch on when I was able to isolate that is was only my module that was having issues. Then I remembered - we were using the relatively new <code>exports<\/code> syntax to define how other modules could use it as a dependency.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Understanding the 'exports' field<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>let's first understand the purpose of the 'exports' field. Introduced as part of the Node.js module system, the 'exports' field allows package authors to specify alternative entry points for their modules. This feature offers flexibility, especially in scenarios where developers wish to expose specific functionalities without requiring users to import the entire package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, a package author could define multiple entry points in their package.json like so:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code><code>{<br>  \"exports\": {<br>    \".\/entry1\": \".\/src\/entry1.js\",<br>    \".\/entry2\": \".\/src\/entry2.js\"<br>  }<br>}<br><\/code><\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here, 'entry1.js' and 'entry2.js' are exposed as separate entry points that consumers can import directly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Gotta bite the bullet and upgrade<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After a little searching I was able to determine that Webpack 4 didn't support the exports field in package.json. Bummer. Means I'd need to upgrade a whole bunch more dependencies, update the Webpack config in some cases, and just generally cause me more headaches.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Oh well, gotta do it anyway, might as well be now.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">tl;dr<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Webpack 4 does not support the exports field of imported packages. Take it as a sign you need to upgrade to webpack 5.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Module not found: Error: Can't resolve<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This was the error I was getting when trying to import our new component library to an older Webpack 4 project. It was a confusing error because I could see the package in the node_modules folder, TypeScript was configured correctly, and I could import any other module from node_modules.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I started to catch on when I was able to isolate that is was only my module that was having issues. Then I remembered - we were using the relatively new <code>exports<\/code> syntax to define how other modules could use it as a dependency.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Understanding the 'exports' field<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>let's first understand the purpose of the 'exports' field. Introduced as part of the Node.js module system, the 'exports' field allows package authors to specify alternative entry points for their modules. This feature offers flexibility, especially in scenarios where developers wish to expose specific functionalities without requiring users to import the entire package.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For instance, a package author could define multiple entry points in their package.json like so:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code><code>{<br>  \"exports\": {<br>    \".\/entry1\": \".\/src\/entry1.js\",<br>    \".\/entry2\": \".\/src\/entry2.js\"<br>  }<br>}<br><\/code><\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here, 'entry1.js' and 'entry2.js' are exposed as separate entry points that consumers can import directly.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Gotta bite the bullet and upgrade<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>After a little searching I was able to determine that Webpack 4 didn't support the exports field in package.json. Bummer. Means I'd need to upgrade a whole bunch more dependencies, update the Webpack config in some cases, and just generally cause me more headaches.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Oh well, gotta do it anyway, might as well be now.<\/p>\n"
            }
        ],
        "rendered_content": "\n<h2 class=\"wp-block-heading\">tl;dr<\/h2>\n\n\n\n<p>Webpack 4 does not support the exports field of imported packages. Take it as a sign you need to upgrade to webpack 5.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Module not found: Error: Can&#8217;t resolve<\/h2>\n\n\n\n<p>This was the error I was getting when trying to import our new component library to an older Webpack 4 project. It was a confusing error because I could see the package in the node_modules folder, TypeScript was configured correctly, and I could import any other module from node_modules.<\/p>\n\n\n\n<p>I started to catch on when I was able to isolate that is was only my module that was having issues. Then I remembered &#8211; we were using the relatively new <code>exports<\/code> syntax to define how other modules could use it as a dependency.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Understanding the &#8216;exports&#8217; field<\/h2>\n\n\n\n<p>let&#8217;s first understand the purpose of the &#8216;exports&#8217; field. Introduced as part of the Node.js module system, the &#8216;exports&#8217; field allows package authors to specify alternative entry points for their modules. This feature offers flexibility, especially in scenarios where developers wish to expose specific functionalities without requiring users to import the entire package.<\/p>\n\n\n\n<p>For instance, a package author could define multiple entry points in their package.json like so:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code><code>{<br>  \"exports\": {<br>    \".\/entry1\": \".\/src\/entry1.js\",<br>    \".\/entry2\": \".\/src\/entry2.js\"<br>  }<br>}<br><\/code><\/code><\/pre>\n\n\n\n<p>Here, &#8216;entry1.js&#8217; and &#8216;entry2.js&#8217; are exposed as separate entry points that consumers can import directly.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Gotta bite the bullet and upgrade<\/h2>\n\n\n\n<p>After a little searching I was able to determine that Webpack 4 didn&#8217;t support the exports field in package.json. Bummer. Means I&#8217;d need to upgrade a whole bunch more dependencies, update the Webpack config in some cases, and just generally cause me more headaches.<\/p>\n\n\n\n<p>Oh well, gotta do it anyway, might as well be now.<\/p>\n",
        "date": "2024-02-15 21:31:18",
        "slug": "exports-fields-and-webpack-4-it-just-doesnt-work",
        "excerpt": "tl;dr Webpack 4 does not support the exports field of imported packages. Take it as a sign you need to upgrade to webpack 5. Module not found: Error: Can&#8217;t resolve This was the error I was getting when trying to import our new component library to an older Webpack 4 project. It was a confusing [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 636,
        "title": "miniDV transfer project - adapter party!",
        "content": "<!-- wp:paragraph -->\n<p>I've been posting about my saga of transferring all my old home movies from DVD, VHS, and miniDV to Plex. Here is my currently setup for miniDV capture on Mac.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Canon miniDV camcorder <\/em>-&gt; <em>Firewire to Thunderbolt 2 adapter<\/em> -&gt; <em>Thunderbolt 2 to Thunderbolt 3 adapter<\/em> -&gt; <em>Mac mini<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":643,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/img_5208-1.jpeg?w=958\" alt=\"\" class=\"wp-image-643\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>I initially tried plugging the Thunderbolt 3 end into my Caldigit TS4 (as shown in the photo), but that didn't work. <em>Make sure you plug it directly into the Mac's Thunderbolt 3 port.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The main adapter you need to purchase now if you don't have one already is the <strong><a href=\"https:\/\/www.apple.com\/hk_smb_5217\/shop\/product\/MD464ZM\/A\/apple-thunderbolt-to-firewire-adapter\">Firewire to Thunderbolt 2<\/a><\/strong> (looks like you might be able to still get from Apple store Hong Kong?) adapter from Apple. I had to order one from Japan on eBay for 3 times its normal price. They don't make them anymore so don't wait too long to get one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">No NLE supports DV anymore<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It's amazing how fast formats can go from everywhere to nowhere. I could not find a reliable non-linear editor that would effectively capture DV footage over Firewire.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">iMovie<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>iMovie would capture the footage but there was no sound. I couldn't figure out any way to get the sound to work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Premiere<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I didn't try Premiere myself but did some reading that indicated it no longer could capture DV footage because of operating system changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">vrecord<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><em>This one works<\/em>. I'm a software engineer by day so the terminal and command line is not foreign to me but I was still wondering if I could make it work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":646,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-646\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Turns out it has a gui that pops up to get the settings just right. For capture DV video there really isn't much to set. Select your camera from the list, set the output file format (I prefer MKV) and filename, then hit record.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was thoroughly impressed and thankful that there are people who recognize we need tools to deal with this \"old\" format. How many thousands of hours would be just lost because it was too hard to capture the memories?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/amiaopensource\/vrecord\">https:\/\/github.com\/amiaopensource\/vrecord<\/a> <\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I've been posting about my saga of transferring all my old home movies from DVD, VHS, and miniDV to Plex. Here is my currently setup for miniDV capture on Mac.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>Canon miniDV camcorder <\/em>-&gt; <em>Firewire to Thunderbolt 2 adapter<\/em> -&gt; <em>Thunderbolt 2 to Thunderbolt 3 adapter<\/em> -&gt; <em>Mac mini<\/em><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 643,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/img_5208-1.jpeg?w=958\" alt=\"\" class=\"wp-image-643\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2395,
                    "height": 2560,
                    "file": "2024\/01\/img_5208-1-scaled.jpeg",
                    "filesize": 696895,
                    "sizes": {
                        "medium": {
                            "file": "img_5208-1-281x300.jpeg",
                            "width": 281,
                            "height": 300,
                            "mime-type": "image\/jpeg",
                            "filesize": 20804
                        },
                        "large": {
                            "file": "img_5208-1-958x1024.jpeg",
                            "width": 958,
                            "height": 1024,
                            "mime-type": "image\/jpeg",
                            "filesize": 131752
                        },
                        "thumbnail": {
                            "file": "img_5208-1-150x150.jpeg",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/jpeg",
                            "filesize": 7908
                        },
                        "medium_large": {
                            "file": "img_5208-1-768x821.jpeg",
                            "width": 768,
                            "height": 821,
                            "mime-type": "image\/jpeg",
                            "filesize": 92601
                        },
                        "1536x1536": {
                            "file": "img_5208-1-1437x1536.jpeg",
                            "width": 1437,
                            "height": 1536,
                            "mime-type": "image\/jpeg",
                            "filesize": 273482
                        },
                        "2048x2048": {
                            "file": "img_5208-1-1916x2048.jpeg",
                            "width": 1916,
                            "height": 2048,
                            "mime-type": "image\/jpeg",
                            "filesize": 468626
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    },
                    "original_image": "img_5208-1.jpeg"
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I initially tried plugging the Thunderbolt 3 end into my Caldigit TS4 (as shown in the photo), but that didn't work. <em>Make sure you plug it directly into the Mac's Thunderbolt 3 port.<\/em><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The main adapter you need to purchase now if you don't have one already is the <strong><a href=\"https:\/\/www.apple.com\/hk_smb_5217\/shop\/product\/MD464ZM\/A\/apple-thunderbolt-to-firewire-adapter\">Firewire to Thunderbolt 2<\/a><\/strong> (looks like you might be able to still get from Apple store Hong Kong?) adapter from Apple. I had to order one from Japan on eBay for 3 times its normal price. They don't make them anymore so don't wait too long to get one.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">No NLE supports DV anymore<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It's amazing how fast formats can go from everywhere to nowhere. I could not find a reliable non-linear editor that would effectively capture DV footage over Firewire.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">iMovie<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>iMovie would capture the footage but there was no sound. I couldn't figure out any way to get the sound to work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Premiere<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I didn't try Premiere myself but did some reading that indicated it no longer could capture DV footage because of operating system changes.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">vrecord<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>This one works<\/em>. I'm a software engineer by day so the terminal and command line is not foreign to me but I was still wondering if I could make it work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 646,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-646\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2184,
                    "height": 1560,
                    "file": "2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm.png",
                    "filesize": 274133,
                    "sizes": {
                        "medium": {
                            "file": "screenshot-2024-01-20-at-10.25.49e280afpm-300x214.png",
                            "width": 300,
                            "height": 214,
                            "mime-type": "image\/png",
                            "filesize": 26005
                        },
                        "large": {
                            "file": "screenshot-2024-01-20-at-10.25.49e280afpm-1024x731.png",
                            "width": 1024,
                            "height": 731,
                            "mime-type": "image\/png",
                            "filesize": 160607
                        },
                        "thumbnail": {
                            "file": "screenshot-2024-01-20-at-10.25.49e280afpm-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 10038
                        },
                        "medium_large": {
                            "file": "screenshot-2024-01-20-at-10.25.49e280afpm-768x549.png",
                            "width": 768,
                            "height": 549,
                            "mime-type": "image\/png",
                            "filesize": 104752
                        },
                        "1536x1536": {
                            "file": "screenshot-2024-01-20-at-10.25.49e280afpm-1536x1097.png",
                            "width": 1536,
                            "height": 1097,
                            "mime-type": "image\/png",
                            "filesize": 294262
                        },
                        "2048x2048": {
                            "file": "screenshot-2024-01-20-at-10.25.49e280afpm-2048x1463.png",
                            "width": 2048,
                            "height": 1463,
                            "mime-type": "image\/png",
                            "filesize": 452055
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Turns out it has a gui that pops up to get the settings just right. For capture DV video there really isn't much to set. Select your camera from the list, set the output file format (I prefer MKV) and filename, then hit record.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I was thoroughly impressed and thankful that there are people who recognize we need tools to deal with this \"old\" format. How many thousands of hours would be just lost because it was too hard to capture the memories?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/github.com\/amiaopensource\/vrecord\">https:\/\/github.com\/amiaopensource\/vrecord<\/a> <\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I&#8217;ve been posting about my saga of transferring all my old home movies from DVD, VHS, and miniDV to Plex. Here is my currently setup for miniDV capture on Mac.<\/p>\n\n\n\n<p><em>Canon miniDV camcorder <\/em>-&gt; <em>Firewire to Thunderbolt 2 adapter<\/em> -&gt; <em>Thunderbolt 2 to Thunderbolt 3 adapter<\/em> -&gt; <em>Mac mini<\/em><\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/img_5208-1.jpeg?w=958\" alt=\"\" class=\"wp-image-643\" \/><\/figure>\n\n\n\n<p>I initially tried plugging the Thunderbolt 3 end into my Caldigit TS4 (as shown in the photo), but that didn&#8217;t work. <em>Make sure you plug it directly into the Mac&#8217;s Thunderbolt 3 port.<\/em><\/p>\n\n\n\n<p>The main adapter you need to purchase now if you don&#8217;t have one already is the <strong><a href=\"https:\/\/www.apple.com\/hk_smb_5217\/shop\/product\/MD464ZM\/A\/apple-thunderbolt-to-firewire-adapter\">Firewire to Thunderbolt 2<\/a><\/strong> (looks like you might be able to still get from Apple store Hong Kong?) adapter from Apple. I had to order one from Japan on eBay for 3 times its normal price. They don&#8217;t make them anymore so don&#8217;t wait too long to get one.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">No NLE supports DV anymore<\/h2>\n\n\n\n<p>It&#8217;s amazing how fast formats can go from everywhere to nowhere. I could not find a reliable non-linear editor that would effectively capture DV footage over Firewire.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">iMovie<\/h3>\n\n\n\n<p>iMovie would capture the footage but there was no sound. I couldn&#8217;t figure out any way to get the sound to work.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Premiere<\/h3>\n\n\n\n<p>I didn&#8217;t try Premiere myself but did some reading that indicated it no longer could capture DV footage because of operating system changes.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">vrecord<\/h2>\n\n\n\n<p><em>This one works<\/em>. I&#8217;m a software engineer by day so the terminal and command line is not foreign to me but I was still wondering if I could make it work.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"2184\" height=\"1560\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-646\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm.png 2184w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm-300x214.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm-1024x731.png 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm-768x549.png 768w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm-1536x1097.png 1536w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-10.25.49e280afpm-2048x1463.png 2048w\" sizes=\"(max-width: 2184px) 100vw, 2184px\" \/><\/figure>\n\n\n\n<p>Turns out it has a gui that pops up to get the settings just right. For capture DV video there really isn&#8217;t much to set. Select your camera from the list, set the output file format (I prefer MKV) and filename, then hit record.<\/p>\n\n\n\n<p>I was thoroughly impressed and thankful that there are people who recognize we need tools to deal with this &#8220;old&#8221; format. How many thousands of hours would be just lost because it was too hard to capture the memories?<\/p>\n\n\n\n<p><a href=\"https:\/\/github.com\/amiaopensource\/vrecord\">https:\/\/github.com\/amiaopensource\/vrecord<\/a> <\/p>\n",
        "date": "2024-01-20 22:31:22",
        "slug": "minidv-transfer-project-adapter-party",
        "excerpt": "I&#8217;ve been posting about my saga of transferring all my old home movies from DVD, VHS, and miniDV to Plex. Here is my currently setup for miniDV capture on Mac. Canon miniDV camcorder -&gt; Firewire to Thunderbolt 2 adapter -&gt; Thunderbolt 2 to Thunderbolt 3 adapter -&gt; Mac mini I initially tried plugging the Thunderbolt [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2024\/02\/gemini_generated_image-2.jpeg"
    },
    {
        "id": 631,
        "title": "Optimizing Hot Module Replacement (HMR) in React with Vite: The Importance of One Component Export Per File",
        "content": "<!-- wp:paragraph -->\n<p>When it comes to optimizing the React development experience, tools like Vite provide a fast and efficient development server. However, there's a subtle detail that developers often miss when using React with Vite \u2013 the importance of consistent component exports.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The HMR Challenge<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Hot Module Replacement (HMR) is a feature that allows developers to see the changes they make in real-time without refreshing the entire page. It's a game-changer for boosting productivity during development. In the context of React and Vite, HMR ensures that your changes are reflected instantly, providing a seamless development experience.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But here's the catch \u2013 HMR relies on the ability to replace modules without affecting the entire application state. When it comes to React components, the way you export them can impact the effectiveness of HMR.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The One Component Per File Rule<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>According to the Vite documentation and best practices, it's recommended to export only one component per file. This ensures consistent component exports and enables HMR to work as expected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vite's official documentation on the <a href=\"https:\/\/github.com\/vitejs\/vite-plugin-react\/tree\/main\/packages\/plugin-react#consistent-components-exports\" target=\"_blank\" rel=\"noreferrer noopener\">consistent components exports<\/a> highlights the importance of this rule. By exporting a single component per file, Vite can accurately track changes and update only the relevant components during development.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ESLint Plugin for React Refresh<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To enforce this best practice in your codebase, consider using the <a href=\"https:\/\/github.com\/ArnaudBarre\/eslint-plugin-react-refresh\">eslint-plugin-react-refresh<\/a>. This ESLint plugin is specifically designed to catch instances where multiple components are exported from a single file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By integrating this plugin into your development workflow, you can catch potential issues early on and maintain a codebase that aligns with best practices for HMR in React with Vite.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When it comes to optimizing the React development experience, tools like Vite provide a fast and efficient development server. However, there's a subtle detail that developers often miss when using React with Vite \u2013 the importance of consistent component exports.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The HMR Challenge<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Hot Module Replacement (HMR) is a feature that allows developers to see the changes they make in real-time without refreshing the entire page. It's a game-changer for boosting productivity during development. In the context of React and Vite, HMR ensures that your changes are reflected instantly, providing a seamless development experience.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>But here's the catch \u2013 HMR relies on the ability to replace modules without affecting the entire application state. When it comes to React components, the way you export them can impact the effectiveness of HMR.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The One Component Per File Rule<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>According to the Vite documentation and best practices, it's recommended to export only one component per file. This ensures consistent component exports and enables HMR to work as expected.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Vite's official documentation on the <a href=\"https:\/\/github.com\/vitejs\/vite-plugin-react\/tree\/main\/packages\/plugin-react#consistent-components-exports\" target=\"_blank\" rel=\"noreferrer noopener\">consistent components exports<\/a> highlights the importance of this rule. By exporting a single component per file, Vite can accurately track changes and update only the relevant components during development.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">ESLint Plugin for React Refresh<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>To enforce this best practice in your codebase, consider using the <a href=\"https:\/\/github.com\/ArnaudBarre\/eslint-plugin-react-refresh\">eslint-plugin-react-refresh<\/a>. This ESLint plugin is specifically designed to catch instances where multiple components are exported from a single file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>By integrating this plugin into your development workflow, you can catch potential issues early on and maintain a codebase that aligns with best practices for HMR in React with Vite.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>When it comes to optimizing the React development experience, tools like Vite provide a fast and efficient development server. However, there&#8217;s a subtle detail that developers often miss when using React with Vite \u2013 the importance of consistent component exports.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The HMR Challenge<\/h2>\n\n\n\n<p>Hot Module Replacement (HMR) is a feature that allows developers to see the changes they make in real-time without refreshing the entire page. It&#8217;s a game-changer for boosting productivity during development. In the context of React and Vite, HMR ensures that your changes are reflected instantly, providing a seamless development experience.<\/p>\n\n\n\n<p>But here&#8217;s the catch \u2013 HMR relies on the ability to replace modules without affecting the entire application state. When it comes to React components, the way you export them can impact the effectiveness of HMR.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The One Component Per File Rule<\/h2>\n\n\n\n<p>According to the Vite documentation and best practices, it&#8217;s recommended to export only one component per file. This ensures consistent component exports and enables HMR to work as expected.<\/p>\n\n\n\n<p>Vite&#8217;s official documentation on the <a href=\"https:\/\/github.com\/vitejs\/vite-plugin-react\/tree\/main\/packages\/plugin-react#consistent-components-exports\" target=\"_blank\" rel=\"noreferrer noopener\">consistent components exports<\/a> highlights the importance of this rule. By exporting a single component per file, Vite can accurately track changes and update only the relevant components during development.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">ESLint Plugin for React Refresh<\/h2>\n\n\n\n<p>To enforce this best practice in your codebase, consider using the <a href=\"https:\/\/github.com\/ArnaudBarre\/eslint-plugin-react-refresh\">eslint-plugin-react-refresh<\/a>. This ESLint plugin is specifically designed to catch instances where multiple components are exported from a single file.<\/p>\n\n\n\n<p>By integrating this plugin into your development workflow, you can catch potential issues early on and maintain a codebase that aligns with best practices for HMR in React with Vite.<\/p>\n",
        "date": "2024-01-20 22:04:02",
        "slug": "optimizing-hot-module-replacement-hmr-in-react-with-vite-the-importance-of-one-component-export-per-file",
        "excerpt": "When it comes to optimizing the React development experience, tools like Vite provide a fast and efficient development server. However, there&#8217;s a subtle detail that developers often miss when using React with Vite \u2013 the importance of consistent component exports. The HMR Challenge Hot Module Replacement (HMR) is a feature that allows developers to see [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2024\/02\/unnamed.png"
    },
    {
        "id": 621,
        "title": "MKVToolNix GUI for the win!",
        "content": "<!-- wp:paragraph -->\n<p>If you look at some of my recent blogs you'll find the history of my fight with ripped home movie DVDs that didn't work out as easily as I'd hoped.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I think I finally found the best answer so far.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Track order weird<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For some reason, DVDs recorded with my Samsung DVD recorder from VHS have VOB files with mismatched streams. Some of the VOBs have video first, some audio first, some dvd track information.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The means that MakeMKV fails when trying to rip to an MKV. I also tried to stitch the raw VOBs (because they aren't encrypted) using mkvmerge and LosslessCut. It ended up being possible because I can manually specify track order using ffmpeg to modify the VOB files first.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">MKVToolNix GUI to the resuce<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I thought I'd tried this one before and it didn't work but I couldn't ever seem to reproduce the first way I tried.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it just seems to work, automatically fixing the track issues with no fuss.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Right click in the source files box and select <em>Attach files<\/em><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Select the first VOB from file explorer - it should automatically pull in sequentially numbered files<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Give it a destination file name<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Click <em>Start multiplexing<\/em><\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Boom, the finished audio file should be a single working mkv video file of your DVD. You can then take it into LosslessCut to split into multiple files or directly to Handbrake to encode to H264 or another more modern codec.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":627,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-627\" \/><\/figure>\n<!-- \/wp:image -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you look at some of my recent blogs you'll find the history of my fight with ripped home movie DVDs that didn't work out as easily as I'd hoped.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I think I finally found the best answer so far.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Track order weird<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For some reason, DVDs recorded with my Samsung DVD recorder from VHS have VOB files with mismatched streams. Some of the VOBs have video first, some audio first, some dvd track information.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The means that MakeMKV fails when trying to rip to an MKV. I also tried to stitch the raw VOBs (because they aren't encrypted) using mkvmerge and LosslessCut. It ended up being possible because I can manually specify track order using ffmpeg to modify the VOB files first.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">MKVToolNix GUI to the resuce<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I thought I'd tried this one before and it didn't work but I couldn't ever seem to reproduce the first way I tried.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now it just seems to work, automatically fixing the track issues with no fuss.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Right click in the source files box and select <em>Attach files<\/em><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Select the first VOB from file explorer - it should automatically pull in sequentially numbered files<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Give it a destination file name<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Click <em>Start multiplexing<\/em><\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n\n\n\n\n<\/ol>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Boom, the finished audio file should be a single working mkv video file of your DVD. You can then take it into LosslessCut to split into multiple files or directly to Handbrake to encode to H264 or another more modern codec.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 627,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-627\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2128,
                    "height": 1620,
                    "file": "2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm.png",
                    "filesize": 315749,
                    "sizes": {
                        "medium": {
                            "file": "screenshot-2024-01-20-at-1.55.48e280afpm-300x228.png",
                            "width": 300,
                            "height": 228,
                            "mime-type": "image\/png",
                            "filesize": 26759
                        },
                        "large": {
                            "file": "screenshot-2024-01-20-at-1.55.48e280afpm-1024x780.png",
                            "width": 1024,
                            "height": 780,
                            "mime-type": "image\/png",
                            "filesize": 175228
                        },
                        "thumbnail": {
                            "file": "screenshot-2024-01-20-at-1.55.48e280afpm-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 10378
                        },
                        "medium_large": {
                            "file": "screenshot-2024-01-20-at-1.55.48e280afpm-768x585.png",
                            "width": 768,
                            "height": 585,
                            "mime-type": "image\/png",
                            "filesize": 116499
                        },
                        "1536x1536": {
                            "file": "screenshot-2024-01-20-at-1.55.48e280afpm-1536x1169.png",
                            "width": 1536,
                            "height": 1169,
                            "mime-type": "image\/png",
                            "filesize": 313275
                        },
                        "2048x2048": {
                            "file": "screenshot-2024-01-20-at-1.55.48e280afpm-2048x1559.png",
                            "width": 2048,
                            "height": 1559,
                            "mime-type": "image\/png",
                            "filesize": 470848
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            }
        ],
        "rendered_content": "\n<p>If you look at some of my recent blogs you&#8217;ll find the history of my fight with ripped home movie DVDs that didn&#8217;t work out as easily as I&#8217;d hoped.<\/p>\n\n\n\n<p>I think I finally found the best answer so far.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Track order weird<\/h2>\n\n\n\n<p>For some reason, DVDs recorded with my Samsung DVD recorder from VHS have VOB files with mismatched streams. Some of the VOBs have video first, some audio first, some dvd track information.<\/p>\n\n\n\n<p>The means that MakeMKV fails when trying to rip to an MKV. I also tried to stitch the raw VOBs (because they aren&#8217;t encrypted) using mkvmerge and LosslessCut. It ended up being possible because I can manually specify track order using ffmpeg to modify the VOB files first.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">MKVToolNix GUI to the resuce<\/h2>\n\n\n\n<p>I thought I&#8217;d tried this one before and it didn&#8217;t work but I couldn&#8217;t ever seem to reproduce the first way I tried.<\/p>\n\n\n\n<p>Now it just seems to work, automatically fixing the track issues with no fuss.<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Right click in the source files box and select <em>Attach files<\/em><\/li>\n\n\n\n<li>Select the first VOB from file explorer &#8211; it should automatically pull in sequentially numbered files<\/li>\n\n\n\n<li>Give it a destination file name<\/li>\n\n\n\n<li>Click <em>Start multiplexing<\/em><\/li>\n<\/ol>\n\n\n\n<p>Boom, the finished audio file should be a single working mkv video file of your DVD. You can then take it into LosslessCut to split into multiple files or directly to Handbrake to encode to H264 or another more modern codec.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"2128\" height=\"1620\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-627\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm.png 2128w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm-300x228.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm-1024x780.png 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm-768x585.png 768w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm-1536x1169.png 1536w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-20-at-1.55.48e280afpm-2048x1559.png 2048w\" sizes=\"(max-width: 2128px) 100vw, 2128px\" \/><\/figure>\n",
        "date": "2024-01-20 13:58:29",
        "slug": "mkvtoolnix-gui-for-the-win",
        "excerpt": "If you look at some of my recent blogs you&#8217;ll find the history of my fight with ripped home movie DVDs that didn&#8217;t work out as easily as I&#8217;d hoped. I think I finally found the best answer so far. Track order weird For some reason, DVDs recorded with my Samsung DVD recorder from VHS [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 615,
        "title": "diff'ing two folders",
        "content": "<!-- wp:paragraph -->\n<p>I've been in Webpack refactoring land for a while now. It's a pretty ancient config in tech years so it needs to be a slow methodical process to get it up to date.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One of the first order of business is to re-organize. The current config has a lot of duplication and is super hard to read. That means the goal is to refactor the input but give the exact same output. That will help our confidence in our deployment because the built files are exactly the same.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Apps<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Looked at some different comparison apps, none of which worked great. Meld was the best option for a while but it crashes every time I try to compare a folder now. Most of the apps on the app store are trial versions that only compare a certain number of files. Make sure you don't assume it's looking at everything when it tells you they are the same.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Use the command line<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In this case there is a simple command line tool that comes with macOS: diff. Now I can quickly confirm my new build is the same as the old one.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>diff -rq build buildOld<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If it doesn't flag any files, boom you're done. <\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I've been in Webpack refactoring land for a while now. It's a pretty ancient config in tech years so it needs to be a slow methodical process to get it up to date.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One of the first order of business is to re-organize. The current config has a lot of duplication and is super hard to read. That means the goal is to refactor the input but give the exact same output. That will help our confidence in our deployment because the built files are exactly the same.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Apps<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Looked at some different comparison apps, none of which worked great. Meld was the best option for a while but it crashes every time I try to compare a folder now. Most of the apps on the app store are trial versions that only compare a certain number of files. Make sure you don't assume it's looking at everything when it tells you they are the same.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Use the command line<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In this case there is a simple command line tool that comes with macOS: diff. Now I can quickly confirm my new build is the same as the old one.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>diff -rq build buildOld<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If it doesn't flag any files, boom you're done. <\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I&#8217;ve been in Webpack refactoring land for a while now. It&#8217;s a pretty ancient config in tech years so it needs to be a slow methodical process to get it up to date.<\/p>\n\n\n\n<p>One of the first order of business is to re-organize. The current config has a lot of duplication and is super hard to read. That means the goal is to refactor the input but give the exact same output. That will help our confidence in our deployment because the built files are exactly the same.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Apps<\/h2>\n\n\n\n<p>Looked at some different comparison apps, none of which worked great. Meld was the best option for a while but it crashes every time I try to compare a folder now. Most of the apps on the app store are trial versions that only compare a certain number of files. Make sure you don&#8217;t assume it&#8217;s looking at everything when it tells you they are the same.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Use the command line<\/h2>\n\n\n\n<p>In this case there is a simple command line tool that comes with macOS: diff. Now I can quickly confirm my new build is the same as the old one.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>diff -rq build buildOld<\/code><\/pre>\n\n\n\n<p>If it doesn&#8217;t flag any files, boom you&#8217;re done. <\/p>\n",
        "date": "2024-01-19 15:35:54",
        "slug": "diffing-two-folders",
        "excerpt": "I&#8217;ve been in Webpack refactoring land for a while now. It&#8217;s a pretty ancient config in tech years so it needs to be a slow methodical process to get it up to date. One of the first order of business is to re-organize. The current config has a lot of duplication and is super hard [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 605,
        "title": "LosslessCut - my new favorite video tool",
        "content": "<!-- wp:paragraph -->\n<p>For years I've been looking for a \"simple\" tool that would be capable of chopping up video files without re-encoding them. I think I finally found that with <a href=\"https:\/\/mifi.no\/losslesscut\/\">LosslessCut<\/a>, an open source video editing tool you can find on <a href=\"https:\/\/github.com\/mifi\/lossless-cut\">Github<\/a> and the App Store.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Home movies<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I've been digitizing in DVDs that I used to record old VHS home movies. Each VHS tape was a mish-mash of recordings from different times periods interspersed with episodes of Home Improvement and Star Trek recorded off cable TV.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>LosslessCut has been amazing for slicing and dicing those videos to make them far more digestable and at home in the Plex environment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":613,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1.jpeg?w=1024\" alt=\"\" class=\"wp-image-613\" \/><\/figure>\n<!-- \/wp:image -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For years I've been looking for a \"simple\" tool that would be capable of chopping up video files without re-encoding them. I think I finally found that with <a href=\"https:\/\/mifi.no\/losslesscut\/\">LosslessCut<\/a>, an open source video editing tool you can find on <a href=\"https:\/\/github.com\/mifi\/lossless-cut\">Github<\/a> and the App Store.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Home movies<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I've been digitizing in DVDs that I used to record old VHS home movies. Each VHS tape was a mish-mash of recordings from different times periods interspersed with episodes of Home Improvement and Star Trek recorded off cable TV.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>LosslessCut has been amazing for slicing and dicing those videos to make them far more digestable and at home in the Plex environment.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 613,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1.jpeg?w=1024\" alt=\"\" class=\"wp-image-613\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2474,
                    "height": 1940,
                    "file": "2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1.jpeg",
                    "filesize": 624342,
                    "sizes": {
                        "medium": {
                            "file": "screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-300x235.jpeg",
                            "width": 300,
                            "height": 235,
                            "mime-type": "image\/jpeg",
                            "filesize": 17642
                        },
                        "large": {
                            "file": "screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-1024x803.jpeg",
                            "width": 1024,
                            "height": 803,
                            "mime-type": "image\/jpeg",
                            "filesize": 102577
                        },
                        "thumbnail": {
                            "file": "screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-150x150.jpeg",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/jpeg",
                            "filesize": 7282
                        },
                        "medium_large": {
                            "file": "screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-768x602.jpeg",
                            "width": 768,
                            "height": 602,
                            "mime-type": "image\/jpeg",
                            "filesize": 68672
                        },
                        "1536x1536": {
                            "file": "screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-1536x1204.jpeg",
                            "width": 1536,
                            "height": 1204,
                            "mime-type": "image\/jpeg",
                            "filesize": 183456
                        },
                        "2048x2048": {
                            "file": "screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-2048x1606.jpeg",
                            "width": 2048,
                            "height": 1606,
                            "mime-type": "image\/jpeg",
                            "filesize": 272330
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            }
        ],
        "rendered_content": "\n<p>For years I&#8217;ve been looking for a &#8220;simple&#8221; tool that would be capable of chopping up video files without re-encoding them. I think I finally found that with <a href=\"https:\/\/mifi.no\/losslesscut\/\">LosslessCut<\/a>, an open source video editing tool you can find on <a href=\"https:\/\/github.com\/mifi\/lossless-cut\">Github<\/a> and the App Store.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Home movies<\/h2>\n\n\n\n<p>I&#8217;ve been digitizing in DVDs that I used to record old VHS home movies. Each VHS tape was a mish-mash of recordings from different times periods interspersed with episodes of Home Improvement and Star Trek recorded off cable TV.<\/p>\n\n\n\n<p>LosslessCut has been amazing for slicing and dicing those videos to make them far more digestable and at home in the Plex environment.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"2474\" height=\"1940\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1.jpeg?w=1024\" alt=\"\" class=\"wp-image-613\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1.jpeg 2474w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-300x235.jpeg 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-1024x803.jpeg 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-768x602.jpeg 768w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-1536x1204.jpeg 1536w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screen-sharing-picture-january-17-2024-at-10.23.01e280afpm-cst-1-2048x1606.jpeg 2048w\" sizes=\"(max-width: 2474px) 100vw, 2474px\" \/><\/figure>\n",
        "date": "2024-01-17 22:27:57",
        "slug": "losslesscut-my-new-favorite-video-tool",
        "excerpt": "For years I&#8217;ve been looking for a &#8220;simple&#8221; tool that would be capable of chopping up video files without re-encoding them. I think I finally found that with LosslessCut, an open source video editing tool you can find on Github and the App Store. Home movies I&#8217;ve been digitizing in DVDs that I used to [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 597,
        "title": "ffprobe - vob file stream information",
        "content": "<!-- wp:paragraph -->\n<p>In my recent archiving project, moving home movies from DVDs and miniDV tapes, I've run into a number of issues.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One of those issues is that I've been having trouble ripping DVDs recorded on my Samsung DVD recorder. I've already documented part of my journey in this blog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Analyze the data<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I've been having a hard time nailing down exactly what's going on because I didn't have a tool to give objective information about the file. It seems every tool does some kind of manipulation to make the experience better, but it obfuscates what's actually there.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ffprobe<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>ffprobe is a handy utility that is part of the ffmpeg suite. It can analyze video files and show you data about them.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For my use I wanted to get info on the streams in the file. The order seems to matter when merging files so I needed a way to list the order.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>ffprobe vts_01_1.vob 2&gt;&amp;1 | grep 'Stream'<br><br>\/\/ output<br>Stream #0:0&#091;0x80]: Audio: ac3, 48000 Hz, stereo, fltp, 256 kb\/s<br>Stream #0:1&#091;0x1e0]: Video: mpeg2video (Main), yuv420p(tv, top first), 720x480 &#091;SAR 8:9 DAR 4:3], Closed Captions, 29.97 fps, 29.97 tbr, 90k tbn<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">the breakdown<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li><code>ffprobe<\/code>: This is the command-line tool provided by FFmpeg for analyzing multimedia files.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>vts_01_1.vob<\/code>: This is the input video file that came from the DVD.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>2&gt;&amp;1<\/code>: This part is redirecting the standard error (stderr) to the same location as the standard output (stdout). If you don't do this then grep won't work.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><code>| grep 'Stream'<\/code>: This is to only show the streams as all the other information is extraneous for my current purpose.<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In my recent archiving project, moving home movies from DVDs and miniDV tapes, I've run into a number of issues.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One of those issues is that I've been having trouble ripping DVDs recorded on my Samsung DVD recorder. I've already documented part of my journey in this blog.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Analyze the data<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I've been having a hard time nailing down exactly what's going on because I didn't have a tool to give objective information about the file. It seems every tool does some kind of manipulation to make the experience better, but it obfuscates what's actually there.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">ffprobe<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>ffprobe is a handy utility that is part of the ffmpeg suite. It can analyze video files and show you data about them.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For my use I wanted to get info on the streams in the file. The order seems to matter when merging files so I needed a way to list the order.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>ffprobe vts_01_1.vob 2&gt;&amp;1 | grep 'Stream'<br><br>\/\/ output<br>Stream #0:0&#091;0x80]: Audio: ac3, 48000 Hz, stereo, fltp, 256 kb\/s<br>Stream #0:1&#091;0x1e0]: Video: mpeg2video (Main), yuv420p(tv, top first), 720x480 &#091;SAR 8:9 DAR 4:3], Closed Captions, 29.97 fps, 29.97 tbr, 90k tbn<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">the breakdown<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><code>ffprobe<\/code>: This is the command-line tool provided by FFmpeg for analyzing multimedia files.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><code>vts_01_1.vob<\/code>: This is the input video file that came from the DVD.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><code>2&gt;&amp;1<\/code>: This part is redirecting the standard error (stderr) to the same location as the standard output (stdout). If you don't do this then grep won't work.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><code>| grep 'Stream'<\/code>: This is to only show the streams as all the other information is extraneous for my current purpose.<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n\n\n\n\n<\/ol>\n"
            }
        ],
        "rendered_content": "\n<p>In my recent archiving project, moving home movies from DVDs and miniDV tapes, I&#8217;ve run into a number of issues.<\/p>\n\n\n\n<p>One of those issues is that I&#8217;ve been having trouble ripping DVDs recorded on my Samsung DVD recorder. I&#8217;ve already documented part of my journey in this blog.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Analyze the data<\/h2>\n\n\n\n<p>I&#8217;ve been having a hard time nailing down exactly what&#8217;s going on because I didn&#8217;t have a tool to give objective information about the file. It seems every tool does some kind of manipulation to make the experience better, but it obfuscates what&#8217;s actually there.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">ffprobe<\/h2>\n\n\n\n<p>ffprobe is a handy utility that is part of the ffmpeg suite. It can analyze video files and show you data about them.<\/p>\n\n\n\n<p>For my use I wanted to get info on the streams in the file. The order seems to matter when merging files so I needed a way to list the order.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ffprobe vts_01_1.vob 2&gt;&amp;1 | grep 'Stream'<br><br>\/\/ output<br>Stream #0:0&#091;0x80]: Audio: ac3, 48000 Hz, stereo, fltp, 256 kb\/s<br>Stream #0:1&#091;0x1e0]: Video: mpeg2video (Main), yuv420p(tv, top first), 720x480 &#091;SAR 8:9 DAR 4:3], Closed Captions, 29.97 fps, 29.97 tbr, 90k tbn<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">the breakdown<\/h3>\n\n\n\n<ol class=\"wp-block-list\">\n<li><code>ffprobe<\/code>: This is the command-line tool provided by FFmpeg for analyzing multimedia files.<\/li>\n\n\n\n<li><code>vts_01_1.vob<\/code>: This is the input video file that came from the DVD.<\/li>\n\n\n\n<li><code>2&gt;&amp;1<\/code>: This part is redirecting the standard error (stderr) to the same location as the standard output (stdout). If you don&#8217;t do this then grep won&#8217;t work.<\/li>\n\n\n\n<li><code>| grep 'Stream'<\/code>: This is to only show the streams as all the other information is extraneous for my current purpose.<\/li>\n<\/ol>\n",
        "date": "2024-01-17 21:56:06",
        "slug": "ffprobe-vob-file-stream-information",
        "excerpt": "In my recent archiving project, moving home movies from DVDs and miniDV tapes, I&#8217;ve run into a number of issues. One of those issues is that I&#8217;ve been having trouble ripping DVDs recorded on my Samsung DVD recorder. I&#8217;ve already documented part of my journey in this blog. Analyze the data I&#8217;ve been having a [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 581,
        "title": "Ripping home movies to Plex",
        "content": "<!-- wp:paragraph -->\n<p>We had a tonne (yes that's metric) of old VHS tapes that I wanted to be able to play. I can't actually remember when I started, but I think it was over 10 years ago.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I purchased a DVD recorder, the <a href=\"https:\/\/www.amazon.com\/Samsung-DVD-R160-Tunerless-Upconverting-Recorder\/dp\/B000SMYITY\/ref=cm_cr_arp_d_product_top?ie=UTF8\">Samsung DVD-R160<\/a>. I wanted the ease of just pushing record on the DVD recorder and pushing play on the VHS machine. Worked out pretty good, I was able to transfer at least 100 tapes to DVD in a relatively short amount of time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">DVD? What's that?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Fast forward another 10 or so years and we don't have an active DVD player. I still have the Samsung hooked up downstairs but it's rare that we'd sit down and plop in old home movie DVDs and watch for hours.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having a Plex server for my own library of movies, it only made too much sense to create a Plex library for home movies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">It's simple to rip, right?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I thought it should be fairly straightforward to rip those DVDs into Plex. After all I have become a fan of MakeMKV that easily rips a DVD to an MKV file that Plex can read without having to re-encode and lose a generation of quality.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, MakeMKV started erroring out on multiple DVDs. I tried different drives (I have an LG BP60NB10 and a Samsung SE-506). I tried multiple times, I tried creating an image first, I tried different software, and nothing worked. Still got errors.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Track order matters<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One method that almost worked was copying the raw VOB files from the DVD (which I could do because they aren't encrypted with copy protection) and attempting to convert to MKV.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I could convert the individual files but that broke up the videos as VOB files are limited to 1GB file size. Why not try and connect them together. This is where it starts to get complicated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">LosslessCut<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is a great piece of software. I've been looking for exactly these features for ages. Most times I don't want to re-edit and re-encode videos but instead just snip and clip here and there. <a href=\"https:\/\/mifi.no\/losslesscut\/\" target=\"_blank\" rel=\"noreferrer noopener\">LosslessCut<\/a> fits the bill.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>LosslessCut also has the ability to merge a number of video files together. I've also used the command line utility <a href=\"https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html\" target=\"_blank\" rel=\"noreferrer noopener\">mkvmerge<\/a>. Though I'm a programmer by day, command line utilities for things like modifying video files just seems like too much.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Won't merge, what's going on!?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>LosslessCut can show some details of what is encoded in the files. Took a look at the first VOB and saw this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":590,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-590\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Made sense. The video was the first track and the audio the second track. So I opened the next VOB and saw this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":591,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-591\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Ok, it's starting to make sense. For some reason in this VOB the audio is the first track with the video as the second track.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I find this really odd considering this all came from the Samsung DVD recorder I previously mentioned. Why would it change the order of tracks while recording the same content?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I wanted to get a little more info so I opened up the VOB files from the same disk in mkvtoolnix-gui, another great tool for dealing with mkv files. This is what I saw:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":594,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-594\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Again, becoming more clear. For some reason the first and last VOB files had the video track first with the middle two listing the audio track first.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I don't know all the technical details, but apparently you can't merge those files unless the tracks match.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Now I'm confused<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the process of writing this blog it's taken me a couple sittings. In that time somehow I can't seem to reproduce the views I showed above. Even though LosslessCut still won't merge the files, when I open with mkvtoolnix-gui all the video tracks are ID 0 and the audios tracks 1.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I'm obviously going to spend more time with this so hopefully I can nail it down with a little more precision.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We had a tonne (yes that's metric) of old VHS tapes that I wanted to be able to play. I can't actually remember when I started, but I think it was over 10 years ago.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I purchased a DVD recorder, the <a href=\"https:\/\/www.amazon.com\/Samsung-DVD-R160-Tunerless-Upconverting-Recorder\/dp\/B000SMYITY\/ref=cm_cr_arp_d_product_top?ie=UTF8\">Samsung DVD-R160<\/a>. I wanted the ease of just pushing record on the DVD recorder and pushing play on the VHS machine. Worked out pretty good, I was able to transfer at least 100 tapes to DVD in a relatively short amount of time.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">DVD? What's that?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Fast forward another 10 or so years and we don't have an active DVD player. I still have the Samsung hooked up downstairs but it's rare that we'd sit down and plop in old home movie DVDs and watch for hours.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Having a Plex server for my own library of movies, it only made too much sense to create a Plex library for home movies.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">It's simple to rip, right?<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I thought it should be fairly straightforward to rip those DVDs into Plex. After all I have become a fan of MakeMKV that easily rips a DVD to an MKV file that Plex can read without having to re-encode and lose a generation of quality.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>However, MakeMKV started erroring out on multiple DVDs. I tried different drives (I have an LG BP60NB10 and a Samsung SE-506). I tried multiple times, I tried creating an image first, I tried different software, and nothing worked. Still got errors.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Track order matters<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One method that almost worked was copying the raw VOB files from the DVD (which I could do because they aren't encrypted with copy protection) and attempting to convert to MKV.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I could convert the individual files but that broke up the videos as VOB files are limited to 1GB file size. Why not try and connect them together. This is where it starts to get complicated.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">LosslessCut<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is a great piece of software. I've been looking for exactly these features for ages. Most times I don't want to re-edit and re-encode videos but instead just snip and clip here and there. <a href=\"https:\/\/mifi.no\/losslesscut\/\" target=\"_blank\" rel=\"noreferrer noopener\">LosslessCut<\/a> fits the bill.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>LosslessCut also has the ability to merge a number of video files together. I've also used the command line utility <a href=\"https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html\" target=\"_blank\" rel=\"noreferrer noopener\">mkvmerge<\/a>. Though I'm a programmer by day, command line utilities for things like modifying video files just seems like too much.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Won't merge, what's going on!?<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>LosslessCut can show some details of what is encoded in the files. Took a look at the first VOB and saw this:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 590,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-590\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2432,
                    "height": 560,
                    "file": "2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm.png",
                    "filesize": 63112,
                    "sizes": {
                        "medium": {
                            "file": "screenshot-2024-01-13-at-5.22.12e280afpm-300x69.png",
                            "width": 300,
                            "height": 69,
                            "mime-type": "image\/png",
                            "filesize": 7419
                        },
                        "large": {
                            "file": "screenshot-2024-01-13-at-5.22.12e280afpm-1024x236.png",
                            "width": 1024,
                            "height": 236,
                            "mime-type": "image\/png",
                            "filesize": 46475
                        },
                        "thumbnail": {
                            "file": "screenshot-2024-01-13-at-5.22.12e280afpm-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 3580
                        },
                        "medium_large": {
                            "file": "screenshot-2024-01-13-at-5.22.12e280afpm-768x177.png",
                            "width": 768,
                            "height": 177,
                            "mime-type": "image\/png",
                            "filesize": 32157
                        },
                        "1536x1536": {
                            "file": "screenshot-2024-01-13-at-5.22.12e280afpm-1536x354.png",
                            "width": 1536,
                            "height": 354,
                            "mime-type": "image\/png",
                            "filesize": 83271
                        },
                        "2048x2048": {
                            "file": "screenshot-2024-01-13-at-5.22.12e280afpm-2048x472.png",
                            "width": 2048,
                            "height": 472,
                            "mime-type": "image\/png",
                            "filesize": 123719
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Made sense. The video was the first track and the audio the second track. So I opened the next VOB and saw this:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 591,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-591\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2426,
                    "height": 516,
                    "file": "2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm.png",
                    "filesize": 203665,
                    "sizes": {
                        "medium": {
                            "file": "screenshot-2024-01-13-at-5.20.29e280afpm-300x64.png",
                            "width": 300,
                            "height": 64,
                            "mime-type": "image\/png",
                            "filesize": 16556
                        },
                        "large": {
                            "file": "screenshot-2024-01-13-at-5.20.29e280afpm-1024x218.png",
                            "width": 1024,
                            "height": 218,
                            "mime-type": "image\/png",
                            "filesize": 103827
                        },
                        "thumbnail": {
                            "file": "screenshot-2024-01-13-at-5.20.29e280afpm-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 8207
                        },
                        "medium_large": {
                            "file": "screenshot-2024-01-13-at-5.20.29e280afpm-768x163.png",
                            "width": 768,
                            "height": 163,
                            "mime-type": "image\/png",
                            "filesize": 69270
                        },
                        "1536x1536": {
                            "file": "screenshot-2024-01-13-at-5.20.29e280afpm-1536x327.png",
                            "width": 1536,
                            "height": 327,
                            "mime-type": "image\/png",
                            "filesize": 184841
                        },
                        "2048x2048": {
                            "file": "screenshot-2024-01-13-at-5.20.29e280afpm-2048x436.png",
                            "width": 2048,
                            "height": 436,
                            "mime-type": "image\/png",
                            "filesize": 269656
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Ok, it's starting to make sense. For some reason in this VOB the audio is the first track with the video as the second track.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I find this really odd considering this all came from the Samsung DVD recorder I previously mentioned. Why would it change the order of tracks while recording the same content?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I wanted to get a little more info so I opened up the VOB files from the same disk in mkvtoolnix-gui, another great tool for dealing with mkv files. This is what I saw:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 594,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-594\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 1736,
                    "height": 444,
                    "file": "2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm.png",
                    "filesize": 87311,
                    "sizes": {
                        "medium": {
                            "file": "screenshot-2024-01-13-at-5.22.27e280afpm-300x77.png",
                            "width": 300,
                            "height": 77,
                            "mime-type": "image\/png",
                            "filesize": 14336
                        },
                        "large": {
                            "file": "screenshot-2024-01-13-at-5.22.27e280afpm-1024x262.png",
                            "width": 1024,
                            "height": 262,
                            "mime-type": "image\/png",
                            "filesize": 89872
                        },
                        "thumbnail": {
                            "file": "screenshot-2024-01-13-at-5.22.27e280afpm-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 4517
                        },
                        "medium_large": {
                            "file": "screenshot-2024-01-13-at-5.22.27e280afpm-768x196.png",
                            "width": 768,
                            "height": 196,
                            "mime-type": "image\/png",
                            "filesize": 59128
                        },
                        "1536x1536": {
                            "file": "screenshot-2024-01-13-at-5.22.27e280afpm-1536x393.png",
                            "width": 1536,
                            "height": 393,
                            "mime-type": "image\/png",
                            "filesize": 159741
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Again, becoming more clear. For some reason the first and last VOB files had the video track first with the middle two listing the audio track first.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I don't know all the technical details, but apparently you can't merge those files unless the tracks match.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Now I'm confused<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In the process of writing this blog it's taken me a couple sittings. In that time somehow I can't seem to reproduce the views I showed above. Even though LosslessCut still won't merge the files, when I open with mkvtoolnix-gui all the video tracks are ID 0 and the audios tracks 1.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I'm obviously going to spend more time with this so hopefully I can nail it down with a little more precision.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>We had a tonne (yes that&#8217;s metric) of old VHS tapes that I wanted to be able to play. I can&#8217;t actually remember when I started, but I think it was over 10 years ago.<\/p>\n\n\n\n<p>I purchased a DVD recorder, the <a href=\"https:\/\/www.amazon.com\/Samsung-DVD-R160-Tunerless-Upconverting-Recorder\/dp\/B000SMYITY\/ref=cm_cr_arp_d_product_top?ie=UTF8\">Samsung DVD-R160<\/a>. I wanted the ease of just pushing record on the DVD recorder and pushing play on the VHS machine. Worked out pretty good, I was able to transfer at least 100 tapes to DVD in a relatively short amount of time.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">DVD? What&#8217;s that?<\/h2>\n\n\n\n<p>Fast forward another 10 or so years and we don&#8217;t have an active DVD player. I still have the Samsung hooked up downstairs but it&#8217;s rare that we&#8217;d sit down and plop in old home movie DVDs and watch for hours.<\/p>\n\n\n\n<p>Having a Plex server for my own library of movies, it only made too much sense to create a Plex library for home movies.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">It&#8217;s simple to rip, right?<\/h3>\n\n\n\n<p>I thought it should be fairly straightforward to rip those DVDs into Plex. After all I have become a fan of MakeMKV that easily rips a DVD to an MKV file that Plex can read without having to re-encode and lose a generation of quality.<\/p>\n\n\n\n<p>However, MakeMKV started erroring out on multiple DVDs. I tried different drives (I have an LG BP60NB10 and a Samsung SE-506). I tried multiple times, I tried creating an image first, I tried different software, and nothing worked. Still got errors.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Track order matters<\/h3>\n\n\n\n<p>One method that almost worked was copying the raw VOB files from the DVD (which I could do because they aren&#8217;t encrypted with copy protection) and attempting to convert to MKV.<\/p>\n\n\n\n<p>I could convert the individual files but that broke up the videos as VOB files are limited to 1GB file size. Why not try and connect them together. This is where it starts to get complicated.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">LosslessCut<\/h3>\n\n\n\n<p>This is a great piece of software. I&#8217;ve been looking for exactly these features for ages. Most times I don&#8217;t want to re-edit and re-encode videos but instead just snip and clip here and there. <a href=\"https:\/\/mifi.no\/losslesscut\/\" target=\"_blank\" rel=\"noreferrer noopener\">LosslessCut<\/a> fits the bill.<\/p>\n\n\n\n<p>LosslessCut also has the ability to merge a number of video files together. I&#8217;ve also used the command line utility <a href=\"https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html\" target=\"_blank\" rel=\"noreferrer noopener\">mkvmerge<\/a>. Though I&#8217;m a programmer by day, command line utilities for things like modifying video files just seems like too much.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Won&#8217;t merge, what&#8217;s going on!?<\/h3>\n\n\n\n<p>LosslessCut can show some details of what is encoded in the files. Took a look at the first VOB and saw this:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"2432\" height=\"560\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-590\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm.png 2432w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm-300x69.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm-1024x236.png 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm-768x177.png 768w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm-1536x354.png 1536w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.12e280afpm-2048x472.png 2048w\" sizes=\"(max-width: 2432px) 100vw, 2432px\" \/><\/figure>\n\n\n\n<p>Made sense. The video was the first track and the audio the second track. So I opened the next VOB and saw this:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"2426\" height=\"516\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-591\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm.png 2426w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm-300x64.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm-1024x218.png 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm-768x163.png 768w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm-1536x327.png 1536w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.20.29e280afpm-2048x436.png 2048w\" sizes=\"(max-width: 2426px) 100vw, 2426px\" \/><\/figure>\n\n\n\n<p>Ok, it&#8217;s starting to make sense. For some reason in this VOB the audio is the first track with the video as the second track.<\/p>\n\n\n\n<p>I find this really odd considering this all came from the Samsung DVD recorder I previously mentioned. Why would it change the order of tracks while recording the same content?<\/p>\n\n\n\n<p>I wanted to get a little more info so I opened up the VOB files from the same disk in mkvtoolnix-gui, another great tool for dealing with mkv files. This is what I saw:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" decoding=\"async\" width=\"1736\" height=\"444\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm.png?w=1024\" alt=\"\" class=\"wp-image-594\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm.png 1736w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm-300x77.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm-1024x262.png 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm-768x196.png 768w, http:\/\/localhost:8881\/wp-content\/uploads\/2024\/01\/screenshot-2024-01-13-at-5.22.27e280afpm-1536x393.png 1536w\" sizes=\"(max-width: 1736px) 100vw, 1736px\" \/><\/figure>\n\n\n\n<p>Again, becoming more clear. For some reason the first and last VOB files had the video track first with the middle two listing the audio track first.<\/p>\n\n\n\n<p>I don&#8217;t know all the technical details, but apparently you can&#8217;t merge those files unless the tracks match.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Now I&#8217;m confused<\/h3>\n\n\n\n<p>In the process of writing this blog it&#8217;s taken me a couple sittings. In that time somehow I can&#8217;t seem to reproduce the views I showed above. Even though LosslessCut still won&#8217;t merge the files, when I open with mkvtoolnix-gui all the video tracks are ID 0 and the audios tracks 1.<\/p>\n\n\n\n<p>I&#8217;m obviously going to spend more time with this so hopefully I can nail it down with a little more precision.<\/p>\n",
        "date": "2024-01-14 22:13:20",
        "slug": "ripping-home-movies-to-plex",
        "excerpt": "We had a tonne (yes that&#8217;s metric) of old VHS tapes that I wanted to be able to play. I can&#8217;t actually remember when I started, but I think it was over 10 years ago. I purchased a DVD recorder, the Samsung DVD-R160. I wanted the ease of just pushing record on the DVD recorder [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 561,
        "title": "PostCSS and autoprefixer not show source file for warnings",
        "content": "<!-- wp:paragraph -->\n<p>Ran into this issue yesterday. Working with a webpack config I updated from node-sass to sass (dart sass) and started getting new warnings from autoprefixer. Not wanting to clutter up the build screen I thought I'd just fix some of those errors. But to my dismay all I got was a line number and no source file. How am I supposed to find that!?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First I tried running everything from the command line to bypass webpack altogether.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>npx sass main.scss main.css\nnpx postcss main.css main-postcss.css<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The warnings were a little cleaner, but still not helpful. Line 58 of what!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>58:2    \u26a0  start value has mixed support, consider using flex-start instead &#091;autoprefixer]\n\n57:2    \u26a0  start value has mixed support, consider using flex-start instead &#091;autoprefixer]\n\n219:12  \u26a0  end value has mixed support, consider using flex-end instead &#091;autoprefixer]\n\n53:12   \u26a0  end value has mixed support, consider using flex-end instead &#091;autoprefixer]<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The workaround answer<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>PostCSS has a node API so I decided to try and use that. Here is what I came up with:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>\nconst autoprefixer = require('autoprefixer')\nconst postcss = require('postcss')\nconst fs = require('fs')\n\nfs.readFile(\"main.css\", (err, css) =&gt; {\n  postcss(&#091;autoprefixer])\n    .process(css, { from: 'main.scss', to: 'main-postcss.css' })\n    .then(result =&gt; {\n\u2003\u2003\u2003\u2003\u2003 console.log(\"Warnings: \",result.messages.length)\n      result.messages.forEach(message =&gt; console.log(message.toString()))\n      fs.writeFile('main-postcss.css', result.css, () =&gt; true)\n      if ( result.map ) {\n        fs.writeFile('main-postcss.css.map', result.map.toString(), () =&gt; true)\n      }\n    })\n});<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The key is the <code>message.toString()<\/code> function. For whatever reason the default reporting of PostCSS in the CLI (and webpack) doesn't seem to use the full output from that function. But it's designed to take any warning that is thrown by a plugin and display it in a useful form.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>autoprefixer: \/path\/to\/file\/_mixins.scss:58:2: start value has mixed support, consider using flex-start instead\n\nautoprefixer: \/path\/to\/file_mixins.scss:57:2: start value has mixed support, consider using flex-start instead\n\nautoprefixer: \/path\/to\/file\/_home.scss:219:12: end value has mixed support, consider using flex-end instead\n\nautoprefixer: \/path\/to\/file\/_checkout.scss:53:12: end value has mixed support, consider using flex-end instead\n\nautoprefixer: \/path\/to\/file\/_landing.scss:778:6: start value has mixed support, consider using flex-start instead<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Finally, now I can finish this PR!<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Ran into this issue yesterday. Working with a webpack config I updated from node-sass to sass (dart sass) and started getting new warnings from autoprefixer. Not wanting to clutter up the build screen I thought I'd just fix some of those errors. But to my dismay all I got was a line number and no source file. How am I supposed to find that!?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>First I tried running everything from the command line to bypass webpack altogether.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>npx sass main.scss main.css\nnpx postcss main.css main-postcss.css<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The warnings were a little cleaner, but still not helpful. Line 58 of what!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>58:2    \u26a0  start value has mixed support, consider using flex-start instead &#091;autoprefixer]\n\n57:2    \u26a0  start value has mixed support, consider using flex-start instead &#091;autoprefixer]\n\n219:12  \u26a0  end value has mixed support, consider using flex-end instead &#091;autoprefixer]\n\n53:12   \u26a0  end value has mixed support, consider using flex-end instead &#091;autoprefixer]<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The workaround answer<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>PostCSS has a node API so I decided to try and use that. Here is what I came up with:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>\nconst autoprefixer = require('autoprefixer')\nconst postcss = require('postcss')\nconst fs = require('fs')\n\nfs.readFile(\"main.css\", (err, css) =&gt; {\n  postcss(&#091;autoprefixer])\n    .process(css, { from: 'main.scss', to: 'main-postcss.css' })\n    .then(result =&gt; {\n\u2003\u2003\u2003\u2003\u2003 console.log(\"Warnings: \",result.messages.length)\n      result.messages.forEach(message =&gt; console.log(message.toString()))\n      fs.writeFile('main-postcss.css', result.css, () =&gt; true)\n      if ( result.map ) {\n        fs.writeFile('main-postcss.css.map', result.map.toString(), () =&gt; true)\n      }\n    })\n});<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The key is the <code>message.toString()<\/code> function. For whatever reason the default reporting of PostCSS in the CLI (and webpack) doesn't seem to use the full output from that function. But it's designed to take any warning that is thrown by a plugin and display it in a useful form.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>autoprefixer: \/path\/to\/file\/_mixins.scss:58:2: start value has mixed support, consider using flex-start instead\n\nautoprefixer: \/path\/to\/file_mixins.scss:57:2: start value has mixed support, consider using flex-start instead\n\nautoprefixer: \/path\/to\/file\/_home.scss:219:12: end value has mixed support, consider using flex-end instead\n\nautoprefixer: \/path\/to\/file\/_checkout.scss:53:12: end value has mixed support, consider using flex-end instead\n\nautoprefixer: \/path\/to\/file\/_landing.scss:778:6: start value has mixed support, consider using flex-start instead<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Finally, now I can finish this PR!<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Ran into this issue yesterday. Working with a webpack config I updated from node-sass to sass (dart sass) and started getting new warnings from autoprefixer. Not wanting to clutter up the build screen I thought I&#8217;d just fix some of those errors. But to my dismay all I got was a line number and no source file. How am I supposed to find that!?<\/p>\n\n\n\n<p>First I tried running everything from the command line to bypass webpack altogether.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>npx sass main.scss main.css\nnpx postcss main.css main-postcss.css<\/code><\/pre>\n\n\n\n<p>The warnings were a little cleaner, but still not helpful. Line 58 of what!<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>58:2    \u26a0  start value has mixed support, consider using flex-start instead &#091;autoprefixer]\n\n57:2    \u26a0  start value has mixed support, consider using flex-start instead &#091;autoprefixer]\n\n219:12  \u26a0  end value has mixed support, consider using flex-end instead &#091;autoprefixer]\n\n53:12   \u26a0  end value has mixed support, consider using flex-end instead &#091;autoprefixer]<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">The workaround answer<\/h2>\n\n\n\n<p>PostCSS has a node API so I decided to try and use that. Here is what I came up with:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>\nconst autoprefixer = require('autoprefixer')\nconst postcss = require('postcss')\nconst fs = require('fs')\n\nfs.readFile(\"main.css\", (err, css) =&gt; {\n  postcss(&#091;autoprefixer])\n    .process(css, { from: 'main.scss', to: 'main-postcss.css' })\n    .then(result =&gt; {\n\u2003\u2003\u2003\u2003\u2003 console.log(\"Warnings: \",result.messages.length)\n      result.messages.forEach(message =&gt; console.log(message.toString()))\n      fs.writeFile('main-postcss.css', result.css, () =&gt; true)\n      if ( result.map ) {\n        fs.writeFile('main-postcss.css.map', result.map.toString(), () =&gt; true)\n      }\n    })\n});<\/code><\/pre>\n\n\n\n<p>The key is the <code>message.toString()<\/code> function. For whatever reason the default reporting of PostCSS in the CLI (and webpack) doesn&#8217;t seem to use the full output from that function. But it&#8217;s designed to take any warning that is thrown by a plugin and display it in a useful form.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>autoprefixer: \/path\/to\/file\/_mixins.scss:58:2: start value has mixed support, consider using flex-start instead\n\nautoprefixer: \/path\/to\/file_mixins.scss:57:2: start value has mixed support, consider using flex-start instead\n\nautoprefixer: \/path\/to\/file\/_home.scss:219:12: end value has mixed support, consider using flex-end instead\n\nautoprefixer: \/path\/to\/file\/_checkout.scss:53:12: end value has mixed support, consider using flex-end instead\n\nautoprefixer: \/path\/to\/file\/_landing.scss:778:6: start value has mixed support, consider using flex-start instead<\/code><\/pre>\n\n\n\n<p>Finally, now I can finish this PR!<\/p>\n",
        "date": "2023-12-21 09:06:25",
        "slug": "postcss-and-autoprefixer-not-show-source-file-for-warnings",
        "excerpt": "Ran into this issue yesterday. Working with a webpack config I updated from node-sass to sass (dart sass) and started getting new warnings from autoprefixer. Not wanting to clutter up the build screen I thought I&#8217;d just fix some of those errors. But to my dismay all I got was a line number and no [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 519,
        "title": "How to automatically enqueue JavaScript and CSS from webpack",
        "content": "<!-- wp:paragraph -->\n<p>This odyssey started when I needed to get React working with an existing WordPress site. The site had a webpack build but when I tried to add a mini-React app it just wouldn't work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I did a little sleuthing and found that React just never ended up being enqueued with WordPress so of course it wouldn't render.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How do I enqueue files I don't know what they're called?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I dug a little deeper to find that the current way that JavaScript and CSS from the webpack build was being enqueued with WordPress was using a plugin called <a href=\"https:\/\/github.com\/j-arens\/wordpress-enqueue-chunks-webpack-plugin\">wordpress-enqueue-chunks-webpack-plugin<\/a>. It would essentially create a manifest file that had all the resulting bundled JavaScript and CSS files and their relationships. This was then embedded directly in a PHP file that was dynamically generated which you would include in your functions.php. Kind of ingenious really.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But in our case the plugin had be modified for reasons that were before my time and the plugin hasn't been updated in almost 5 years. Time for a change.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Embracing the Manifest File Concept<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I really like this idea of a manifest file that listed all the resulting JavaScript and CSS files and their relationships. Once we had something like that it would be fairly easy to whip up a script to determine what should be enqueued for any particular WordPress template or page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Did a little research and ran into this plugin that is actually mentioned on the <a href=\"https:\/\/webpack.js.org\/guides\/output-management\/#the-manifest\">official webpack<\/a> site. <a href=\"https:\/\/www.npmjs.com\/package\/webpack-manifest-plugin\">webpack-manifest-plugin<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This plugin gives us the power to output a manifest file that will give the output filenames, including hashes if relevant, as well as their dependencies. This is great! <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The manifest plan<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The goal is to have each webpack entrypoint correspond with something in WordPress. It might be a template, a page, whatever. But someway we can just enqueue based on that entrypoint and have all the resulting dependence JavaScript and CSS files be automatically enqueued.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Doing it this way means we can take advantage of all of the advanced code-splitting that webpack offers without having to manage it ourself.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Webpack config entry points<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We start with the webpack config entry points. For our example I'm just going to list 2 entry points for simplicity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>{\n  main: \".\/src\/main.js\",\n  home: \".\/src\/home.js\"\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">SplitChunks<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we configure the splitChunks so that the resulting bundles will be broken up in an efficient way to speed loading in the browser. That means for each entry point we could end up with 2, 5, 10 or who knows how many chunks based on what the content is. The two entry points may even share chunks. The beauty splitChunks is we don't have to care how it does it, we'll get all the dependent files in the manifest.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>splitChunks: {\n    chunks: 'all'\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>There is a whole lot of customization we could get into, but that's not the focus of this blog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">WebpackManifestPlugin<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we need to configure the manifest plugin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>new WebpackManifestPlugin({\n  generate: (seed, files, entries) =&gt; {\n    return generateManifest(entries, \"dist\");\n  },\n})<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This is where my knowledge starts to grow thin a little. We're using the generate function of the WebpackManifestPlugin because the default manifest output file doesn't break the files up by entry point.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">WebpackManifestPlugin generate function<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With the generate function we get <code>entries<\/code> which basically is what we're looking for, each final output file grouped by entry point. However, we want to still modify this slightly. That is where the <code>generateManifest<\/code> function comes in. I broke it out into a separate function for clarity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is the <code>generateManifest<\/code> function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>\/**\n * Make sure all output files have a hash otherwise this will break\n *\/\nfunction generateManifest(entrypoints, basePath) {\n  \/\/ reduce allows us to take the existing entrypoints and modify it\n  const newEntrypoints = Object.entries(entrypoints).reduce((acc, [entry, files]) =&gt; {\n  \n    \/\/ make sure this entry point has been added to object\n    if (!(entry in acc)) {\n      acc[entry] = [];\n    }\n  \n    \/**\n     * map over the filename to break it up into more detailed information\n     * \n     * filename: the full filename with basePath\n     * name: handle based on the entrypoint name\n     * hash: content based hash\n     * extension: to identify type of file\n     * \n     * *\/\n    acc[entry] = files.map((file) =&gt; {\n      \/\/ Use regex.exec to capture the different parts of filename\n      const regex =\n        \/^(?[^-]+(?:-[^-]+)*)-(?\\w+)\\.(?\\w+)$\/;\n      const filenameParts = regex.exec(file).groups;\n  \n      return {filename: [basePath, file].join(\"\/\"), ...filenameParts};\n    });\n  \n    return acc;\n  }, {});\n\n  return newEntrypoints;\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It has to make an assumption about the file output having a hash. I spent a huge amount of time, mostly with ChatGPT trying to perfect that regex to give me the different parts of the filename but couldn't quite perfect it both having and not having the hash. So for now the hash has to be there.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We also might be able to loop through the files that the generate function gives us, but I couldn't quite make sense of it. As well, the <code>entries<\/code> were so close to what I needed I decided to just use that.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All that aside, let me go through this function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reformatting the manifest file for WordPress<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We're breaking out the filename into different parts, mainly so we can distinguish the name of the script that we'll use to alias it in WordPress, and the type of the file, so we can use either <code>wp_register_style<\/code> or <code>wp_register_script<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The resulting manifest file will be written and look something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>{\n  \"main\": &#091;\n    {\n      \"filename\": \"build\/main-9255f05c9fb450911385.css\",\n      \"name\": \"main\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"css\"\n    },\n    {\n      \"filename\": \"build\/main-9255f05c9fb450911385.js\",\n      \"name\": \"main\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"js\"\n    }\n  ],\n  \"home\": &#091;\n    {\n      \"filename\": \"build\/home-9255f05c9fb450911385.css\",\n      \"name\": \"home\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"css\"\n    },\n    {\n      \"filename\": \"build\/home-9255f05c9fb450911385.js\",\n      \"name\": \"home\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"js\"\n    }\n  ]\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I think I'll leave it at that for today. I'll write another blog that will cover how to take this file in WordPress and use it to register and enqueue only the JavaScript and CSS you need for any given situation.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This odyssey started when I needed to get React working with an existing WordPress site. The site had a webpack build but when I tried to add a mini-React app it just wouldn't work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I did a little sleuthing and found that React just never ended up being enqueued with WordPress so of course it wouldn't render.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">How do I enqueue files I don't know what they're called?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I dug a little deeper to find that the current way that JavaScript and CSS from the webpack build was being enqueued with WordPress was using a plugin called <a href=\"https:\/\/github.com\/j-arens\/wordpress-enqueue-chunks-webpack-plugin\">wordpress-enqueue-chunks-webpack-plugin<\/a>. It would essentially create a manifest file that had all the resulting bundled JavaScript and CSS files and their relationships. This was then embedded directly in a PHP file that was dynamically generated which you would include in your functions.php. Kind of ingenious really.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>But in our case the plugin had be modified for reasons that were before my time and the plugin hasn't been updated in almost 5 years. Time for a change.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Embracing the Manifest File Concept<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I really like this idea of a manifest file that listed all the resulting JavaScript and CSS files and their relationships. Once we had something like that it would be fairly easy to whip up a script to determine what should be enqueued for any particular WordPress template or page.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Did a little research and ran into this plugin that is actually mentioned on the <a href=\"https:\/\/webpack.js.org\/guides\/output-management\/#the-manifest\">official webpack<\/a> site. <a href=\"https:\/\/www.npmjs.com\/package\/webpack-manifest-plugin\">webpack-manifest-plugin<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This plugin gives us the power to output a manifest file that will give the output filenames, including hashes if relevant, as well as their dependencies. This is great! <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The manifest plan<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The goal is to have each webpack entrypoint correspond with something in WordPress. It might be a template, a page, whatever. But someway we can just enqueue based on that entrypoint and have all the resulting dependence JavaScript and CSS files be automatically enqueued.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Doing it this way means we can take advantage of all of the advanced code-splitting that webpack offers without having to manage it ourself.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Webpack config entry points<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We start with the webpack config entry points. For our example I'm just going to list 2 entry points for simplicity.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>{\n  main: \".\/src\/main.js\",\n  home: \".\/src\/home.js\"\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">SplitChunks<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we configure the splitChunks so that the resulting bundles will be broken up in an efficient way to speed loading in the browser. That means for each entry point we could end up with 2, 5, 10 or who knows how many chunks based on what the content is. The two entry points may even share chunks. The beauty splitChunks is we don't have to care how it does it, we'll get all the dependent files in the manifest.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>splitChunks: {\n    chunks: 'all'\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>There is a whole lot of customization we could get into, but that's not the focus of this blog.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">WebpackManifestPlugin<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we need to configure the manifest plugin.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>new WebpackManifestPlugin({\n  generate: (seed, files, entries) =&gt; {\n    return generateManifest(entries, \"dist\");\n  },\n})<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is where my knowledge starts to grow thin a little. We're using the generate function of the WebpackManifestPlugin because the default manifest output file doesn't break the files up by entry point.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">WebpackManifestPlugin generate function<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>With the generate function we get <code>entries<\/code> which basically is what we're looking for, each final output file grouped by entry point. However, we want to still modify this slightly. That is where the <code>generateManifest<\/code> function comes in. I broke it out into a separate function for clarity.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here is the <code>generateManifest<\/code> function.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>\/**\n * Make sure all output files have a hash otherwise this will break\n *\/\nfunction generateManifest(entrypoints, basePath) {\n  \/\/ reduce allows us to take the existing entrypoints and modify it\n  const newEntrypoints = Object.entries(entrypoints).reduce((acc, [entry, files]) =&gt; {\n  \n    \/\/ make sure this entry point has been added to object\n    if (!(entry in acc)) {\n      acc[entry] = [];\n    }\n  \n    \/**\n     * map over the filename to break it up into more detailed information\n     * \n     * filename: the full filename with basePath\n     * name: handle based on the entrypoint name\n     * hash: content based hash\n     * extension: to identify type of file\n     * \n     * *\/\n    acc[entry] = files.map((file) =&gt; {\n      \/\/ Use regex.exec to capture the different parts of filename\n      const regex =\n        \/^(?[^-]+(?:-[^-]+)*)-(?\\w+)\\.(?\\w+)$\/;\n      const filenameParts = regex.exec(file).groups;\n  \n      return {filename: [basePath, file].join(\"\/\"), ...filenameParts};\n    });\n  \n    return acc;\n  }, {});\n\n  return newEntrypoints;\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It has to make an assumption about the file output having a hash. I spent a huge amount of time, mostly with ChatGPT trying to perfect that regex to give me the different parts of the filename but couldn't quite perfect it both having and not having the hash. So for now the hash has to be there.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We also might be able to loop through the files that the generate function gives us, but I couldn't quite make sense of it. As well, the <code>entries<\/code> were so close to what I needed I decided to just use that.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>All that aside, let me go through this function.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Reformatting the manifest file for WordPress<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We're breaking out the filename into different parts, mainly so we can distinguish the name of the script that we'll use to alias it in WordPress, and the type of the file, so we can use either <code>wp_register_style<\/code> or <code>wp_register_script<\/code>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The resulting manifest file will be written and look something like this:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>{\n  \"main\": &#091;\n    {\n      \"filename\": \"build\/main-9255f05c9fb450911385.css\",\n      \"name\": \"main\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"css\"\n    },\n    {\n      \"filename\": \"build\/main-9255f05c9fb450911385.js\",\n      \"name\": \"main\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"js\"\n    }\n  ],\n  \"home\": &#091;\n    {\n      \"filename\": \"build\/home-9255f05c9fb450911385.css\",\n      \"name\": \"home\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"css\"\n    },\n    {\n      \"filename\": \"build\/home-9255f05c9fb450911385.js\",\n      \"name\": \"home\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"js\"\n    }\n  ]\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I think I'll leave it at that for today. I'll write another blog that will cover how to take this file in WordPress and use it to register and enqueue only the JavaScript and CSS you need for any given situation.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>This odyssey started when I needed to get React working with an existing WordPress site. The site had a webpack build but when I tried to add a mini-React app it just wouldn&#8217;t work.<\/p>\n\n\n\n<p>I did a little sleuthing and found that React just never ended up being enqueued with WordPress so of course it wouldn&#8217;t render.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">How do I enqueue files I don&#8217;t know what they&#8217;re called?<\/h2>\n\n\n\n<p>I dug a little deeper to find that the current way that JavaScript and CSS from the webpack build was being enqueued with WordPress was using a plugin called <a href=\"https:\/\/github.com\/j-arens\/wordpress-enqueue-chunks-webpack-plugin\">wordpress-enqueue-chunks-webpack-plugin<\/a>. It would essentially create a manifest file that had all the resulting bundled JavaScript and CSS files and their relationships. This was then embedded directly in a PHP file that was dynamically generated which you would include in your functions.php. Kind of ingenious really.<\/p>\n\n\n\n<p>But in our case the plugin had be modified for reasons that were before my time and the plugin hasn&#8217;t been updated in almost 5 years. Time for a change.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Embracing the Manifest File Concept<\/h2>\n\n\n\n<p>I really like this idea of a manifest file that listed all the resulting JavaScript and CSS files and their relationships. Once we had something like that it would be fairly easy to whip up a script to determine what should be enqueued for any particular WordPress template or page.<\/p>\n\n\n\n<p>Did a little research and ran into this plugin that is actually mentioned on the <a href=\"https:\/\/webpack.js.org\/guides\/output-management\/#the-manifest\">official webpack<\/a> site. <a href=\"https:\/\/www.npmjs.com\/package\/webpack-manifest-plugin\">webpack-manifest-plugin<\/a><\/p>\n\n\n\n<p>This plugin gives us the power to output a manifest file that will give the output filenames, including hashes if relevant, as well as their dependencies. This is great! <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The manifest plan<\/h2>\n\n\n\n<p>The goal is to have each webpack entrypoint correspond with something in WordPress. It might be a template, a page, whatever. But someway we can just enqueue based on that entrypoint and have all the resulting dependence JavaScript and CSS files be automatically enqueued.<\/p>\n\n\n\n<p>Doing it this way means we can take advantage of all of the advanced code-splitting that webpack offers without having to manage it ourself.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Webpack config entry points<\/h3>\n\n\n\n<p>We start with the webpack config entry points. For our example I&#8217;m just going to list 2 entry points for simplicity.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>{\n  main: \".\/src\/main.js\",\n  home: \".\/src\/home.js\"\n}<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">SplitChunks<\/h3>\n\n\n\n<p>Now we configure the splitChunks so that the resulting bundles will be broken up in an efficient way to speed loading in the browser. That means for each entry point we could end up with 2, 5, 10 or who knows how many chunks based on what the content is. The two entry points may even share chunks. The beauty splitChunks is we don&#8217;t have to care how it does it, we&#8217;ll get all the dependent files in the manifest.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>splitChunks: {\n    chunks: 'all'\n}<\/code><\/pre>\n\n\n\n<p>There is a whole lot of customization we could get into, but that&#8217;s not the focus of this blog.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">WebpackManifestPlugin<\/h3>\n\n\n\n<p>Now we need to configure the manifest plugin.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>new WebpackManifestPlugin({\n  generate: (seed, files, entries) =&gt; {\n    return generateManifest(entries, \"dist\");\n  },\n})<\/code><\/pre>\n\n\n\n<p>This is where my knowledge starts to grow thin a little. We&#8217;re using the generate function of the WebpackManifestPlugin because the default manifest output file doesn&#8217;t break the files up by entry point.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">WebpackManifestPlugin generate function<\/h3>\n\n\n\n<p>With the generate function we get <code>entries<\/code> which basically is what we&#8217;re looking for, each final output file grouped by entry point. However, we want to still modify this slightly. That is where the <code>generateManifest<\/code> function comes in. I broke it out into a separate function for clarity.<\/p>\n\n\n\n<p>Here is the <code>generateManifest<\/code> function.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>\/**\n * Make sure all output files have a hash otherwise this will break\n *\/\nfunction generateManifest(entrypoints, basePath) {\n  \/\/ reduce allows us to take the existing entrypoints and modify it\n  const newEntrypoints = Object.entries(entrypoints).reduce((acc, [entry, files]) =&gt; {\n  \n    \/\/ make sure this entry point has been added to object\n    if (!(entry in acc)) {\n      acc[entry] = [];\n    }\n  \n    \/**\n     * map over the filename to break it up into more detailed information\n     * \n     * filename: the full filename with basePath\n     * name: handle based on the entrypoint name\n     * hash: content based hash\n     * extension: to identify type of file\n     * \n     * *\/\n    acc[entry] = files.map((file) =&gt; {\n      \/\/ Use regex.exec to capture the different parts of filename\n      const regex =\n        \/^(?[^-]+(?:-[^-]+)*)-(?\\w+)\\.(?\\w+)$\/;\n      const filenameParts = regex.exec(file).groups;\n  \n      return {filename: [basePath, file].join(\"\/\"), ...filenameParts};\n    });\n  \n    return acc;\n  }, {});\n\n  return newEntrypoints;\n}<\/code><\/pre>\n\n\n\n<p>It has to make an assumption about the file output having a hash. I spent a huge amount of time, mostly with ChatGPT trying to perfect that regex to give me the different parts of the filename but couldn&#8217;t quite perfect it both having and not having the hash. So for now the hash has to be there.<\/p>\n\n\n\n<p>We also might be able to loop through the files that the generate function gives us, but I couldn&#8217;t quite make sense of it. As well, the <code>entries<\/code> were so close to what I needed I decided to just use that.<\/p>\n\n\n\n<p>All that aside, let me go through this function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Reformatting the manifest file for WordPress<\/h2>\n\n\n\n<p>We&#8217;re breaking out the filename into different parts, mainly so we can distinguish the name of the script that we&#8217;ll use to alias it in WordPress, and the type of the file, so we can use either <code>wp_register_style<\/code> or <code>wp_register_script<\/code>.<\/p>\n\n\n\n<p>The resulting manifest file will be written and look something like this:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>{\n  \"main\": &#091;\n    {\n      \"filename\": \"build\/main-9255f05c9fb450911385.css\",\n      \"name\": \"main\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"css\"\n    },\n    {\n      \"filename\": \"build\/main-9255f05c9fb450911385.js\",\n      \"name\": \"main\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"js\"\n    }\n  ],\n  \"home\": &#091;\n    {\n      \"filename\": \"build\/home-9255f05c9fb450911385.css\",\n      \"name\": \"home\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"css\"\n    },\n    {\n      \"filename\": \"build\/home-9255f05c9fb450911385.js\",\n      \"name\": \"home\",\n      \"hash\": \"9255f05c9fb450911385\",\n      \"extension\": \"js\"\n    }\n  ]\n}<\/code><\/pre>\n\n\n\n<p>I think I&#8217;ll leave it at that for today. I&#8217;ll write another blog that will cover how to take this file in WordPress and use it to register and enqueue only the JavaScript and CSS you need for any given situation.<\/p>\n",
        "date": "2023-12-14 21:49:37",
        "slug": "how-to-automatically-enqueue-javascript-and-css-from-webpack",
        "excerpt": "This odyssey started when I needed to get React working with an existing WordPress site. The site had a webpack build but when I tried to add a mini-React app it just wouldn&#8217;t work. I did a little sleuthing and found that React just never ended up being enqueued with WordPress so of course it [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 520,
        "title": "NextJS next\/dynamic import still somehow  using require?",
        "content": "<!-- wp:paragraph -->\n<p>Ran into an odd issue when trying to dynamically import our custom component library using the NextJS <code>dynamic<\/code> function. Here is a simplified version of what I was trying to do.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>const DynamicButton = dynamic(() =&gt;\n  import(\"my-component-library\").then((mod) =&gt; mod.Button)\n);<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pretty much right out of the NextJS docs. Running <code>npm run dev<\/code> and everything seems to work fine.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Module not found? huh?!<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The issue arises when you try to build. Running <code>npm run build<\/code> yields the following error.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Module not found: Package path . is not exported from package \/Users\/fakeuser\/Sites\/nextjs\/node_modules\/my-component-library\n(see exports field in \/Users\/fakeuser\/Sites\/nextjs\/node_modules\/my-component-library\/package.json)<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Ok...that doesn't make any sense. Taking a look at that very package.json in the node_modules folder and I find this in the exports field:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>\"exports\": {\n\u2003 \".\": {\n\u2003\u2003\u2003 \"import\": \".\/dist\/index.es.js\",\n    \"types\": \".\/dist\/index.d.ts\"\n  }\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Pretty much looks like it exports <code>.<\/code> to me. What is going on here?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Why are you looking for require?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Just for the sake of not knowing what else to try, I added the <em>require<\/em> condition to the exports field that is supposed to only be used with CommonJS. In this case I didn't have a CommonJS version of my module so I just slapped in the same ES module file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>\"exports\": {\n    \".\": {\n      \"import\": \".\/dist\/index.es.js\",\n\u2003\u2003\u2003\u2003\u2003 \"require\": \".\/dist\/index.es.js\",\n      \"types\": \".\/dist\/index.d.ts\"\n    }\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And what do you know, that worked!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Is next\/dynamic secretly still using require under the hood?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>But what does that mean? Does it mean that under the hood the <code>dynamic<\/code> function of NextJS is dynamically importing a module using CommonJS even when the entire project I'm working on is ES modules?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I looked through the code of that next\/dynamic function and didn't see anything obvious. It's basically just using the import function that I pass it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The only thing I could possible think of is that somehow in the webpack transformations it's turning my import function into something else. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whatever the reason at this point, for now the fix was adding the require condition to the export map in package.json. Hopefully in the future as NextJS moves closer to all ESM we won't need to do this, as I'm just waiting for the weird bugs that are going to come out of this. But for now it's really all I can do save not using dynamic imports.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">React.lazy with Suspense<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Well I guess there is one thing. It did seem to work when I tried the native React.lazy and Suspense method to which <code>dynamic<\/code> is just a wrapper for anyway. I guess I could just do that. But that <code>dynamic<\/code> function is just so nice...<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ChatGPT suggested titles<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I just had to share this because I'm still playing with how I can use AI in my blog writing process. I first gave it this blog article and then asked it to give me a title that would really make people want to click on it. I couldn't quite pick one of these cause I just don't roll that way, but I thought the titles were entertaining nonetheless.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For your enjoyment:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>\"Unraveling the Mystery: NextJS Dynamic Imports, CommonJS Quirks, and the Fix That Saved My Build\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>\"NextJS Dynamic Imports Dilemma: Cracking the Code, CommonJS Conundrums, and the Genius Fix You Didn't See Coming!\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>\"\ud83d\ude80 NEXTJS SHOCKER! Dynamic Imports Gone Haywire? Uncover the Jaw-Dropping CommonJS Secret That Rescued My Build! \ud83d\udd25\"<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>\"Unlocking the NextJS Enigma: Is Dynamic Import Secretly Clinging to 'require'? Demystifying the ES Module Puzzle!\"<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Ran into an odd issue when trying to dynamically import our custom component library using the NextJS <code>dynamic<\/code> function. Here is a simplified version of what I was trying to do.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>const DynamicButton = dynamic(() =&gt;\n  import(\"my-component-library\").then((mod) =&gt; mod.Button)\n);<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Pretty much right out of the NextJS docs. Running <code>npm run dev<\/code> and everything seems to work fine.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Module not found? huh?!<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The issue arises when you try to build. Running <code>npm run build<\/code> yields the following error.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>Module not found: Package path . is not exported from package \/Users\/fakeuser\/Sites\/nextjs\/node_modules\/my-component-library\n(see exports field in \/Users\/fakeuser\/Sites\/nextjs\/node_modules\/my-component-library\/package.json)<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Ok...that doesn't make any sense. Taking a look at that very package.json in the node_modules folder and I find this in the exports field:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>\"exports\": {\n\u2003 \".\": {\n\u2003\u2003\u2003 \"import\": \".\/dist\/index.es.js\",\n    \"types\": \".\/dist\/index.d.ts\"\n  }\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Pretty much looks like it exports <code>.<\/code> to me. What is going on here?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Why are you looking for require?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Just for the sake of not knowing what else to try, I added the <em>require<\/em> condition to the exports field that is supposed to only be used with CommonJS. In this case I didn't have a CommonJS version of my module so I just slapped in the same ES module file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>\"exports\": {\n    \".\": {\n      \"import\": \".\/dist\/index.es.js\",\n\u2003\u2003\u2003\u2003\u2003 \"require\": \".\/dist\/index.es.js\",\n      \"types\": \".\/dist\/index.d.ts\"\n    }\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>And what do you know, that worked!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Is next\/dynamic secretly still using require under the hood?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>But what does that mean? Does it mean that under the hood the <code>dynamic<\/code> function of NextJS is dynamically importing a module using CommonJS even when the entire project I'm working on is ES modules?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I looked through the code of that next\/dynamic function and didn't see anything obvious. It's basically just using the import function that I pass it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The only thing I could possible think of is that somehow in the webpack transformations it's turning my import function into something else. <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Whatever the reason at this point, for now the fix was adding the require condition to the export map in package.json. Hopefully in the future as NextJS moves closer to all ESM we won't need to do this, as I'm just waiting for the weird bugs that are going to come out of this. But for now it's really all I can do save not using dynamic imports.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">React.lazy with Suspense<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Well I guess there is one thing. It did seem to work when I tried the native React.lazy and Suspense method to which <code>dynamic<\/code> is just a wrapper for anyway. I guess I could just do that. But that <code>dynamic<\/code> function is just so nice...<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">ChatGPT suggested titles<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I just had to share this because I'm still playing with how I can use AI in my blog writing process. I first gave it this blog article and then asked it to give me a title that would really make people want to click on it. I couldn't quite pick one of these cause I just don't roll that way, but I thought the titles were entertaining nonetheless.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For your enjoyment:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>\"Unraveling the Mystery: NextJS Dynamic Imports, CommonJS Quirks, and the Fix That Saved My Build\"<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>\"NextJS Dynamic Imports Dilemma: Cracking the Code, CommonJS Conundrums, and the Genius Fix You Didn't See Coming!\"<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>\"\ud83d\ude80 NEXTJS SHOCKER! Dynamic Imports Gone Haywire? Uncover the Jaw-Dropping CommonJS Secret That Rescued My Build! \ud83d\udd25\"<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>\"Unlocking the NextJS Enigma: Is Dynamic Import Secretly Clinging to 'require'? Demystifying the ES Module Puzzle!\"<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n\n\n<\/ul>\n"
            }
        ],
        "rendered_content": "\n<p>Ran into an odd issue when trying to dynamically import our custom component library using the NextJS <code>dynamic<\/code> function. Here is a simplified version of what I was trying to do.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>const DynamicButton = dynamic(() =&gt;\n  import(\"my-component-library\").then((mod) =&gt; mod.Button)\n);<\/code><\/pre>\n\n\n\n<p>Pretty much right out of the NextJS docs. Running <code>npm run dev<\/code> and everything seems to work fine.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Module not found? huh?!<\/h2>\n\n\n\n<p>The issue arises when you try to build. Running <code>npm run build<\/code> yields the following error.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Module not found: Package path . is not exported from package \/Users\/fakeuser\/Sites\/nextjs\/node_modules\/my-component-library\n(see exports field in \/Users\/fakeuser\/Sites\/nextjs\/node_modules\/my-component-library\/package.json)<\/code><\/pre>\n\n\n\n<p>Ok&#8230;that doesn&#8217;t make any sense. Taking a look at that very package.json in the node_modules folder and I find this in the exports field:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>\"exports\": {\n\u2003 \".\": {\n\u2003\u2003\u2003 \"import\": \".\/dist\/index.es.js\",\n    \"types\": \".\/dist\/index.d.ts\"\n  }\n}<\/code><\/pre>\n\n\n\n<p>Pretty much looks like it exports <code>.<\/code> to me. What is going on here?<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Why are you looking for require?<\/h2>\n\n\n\n<p>Just for the sake of not knowing what else to try, I added the <em>require<\/em> condition to the exports field that is supposed to only be used with CommonJS. In this case I didn&#8217;t have a CommonJS version of my module so I just slapped in the same ES module file.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>\"exports\": {\n    \".\": {\n      \"import\": \".\/dist\/index.es.js\",\n\u2003\u2003\u2003\u2003\u2003 \"require\": \".\/dist\/index.es.js\",\n      \"types\": \".\/dist\/index.d.ts\"\n    }\n}<\/code><\/pre>\n\n\n\n<p>And what do you know, that worked!<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Is next\/dynamic secretly still using require under the hood?<\/h2>\n\n\n\n<p>But what does that mean? Does it mean that under the hood the <code>dynamic<\/code> function of NextJS is dynamically importing a module using CommonJS even when the entire project I&#8217;m working on is ES modules?<\/p>\n\n\n\n<p>I looked through the code of that next\/dynamic function and didn&#8217;t see anything obvious. It&#8217;s basically just using the import function that I pass it.<\/p>\n\n\n\n<p>The only thing I could possible think of is that somehow in the webpack transformations it&#8217;s turning my import function into something else. <\/p>\n\n\n\n<p>Whatever the reason at this point, for now the fix was adding the require condition to the export map in package.json. Hopefully in the future as NextJS moves closer to all ESM we won&#8217;t need to do this, as I&#8217;m just waiting for the weird bugs that are going to come out of this. But for now it&#8217;s really all I can do save not using dynamic imports.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">React.lazy with Suspense<\/h2>\n\n\n\n<p>Well I guess there is one thing. It did seem to work when I tried the native React.lazy and Suspense method to which <code>dynamic<\/code> is just a wrapper for anyway. I guess I could just do that. But that <code>dynamic<\/code> function is just so nice&#8230;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">ChatGPT suggested titles<\/h2>\n\n\n\n<p>I just had to share this because I&#8217;m still playing with how I can use AI in my blog writing process. I first gave it this blog article and then asked it to give me a title that would really make people want to click on it. I couldn&#8217;t quite pick one of these cause I just don&#8217;t roll that way, but I thought the titles were entertaining nonetheless.<\/p>\n\n\n\n<p>For your enjoyment:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>&#8220;Unraveling the Mystery: NextJS Dynamic Imports, CommonJS Quirks, and the Fix That Saved My Build&#8221;<\/li>\n\n\n\n<li>&#8220;NextJS Dynamic Imports Dilemma: Cracking the Code, CommonJS Conundrums, and the Genius Fix You Didn&#8217;t See Coming!&#8221;<\/li>\n\n\n\n<li>&#8220;\ud83d\ude80 NEXTJS SHOCKER! Dynamic Imports Gone Haywire? Uncover the Jaw-Dropping CommonJS Secret That Rescued My Build! \ud83d\udd25&#8221;<\/li>\n\n\n\n<li>&#8220;Unlocking the NextJS Enigma: Is Dynamic Import Secretly Clinging to &#8216;require&#8217;? Demystifying the ES Module Puzzle!&#8221;<\/li>\n<\/ul>\n",
        "date": "2023-12-14 21:07:48",
        "slug": "nextjs-next-dynamic-import-still-somehow-using-require",
        "excerpt": "Ran into an odd issue when trying to dynamically import our custom component library using the NextJS dynamic function. Here is a simplified version of what I was trying to do. Pretty much right out of the NextJS docs. Running npm run dev and everything seems to work fine. Module not found? huh?! The issue [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 510,
        "title": "SWR and testing with Storybook interactions",
        "content": "<!-- wp:paragraph -->\n<p>We recently picked up <a href=\"https:\/\/swr.vercel.app\/\">SWR<\/a> in to help with our data fetching needs. So far it's been a great library and served our needs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, when it came to automated testing we were constantly getting failed tests in different contexts. Everything seemed to pass when I ran the Storybook locally in browser but when I sent it up to Chromatic, one of the tests would fail.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I decided to setup the <a href=\"https:\/\/storybook.js.org\/addons\/@storybook\/test-runner\">Storybook test runner<\/a> and ran that locally. The test that failed in Chromatic would pass but another one would fail. What!?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The issue was that SWR was being to good at it's job. It would cache results between stories so that our mocked data fetching using the <a href=\"https:\/\/storybook.js.org\/addons\/msw-storybook-addon\">msw Storybook addon<\/a> would return the wrong results.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The answer was to wrap each story that uses SWR with a custom <code>&lt;SWRConfig&gt;<\/code> component using Storybook's decorator functionality.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>decorators: &#091;\n    (Story) =&gt; (\n      &lt;SWRConfig value={{ dedupingInterval: 0, provider: () =&gt; new Map() }}&gt;\n        &lt;Story \/&gt;\n      &lt;\/SWRConfig&gt;\n    ),\n  ],<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now mocking data is far more predictable and our tests pass!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is the documentation from SWR's site - <a href=\"https:\/\/swr.vercel.app\/docs\/advanced\/cache.en-US#reset-cache-between-test-cases\">Reset Cache Between Test Cases<\/a><\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We recently picked up <a href=\"https:\/\/swr.vercel.app\/\">SWR<\/a> in to help with our data fetching needs. So far it's been a great library and served our needs.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>However, when it came to automated testing we were constantly getting failed tests in different contexts. Everything seemed to pass when I ran the Storybook locally in browser but when I sent it up to Chromatic, one of the tests would fail.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I decided to setup the <a href=\"https:\/\/storybook.js.org\/addons\/@storybook\/test-runner\">Storybook test runner<\/a> and ran that locally. The test that failed in Chromatic would pass but another one would fail. What!?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The issue was that SWR was being to good at it's job. It would cache results between stories so that our mocked data fetching using the <a href=\"https:\/\/storybook.js.org\/addons\/msw-storybook-addon\">msw Storybook addon<\/a> would return the wrong results.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The answer was to wrap each story that uses SWR with a custom <code>&lt;SWRConfig&gt;<\/code> component using Storybook's decorator functionality.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>decorators: &#091;\n    (Story) =&gt; (\n      &lt;SWRConfig value={{ dedupingInterval: 0, provider: () =&gt; new Map() }}&gt;\n        &lt;Story \/&gt;\n      &lt;\/SWRConfig&gt;\n    ),\n  ],<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now mocking data is far more predictable and our tests pass!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here is the documentation from SWR's site - <a href=\"https:\/\/swr.vercel.app\/docs\/advanced\/cache.en-US#reset-cache-between-test-cases\">Reset Cache Between Test Cases<\/a><\/p>\n"
            }
        ],
        "rendered_content": "\n<p>We recently picked up <a href=\"https:\/\/swr.vercel.app\/\">SWR<\/a> in to help with our data fetching needs. So far it&#8217;s been a great library and served our needs.<\/p>\n\n\n\n<p>However, when it came to automated testing we were constantly getting failed tests in different contexts. Everything seemed to pass when I ran the Storybook locally in browser but when I sent it up to Chromatic, one of the tests would fail.<\/p>\n\n\n\n<p>I decided to setup the <a href=\"https:\/\/storybook.js.org\/addons\/@storybook\/test-runner\">Storybook test runner<\/a> and ran that locally. The test that failed in Chromatic would pass but another one would fail. What!?<\/p>\n\n\n\n<p>The issue was that SWR was being to good at it&#8217;s job. It would cache results between stories so that our mocked data fetching using the <a href=\"https:\/\/storybook.js.org\/addons\/msw-storybook-addon\">msw Storybook addon<\/a> would return the wrong results.<\/p>\n\n\n\n<p>The answer was to wrap each story that uses SWR with a custom <code>&lt;SWRConfig&gt;<\/code> component using Storybook&#8217;s decorator functionality.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>decorators: &#091;\n    (Story) =&gt; (\n      &lt;SWRConfig value={{ dedupingInterval: 0, provider: () =&gt; new Map() }}&gt;\n        &lt;Story \/&gt;\n      &lt;\/SWRConfig&gt;\n    ),\n  ],<\/code><\/pre>\n\n\n\n<p>Now mocking data is far more predictable and our tests pass!<\/p>\n\n\n\n<p>Here is the documentation from SWR&#8217;s site &#8211; <a href=\"https:\/\/swr.vercel.app\/docs\/advanced\/cache.en-US#reset-cache-between-test-cases\">Reset Cache Between Test Cases<\/a><\/p>\n",
        "date": "2023-11-27 14:50:00",
        "slug": "swr-and-testing-with-storybook-interactions",
        "excerpt": "We recently picked up SWR in to help with our data fetching needs. So far it&#8217;s been a great library and served our needs. However, when it came to automated testing we were constantly getting failed tests in different contexts. Everything seemed to pass when I ran the Storybook locally in browser but when I [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 504,
        "title": "Externalize library bundle dependencies",
        "content": "<!-- wp:paragraph -->\n<p>This is a follow-up to my post <a href=\"https:\/\/jeremyrichardson.dev\/blog\/vite-rollup-preservemodules-for-libraries\">Vite\/Rollup preserveModules for\u00a0libraries<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my previous post I talked about how to rename the <code>node_modules<\/code> folder to <code>external<\/code> to avoid the special properties of a node_modules folder.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since that post I've found another way that actually makes a lot more sense.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Bundle or as dependency<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Previously I was taking everything in <code>node_modules<\/code> and including that in our bundle. However, after further thought, that doesn't really make sense. Why are we specifying dependencies, which will get installed with <code>npm i<\/code> and bundling them. That means they will end up being included twice in the project we use our library in.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead we want to externalize all our dependencies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>import packageJson from \".\/package.json\";\n\nconst config = defineConfig({\n  build: {\n    lib: {\n      entry: '.\/src\/index.ts',\n      formats: &#091;'es'],\n      fileName: (format, entryName) =&gt;\n        `${entryName.replace(\/node_modules\\\/\/g, 'external\/')}.${format}.js`,\n    },\n    rollupOptions: {\n      external: &#091;\n        ...Object.keys(packageJson.dependencies),\n        ...Object.keys(packageJson.peerDependencies),\n      ],\n    },\n  },\n});<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I'm still including the renaming of the <code>node_modules<\/code> folder as I found there were still a few cases where it bundled dependencies. It think it has to do with subpath imports (eg. `import myFunction from \"packagename\/myFunction\".<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But that will be a post for another time.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is a follow-up to my post <a href=\"https:\/\/jeremyrichardson.dev\/blog\/vite-rollup-preservemodules-for-libraries\">Vite\/Rollup preserveModules for\u00a0libraries<\/a>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In my previous post I talked about how to rename the <code>node_modules<\/code> folder to <code>external<\/code> to avoid the special properties of a node_modules folder.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Since that post I've found another way that actually makes a lot more sense.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Bundle or as dependency<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Previously I was taking everything in <code>node_modules<\/code> and including that in our bundle. However, after further thought, that doesn't really make sense. Why are we specifying dependencies, which will get installed with <code>npm i<\/code> and bundling them. That means they will end up being included twice in the project we use our library in.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Instead we want to externalize all our dependencies.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>import packageJson from \".\/package.json\";\n\nconst config = defineConfig({\n  build: {\n    lib: {\n      entry: '.\/src\/index.ts',\n      formats: &#091;'es'],\n      fileName: (format, entryName) =&gt;\n        `${entryName.replace(\/node_modules\\\/\/g, 'external\/')}.${format}.js`,\n    },\n    rollupOptions: {\n      external: &#091;\n        ...Object.keys(packageJson.dependencies),\n        ...Object.keys(packageJson.peerDependencies),\n      ],\n    },\n  },\n});<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I'm still including the renaming of the <code>node_modules<\/code> folder as I found there were still a few cases where it bundled dependencies. It think it has to do with subpath imports (eg. `import myFunction from \"packagename\/myFunction\".<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>But that will be a post for another time.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>This is a follow-up to my post <a href=\"https:\/\/jeremyrichardson.dev\/blog\/vite-rollup-preservemodules-for-libraries\">Vite\/Rollup preserveModules for\u00a0libraries<\/a>.<\/p>\n\n\n\n<p>In my previous post I talked about how to rename the <code>node_modules<\/code> folder to <code>external<\/code> to avoid the special properties of a node_modules folder.<\/p>\n\n\n\n<p>Since that post I&#8217;ve found another way that actually makes a lot more sense.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Bundle or as dependency<\/h2>\n\n\n\n<p>Previously I was taking everything in <code>node_modules<\/code> and including that in our bundle. However, after further thought, that doesn&#8217;t really make sense. Why are we specifying dependencies, which will get installed with <code>npm i<\/code> and bundling them. That means they will end up being included twice in the project we use our library in.<\/p>\n\n\n\n<p>Instead we want to externalize all our dependencies.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import packageJson from \".\/package.json\";\n\nconst config = defineConfig({\n  build: {\n    lib: {\n      entry: '.\/src\/index.ts',\n      formats: &#091;'es'],\n      fileName: (format, entryName) =&gt;\n        `${entryName.replace(\/node_modules\\\/\/g, 'external\/')}.${format}.js`,\n    },\n    rollupOptions: {\n      external: &#091;\n        ...Object.keys(packageJson.dependencies),\n        ...Object.keys(packageJson.peerDependencies),\n      ],\n    },\n  },\n});<\/code><\/pre>\n\n\n\n<p>I&#8217;m still including the renaming of the <code>node_modules<\/code> folder as I found there were still a few cases where it bundled dependencies. It think it has to do with subpath imports (eg. `import myFunction from &#8220;packagename\/myFunction&#8221;.<\/p>\n\n\n\n<p>But that will be a post for another time.<\/p>\n",
        "date": "2023-10-13 10:18:39",
        "slug": "externalize-library-bundle-dependencies",
        "excerpt": "This is a follow-up to my post Vite\/Rollup preserveModules for\u00a0libraries. In my previous post I talked about how to rename the node_modules folder to external to avoid the special properties of a node_modules folder. Since that post I&#8217;ve found another way that actually makes a lot more sense. Bundle or as dependency Previously I was [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 493,
        "title": "Vite\/Rollup preserveModules for libraries",
        "content": "<!-- wp:paragraph -->\n<p>One of the keys when building a JavaScript library is ensuring that it can accommodate tree shaking. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my cursory knowledge of tree shaking, it seems it can occur in 2 major ways<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Based on modules used - all unused modules are trimmed away<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Based on module exports - this can trim named exports that are not used in a module<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>The first option, where entire modules are trimmed seems to be an easier process for webpack and other bundlers to accomplish. It gets trickier when having to determine the specific exports in a file that are used or not. This gets even more complicated when dealing with barrel files.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you want to deep dive deeper into the subject, the idea of side effects is the key concept to look at and how webpack and other bundlers determine if there are side effects. The main idea is that is there is a side effect (eg. a global of some kind) then the bundler can't trim anything out because it doesn't know if it's used or not.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">preserveModules<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The output.preserveModules option in Rollup (and by extension Vite) allows you to keep the module structure so that bundlers have an easier time determining what can be tree shaken away. But there is one major caveat that the Rollup docs don't cover (and I think they should). <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Where you use preserveModules it keeps the exact directory structure of your source files. This includes the node_modules directory. All bundled dependencies from the node_modules folder will end up in the dist folder inside a node_modules folder.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>\/dist\/node_modules\/bundled_dep\/index.js<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>At first glance this doesn't seem like an issues. But node treats the node_modules folder in a unique way, which can lead to confusing bugs. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The solution is to rename the node_modules folder when bundling. We can do this with the <code>build.lib.fileName<\/code> option in Vite.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>const config = defineConfig({\n  build: {\n    lib: {\n      entry: '.\/src\/index.ts',\n      formats: &#091;'es'],\n      fileName: (format, entryName) =&gt;\n        `${entryName.replace(\/node_modules\\\/\/g, 'external\/')}.${format}.js`,\n    },\n      output: {\n        preserveModules: true,\n        preserveModulesRoot: 'src',\n      },\n    },\n  },\n});<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>All we're doing is running a find and replace on the filename of the bundled file to replace <code>node_modules<\/code> with <code>external<\/code>. That way Node doesn't treat the dependencies different than a normal JavaScript file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Remember to use the global option in your regex for find and replace because you can actually have multiple <code>node_modules<\/code> folder nested.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Good luck!<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One of the keys when building a JavaScript library is ensuring that it can accommodate tree shaking. <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In my cursory knowledge of tree shaking, it seems it can occur in 2 major ways<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Based on modules used - all unused modules are trimmed away<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Based on module exports - this can trim named exports that are not used in a module<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The first option, where entire modules are trimmed seems to be an easier process for webpack and other bundlers to accomplish. It gets trickier when having to determine the specific exports in a file that are used or not. This gets even more complicated when dealing with barrel files.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you want to deep dive deeper into the subject, the idea of side effects is the key concept to look at and how webpack and other bundlers determine if there are side effects. The main idea is that is there is a side effect (eg. a global of some kind) then the bundler can't trim anything out because it doesn't know if it's used or not.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">preserveModules<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The output.preserveModules option in Rollup (and by extension Vite) allows you to keep the module structure so that bundlers have an easier time determining what can be tree shaken away. But there is one major caveat that the Rollup docs don't cover (and I think they should). <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Where you use preserveModules it keeps the exact directory structure of your source files. This includes the node_modules directory. All bundled dependencies from the node_modules folder will end up in the dist folder inside a node_modules folder.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>\/dist\/node_modules\/bundled_dep\/index.js<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>At first glance this doesn't seem like an issues. But node treats the node_modules folder in a unique way, which can lead to confusing bugs. <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The solution is to rename the node_modules folder when bundling. We can do this with the <code>build.lib.fileName<\/code> option in Vite.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>const config = defineConfig({\n  build: {\n    lib: {\n      entry: '.\/src\/index.ts',\n      formats: &#091;'es'],\n      fileName: (format, entryName) =&gt;\n        `${entryName.replace(\/node_modules\\\/\/g, 'external\/')}.${format}.js`,\n    },\n      output: {\n        preserveModules: true,\n        preserveModulesRoot: 'src',\n      },\n    },\n  },\n});<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>All we're doing is running a find and replace on the filename of the bundled file to replace <code>node_modules<\/code> with <code>external<\/code>. That way Node doesn't treat the dependencies different than a normal JavaScript file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Remember to use the global option in your regex for find and replace because you can actually have multiple <code>node_modules<\/code> folder nested.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Good luck!<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>One of the keys when building a JavaScript library is ensuring that it can accommodate tree shaking. <\/p>\n\n\n\n<p>In my cursory knowledge of tree shaking, it seems it can occur in 2 major ways<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Based on modules used &#8211; all unused modules are trimmed away<\/li>\n\n\n\n<li>Based on module exports &#8211; this can trim named exports that are not used in a module<\/li>\n<\/ul>\n\n\n\n<p>The first option, where entire modules are trimmed seems to be an easier process for webpack and other bundlers to accomplish. It gets trickier when having to determine the specific exports in a file that are used or not. This gets even more complicated when dealing with barrel files.<\/p>\n\n\n\n<p>If you want to deep dive deeper into the subject, the idea of side effects is the key concept to look at and how webpack and other bundlers determine if there are side effects. The main idea is that is there is a side effect (eg. a global of some kind) then the bundler can&#8217;t trim anything out because it doesn&#8217;t know if it&#8217;s used or not.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">preserveModules<\/h2>\n\n\n\n<p>The output.preserveModules option in Rollup (and by extension Vite) allows you to keep the module structure so that bundlers have an easier time determining what can be tree shaken away. But there is one major caveat that the Rollup docs don&#8217;t cover (and I think they should). <\/p>\n\n\n\n<p>Where you use preserveModules it keeps the exact directory structure of your source files. This includes the node_modules directory. All bundled dependencies from the node_modules folder will end up in the dist folder inside a node_modules folder.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/dist\/node_modules\/bundled_dep\/index.js<\/code><\/pre>\n\n\n\n<p>At first glance this doesn&#8217;t seem like an issues. But node treats the node_modules folder in a unique way, which can lead to confusing bugs. <\/p>\n\n\n\n<p>The solution is to rename the node_modules folder when bundling. We can do this with the <code>build.lib.fileName<\/code> option in Vite.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const config = defineConfig({\n  build: {\n    lib: {\n      entry: '.\/src\/index.ts',\n      formats: &#091;'es'],\n      fileName: (format, entryName) =&gt;\n        `${entryName.replace(\/node_modules\\\/\/g, 'external\/')}.${format}.js`,\n    },\n      output: {\n        preserveModules: true,\n        preserveModulesRoot: 'src',\n      },\n    },\n  },\n});<\/code><\/pre>\n\n\n\n<p>All we&#8217;re doing is running a find and replace on the filename of the bundled file to replace <code>node_modules<\/code> with <code>external<\/code>. That way Node doesn&#8217;t treat the dependencies different than a normal JavaScript file.<\/p>\n\n\n\n<p>Remember to use the global option in your regex for find and replace because you can actually have multiple <code>node_modules<\/code> folder nested.<\/p>\n\n\n\n<p>Good luck!<\/p>\n",
        "date": "2023-10-13 08:57:35",
        "slug": "vite-rollup-preservemodules-for-libraries",
        "excerpt": "One of the keys when building a JavaScript library is ensuring that it can accommodate tree shaking. In my cursory knowledge of tree shaking, it seems it can occur in 2 major ways The first option, where entire modules are trimmed seems to be an easier process for webpack and other bundlers to accomplish. It [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 482,
        "title": "localhost\u00a0isn\u2019t always what you expect",
        "content": "<!-- wp:paragraph -->\n<p>I spent the better part of a day working on this issue as it was a deep one. For some reason our test web server started using&nbsp;<code>npx http-server out<\/code>&nbsp;stopped being accessible in our pipeline. Everything worked locally, so it was one of those that could only be figured out by making changes and sending it to the pipeline. Time consuming to say the least.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The setup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I was moving our Cypress tests to use the static file output of our NextJS export command instead of the NextJS&nbsp;<code>next start<\/code>&nbsp;command. Testing what is supposed to be a fully static site using a node server didn\u2019t seem right.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to serve the files to Cypress we need to run&nbsp;<code>http-server<\/code>&nbsp;which is a simple http server. Seems simple enough.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We then us&nbsp;<code>wait-on<\/code>&nbsp;to tell us when the server is up so we can start our Cypress tests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>npm install -g wait-on\nnpx http-server -p 3000 out &amp; wait-on -i 1000 -v &lt;http:\/\/localhost:3000&gt;\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>However,&nbsp;<code>wait-on<\/code>&nbsp;never detected the website and therefore hung up the pipeline.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>making HTTP(S) head request to  url:&lt;http:\/\/localhost:3000&gt; ...\n  HTTP(S) error for &lt;http:\/\/localhost:3000&gt; Error: connect ECONNREFUSED ::1:3000\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It took a while since I\u2019m not accustomed to IPv6 addresses that it was right in front of my nose what address was rejecting the connection (<code>::1:3000<\/code>&nbsp;)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I should mention that this only started happening when we moved to&nbsp;<code>node 18<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Node 17 changed the rules<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The issue lies in how Node 17 changed how it relates to&nbsp;<a href=\"http:\/\/localhost\/\">localhost<\/a>&nbsp;as it relates to ipv4 vs ipv6. Apparently it now defers to the operating system\u2019s preferences.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is the reason why everything works fine on my Mac but fails in the pipeline which is running Debian bullseye.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\u2019d love to find the official docs for this change, but instead I did find several issues of people reporting the same issue.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/github.com\/nodejs\/node\/issues\/40537\">https:\/\/github.com\/nodejs\/node\/issues\/40537<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s apparently a bigger issue relating to the slow adoption of IPv6 and how devices treat the different protocols and fallback.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The official fix is lovingly called&nbsp;<a href=\"https:\/\/github.com\/nodejs\/node\/issues\/41625\">Happy Eyeballs<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">There is no clear blessed fix yet<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I tried seeing if&nbsp;<code>http-server<\/code>&nbsp;could serve both IPv4 and IPv6, whether&nbsp;<code>wait-on<\/code>&nbsp;could support both IPv4 and IPV6 and even replacing both those libraries with different alternatives. Nothing seemed to work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Answer - well the lo-tech patch at least<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>What ended up working with the least amount of fuss was modifying the&nbsp;<code>etc\/hosts<\/code>&nbsp;file with my script in the docker image. I don\u2019t have access to change the docker image but I am running a script with my Bitbucket pipeline.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The hosts file in the Debian bullseye docker image looked like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:syntaxhighlighter\/code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-syntaxhighlighter-code lang-bash\">127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nfe00::0\tip6-mcastprefix\nfe00::1\tip6-allnodes\nfe00::2\tip6-allrouters\n<\/pre>\n<!-- \/wp:syntaxhighlighter\/code -->\n\n<!-- wp:paragraph -->\n<p>You can see there are entries for&nbsp;<a href=\"http:\/\/localhost\/\">localhost<\/a>&nbsp;for both the IPv4 address and the IPv6 address (<code>::1<\/code>). Even though the IPv4 entry is first, something in the operating system configuration still chooses the IPv6 version and finds no web server there, which is why&nbsp;<code>wait-on<\/code>&nbsp;just hangs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Just remove the line!<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>My lo-tech solution for now is to just remove that IPv6 line from the hosts file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since I can\u2019t modify the docker image itself, I\u2019ll just do it in the script with my pipeline.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:syntaxhighlighter\/code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-syntaxhighlighter-code lang-bash\">sed \"\/loopback\/d\" \/etc\/hosts &gt; hosts\ncp hosts \/etc\/hosts\n<\/pre>\n<!-- \/wp:syntaxhighlighter\/code -->\n\n<!-- wp:paragraph -->\n<p><code>sed<\/code>&nbsp;is a little tricky since there are different version of it with quite different options. I found the Debian version of&nbsp;<code>sed<\/code>didn\u2019t support the&nbsp;<code>-i<\/code>&nbsp;which modifies the files itself. Instead I need a second line that takes the new file I created and overwrites the&nbsp;<code>etc\/hosts<\/code>&nbsp;file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Docker docker docker<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I really need to learn docker better so I can test this stuff locally. My feedback loop would have been way quicker and probably could have solved it in less than half the time it took me. Yet another thing to learn\u2026<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I spent the better part of a day working on this issue as it was a deep one. For some reason our test web server started using&nbsp;<code>npx http-server out<\/code>&nbsp;stopped being accessible in our pipeline. Everything worked locally, so it was one of those that could only be figured out by making changes and sending it to the pipeline. Time consuming to say the least.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The setup<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I was moving our Cypress tests to use the static file output of our NextJS export command instead of the NextJS&nbsp;<code>next start<\/code>&nbsp;command. Testing what is supposed to be a fully static site using a node server didn\u2019t seem right.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In order to serve the files to Cypress we need to run&nbsp;<code>http-server<\/code>&nbsp;which is a simple http server. Seems simple enough.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We then us&nbsp;<code>wait-on<\/code>&nbsp;to tell us when the server is up so we can start our Cypress tests.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>npm install -g wait-on\nnpx http-server -p 3000 out &amp; wait-on -i 1000 -v &lt;http:\/\/localhost:3000&gt;\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>However,&nbsp;<code>wait-on<\/code>&nbsp;never detected the website and therefore hung up the pipeline.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>making HTTP(S) head request to  url:&lt;http:\/\/localhost:3000&gt; ...\n  HTTP(S) error for &lt;http:\/\/localhost:3000&gt; Error: connect ECONNREFUSED ::1:3000\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It took a while since I\u2019m not accustomed to IPv6 addresses that it was right in front of my nose what address was rejecting the connection (<code>::1:3000<\/code>&nbsp;)<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I should mention that this only started happening when we moved to&nbsp;<code>node 18<\/code>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Node 17 changed the rules<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The issue lies in how Node 17 changed how it relates to&nbsp;<a href=\"http:\/\/localhost\/\">localhost<\/a>&nbsp;as it relates to ipv4 vs ipv6. Apparently it now defers to the operating system\u2019s preferences.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is the reason why everything works fine on my Mac but fails in the pipeline which is running Debian bullseye.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019d love to find the official docs for this change, but instead I did find several issues of people reporting the same issue.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/github.com\/nodejs\/node\/issues\/40537\">https:\/\/github.com\/nodejs\/node\/issues\/40537<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It\u2019s apparently a bigger issue relating to the slow adoption of IPv6 and how devices treat the different protocols and fallback.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The official fix is lovingly called&nbsp;<a href=\"https:\/\/github.com\/nodejs\/node\/issues\/41625\">Happy Eyeballs<\/a>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">There is no clear blessed fix yet<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I tried seeing if&nbsp;<code>http-server<\/code>&nbsp;could serve both IPv4 and IPv6, whether&nbsp;<code>wait-on<\/code>&nbsp;could support both IPv4 and IPV6 and even replacing both those libraries with different alternatives. Nothing seemed to work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Answer - well the lo-tech patch at least<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>What ended up working with the least amount of fuss was modifying the&nbsp;<code>etc\/hosts<\/code>&nbsp;file with my script in the docker image. I don\u2019t have access to change the docker image but I am running a script with my Bitbucket pipeline.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The hosts file in the Debian bullseye docker image looked like:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "syntaxhighlighter\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-syntaxhighlighter-code lang-bash\">127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nfe00::0\tip6-mcastprefix\nfe00::1\tip6-allnodes\nfe00::2\tip6-allrouters\n<\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You can see there are entries for&nbsp;<a href=\"http:\/\/localhost\/\">localhost<\/a>&nbsp;for both the IPv4 address and the IPv6 address (<code>::1<\/code>). Even though the IPv4 entry is first, something in the operating system configuration still chooses the IPv6 version and finds no web server there, which is why&nbsp;<code>wait-on<\/code>&nbsp;just hangs.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Just remove the line!<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>My lo-tech solution for now is to just remove that IPv6 line from the hosts file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Since I can\u2019t modify the docker image itself, I\u2019ll just do it in the script with my pipeline.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "syntaxhighlighter\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-syntaxhighlighter-code lang-bash\">sed \"\/loopback\/d\" \/etc\/hosts &gt; hosts\ncp hosts \/etc\/hosts\n<\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><code>sed<\/code>&nbsp;is a little tricky since there are different version of it with quite different options. I found the Debian version of&nbsp;<code>sed<\/code>didn\u2019t support the&nbsp;<code>-i<\/code>&nbsp;which modifies the files itself. Instead I need a second line that takes the new file I created and overwrites the&nbsp;<code>etc\/hosts<\/code>&nbsp;file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Docker docker docker<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I really need to learn docker better so I can test this stuff locally. My feedback loop would have been way quicker and probably could have solved it in less than half the time it took me. Yet another thing to learn\u2026<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I spent the better part of a day working on this issue as it was a deep one. For some reason our test web server started using&nbsp;<code>npx http-server out<\/code>&nbsp;stopped being accessible in our pipeline. Everything worked locally, so it was one of those that could only be figured out by making changes and sending it to the pipeline. Time consuming to say the least.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The setup<\/h2>\n\n\n\n<p>I was moving our Cypress tests to use the static file output of our NextJS export command instead of the NextJS&nbsp;<code>next start<\/code>&nbsp;command. Testing what is supposed to be a fully static site using a node server didn\u2019t seem right.<\/p>\n\n\n\n<p>In order to serve the files to Cypress we need to run&nbsp;<code>http-server<\/code>&nbsp;which is a simple http server. Seems simple enough.<\/p>\n\n\n\n<p>We then us&nbsp;<code>wait-on<\/code>&nbsp;to tell us when the server is up so we can start our Cypress tests.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>npm install -g wait-on\nnpx http-server -p 3000 out &amp; wait-on -i 1000 -v &lt;http:\/\/localhost:3000&gt;\n<\/code><\/pre>\n\n\n\n<p>However,&nbsp;<code>wait-on<\/code>&nbsp;never detected the website and therefore hung up the pipeline.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>making HTTP(S) head request to  url:&lt;http:\/\/localhost:3000&gt; ...\n  HTTP(S) error for &lt;http:\/\/localhost:3000&gt; Error: connect ECONNREFUSED ::1:3000\n<\/code><\/pre>\n\n\n\n<p>It took a while since I\u2019m not accustomed to IPv6 addresses that it was right in front of my nose what address was rejecting the connection (<code>::1:3000<\/code>&nbsp;)<\/p>\n\n\n\n<p>I should mention that this only started happening when we moved to&nbsp;<code>node 18<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Node 17 changed the rules<\/h2>\n\n\n\n<p>The issue lies in how Node 17 changed how it relates to&nbsp;<a href=\"http:\/\/localhost\/\">localhost<\/a>&nbsp;as it relates to ipv4 vs ipv6. Apparently it now defers to the operating system\u2019s preferences.<\/p>\n\n\n\n<p>This is the reason why everything works fine on my Mac but fails in the pipeline which is running Debian bullseye.<\/p>\n\n\n\n<p>I\u2019d love to find the official docs for this change, but instead I did find several issues of people reporting the same issue.<\/p>\n\n\n\n<p><a href=\"https:\/\/github.com\/nodejs\/node\/issues\/40537\">https:\/\/github.com\/nodejs\/node\/issues\/40537<\/a><\/p>\n\n\n\n<p>It\u2019s apparently a bigger issue relating to the slow adoption of IPv6 and how devices treat the different protocols and fallback.<\/p>\n\n\n\n<p>The official fix is lovingly called&nbsp;<a href=\"https:\/\/github.com\/nodejs\/node\/issues\/41625\">Happy Eyeballs<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">There is no clear blessed fix yet<\/h2>\n\n\n\n<p>I tried seeing if&nbsp;<code>http-server<\/code>&nbsp;could serve both IPv4 and IPv6, whether&nbsp;<code>wait-on<\/code>&nbsp;could support both IPv4 and IPV6 and even replacing both those libraries with different alternatives. Nothing seemed to work.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Answer &#8211; well the lo-tech patch at least<\/h2>\n\n\n\n<p>What ended up working with the least amount of fuss was modifying the&nbsp;<code>etc\/hosts<\/code>&nbsp;file with my script in the docker image. I don\u2019t have access to change the docker image but I am running a script with my Bitbucket pipeline.<\/p>\n\n\n\n<p>The hosts file in the Debian bullseye docker image looked like:<\/p>\n\n\n\n<pre class=\"wp-block-syntaxhighlighter-code lang-bash\">127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nfe00::0\tip6-mcastprefix\nfe00::1\tip6-allnodes\nfe00::2\tip6-allrouters\n<\/pre>\n\n\n\n<p>You can see there are entries for&nbsp;<a href=\"http:\/\/localhost\/\">localhost<\/a>&nbsp;for both the IPv4 address and the IPv6 address (<code>::1<\/code>). Even though the IPv4 entry is first, something in the operating system configuration still chooses the IPv6 version and finds no web server there, which is why&nbsp;<code>wait-on<\/code>&nbsp;just hangs.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Just remove the line!<\/h3>\n\n\n\n<p>My lo-tech solution for now is to just remove that IPv6 line from the hosts file.<\/p>\n\n\n\n<p>Since I can\u2019t modify the docker image itself, I\u2019ll just do it in the script with my pipeline.<\/p>\n\n\n\n<pre class=\"wp-block-syntaxhighlighter-code lang-bash\">sed \"\/loopback\/d\" \/etc\/hosts &gt; hosts\ncp hosts \/etc\/hosts\n<\/pre>\n\n\n\n<p><code>sed<\/code>&nbsp;is a little tricky since there are different version of it with quite different options. I found the Debian version of&nbsp;<code>sed<\/code>didn\u2019t support the&nbsp;<code>-i<\/code>&nbsp;which modifies the files itself. Instead I need a second line that takes the new file I created and overwrites the&nbsp;<code>etc\/hosts<\/code>&nbsp;file.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Docker docker docker<\/h2>\n\n\n\n<p>I really need to learn docker better so I can test this stuff locally. My feedback loop would have been way quicker and probably could have solved it in less than half the time it took me. Yet another thing to learn\u2026<\/p>\n",
        "date": "2023-04-27 09:43:46",
        "slug": "localhost-isnt-always-what-you-expect",
        "excerpt": "I spent the better part of a day working on this issue as it was a deep one. For some reason our test web server started using&nbsp;npx http-server out&nbsp;stopped being accessible in our pipeline. Everything worked locally, so it was one of those that could only be figured out by making changes and sending it [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 479,
        "title": "Triggering a Vercel build via cron",
        "content": "<!-- wp:paragraph -->\n<p>Using&nbsp;<a href=\"http:\/\/wordpress.com\/\">WordPress.com<\/a>&nbsp;as a headless CMS, I looked into the possibility of triggering a Vercel build every time I publish or update a post. This is possible, and I think I\u2019ll still write a blog about it, but I\u2019d rather have blogs published on a schedule. I\u2019m thinking to have them available Monday morning. This requires some kind of cron job.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Vercel now offers cron jobs through a serverless function. You setup the cron in your&nbsp;<code>vercel.json<\/code>&nbsp;file and then the code to execute in the serverless function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Vercel webhook to build and deploy site<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph {\"className\":\"lang-typescript\"} -->\n<p class=\"lang-typescript\">First we need to setup the webhook we will call in order to re-deploy the site with Vercel.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our Vercel project dashboard we navigate to&nbsp;<strong>Settings &gt; Git &gt; Deploy Hooks<\/strong>. We need to give it a unique identifier that will appear as the url. I called mine&nbsp;<em><strong>monday deploys<\/strong><\/em>. It will return a unique URL. Be sure to keep this secret otherwise anyone will be able to trigger your build.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Setup a cron task to hit the deploy webhook<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Setup an env variable that will hold your deploy hook.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Create a new file in your NextJS&nbsp;<code>api<\/code>&nbsp;folder and call is something like&nbsp;<code>cron.ts<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-ts\"} -->\n<pre class=\"wp-block-code lang-ts\"><code>export default async function handler() {\n  if (!process.env.MONDAY_DEPLOY_URL) {\n    throw new Error(\n      \"You must define MONDAY_DEPLOY_URL env variable for this cron.\"\n    );\n  }\n  return await fetch(process.env.MONDAY_DEPLOY_URL);\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>All this does is hit the deploy URL with a GET request.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our&nbsp;<code>vercel.json<\/code>&nbsp;file we will define our cron. Mine is set to build every Monday morning at 8am.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:syntaxhighlighter\/code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-syntaxhighlighter-code lang-json\">{\n  \"crons\": [\n    {\n      \"path\": \"\/api\/cron\",\n      \"schedule\": \"0 8 * * 1\"\n    }\n  ]\n}\n<\/pre>\n<!-- \/wp:syntaxhighlighter\/code -->\n\n<!-- wp:paragraph -->\n<p>That\u2019s it. Now I can schedule my posts within&nbsp;<a href=\"http:\/\/wordpress.com\/\">WordPress.com<\/a>&nbsp;knowing that anything published there will go live Monday mornings.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Using&nbsp;<a href=\"http:\/\/wordpress.com\/\">WordPress.com<\/a>&nbsp;as a headless CMS, I looked into the possibility of triggering a Vercel build every time I publish or update a post. This is possible, and I think I\u2019ll still write a blog about it, but I\u2019d rather have blogs published on a schedule. I\u2019m thinking to have them available Monday morning. This requires some kind of cron job.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Vercel now offers cron jobs through a serverless function. You setup the cron in your&nbsp;<code>vercel.json<\/code>&nbsp;file and then the code to execute in the serverless function.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Vercel webhook to build and deploy site<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<p class=\"lang-typescript\">First we need to setup the webhook we will call in order to re-deploy the site with Vercel.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In our Vercel project dashboard we navigate to&nbsp;<strong>Settings &gt; Git &gt; Deploy Hooks<\/strong>. We need to give it a unique identifier that will appear as the url. I called mine&nbsp;<em><strong>monday deploys<\/strong><\/em>. It will return a unique URL. Be sure to keep this secret otherwise anyone will be able to trigger your build.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Setup a cron task to hit the deploy webhook<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Setup an env variable that will hold your deploy hook.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Create a new file in your NextJS&nbsp;<code>api<\/code>&nbsp;folder and call is something like&nbsp;<code>cron.ts<\/code>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-ts"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-ts\"><code>export default async function handler() {\n  if (!process.env.MONDAY_DEPLOY_URL) {\n    throw new Error(\n      \"You must define MONDAY_DEPLOY_URL env variable for this cron.\"\n    );\n  }\n  return await fetch(process.env.MONDAY_DEPLOY_URL);\n}\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>All this does is hit the deploy URL with a GET request.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In our&nbsp;<code>vercel.json<\/code>&nbsp;file we will define our cron. Mine is set to build every Monday morning at 8am.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "syntaxhighlighter\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-syntaxhighlighter-code lang-json\">{\n  \"crons\": [\n    {\n      \"path\": \"\/api\/cron\",\n      \"schedule\": \"0 8 * * 1\"\n    }\n  ]\n}\n<\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That\u2019s it. Now I can schedule my posts within&nbsp;<a href=\"http:\/\/wordpress.com\/\">WordPress.com<\/a>&nbsp;knowing that anything published there will go live Monday mornings.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Using&nbsp;<a href=\"http:\/\/wordpress.com\/\">WordPress.com<\/a>&nbsp;as a headless CMS, I looked into the possibility of triggering a Vercel build every time I publish or update a post. This is possible, and I think I\u2019ll still write a blog about it, but I\u2019d rather have blogs published on a schedule. I\u2019m thinking to have them available Monday morning. This requires some kind of cron job.<\/p>\n\n\n\n<p>Vercel now offers cron jobs through a serverless function. You setup the cron in your&nbsp;<code>vercel.json<\/code>&nbsp;file and then the code to execute in the serverless function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Vercel webhook to build and deploy site<\/h2>\n\n\n\n<p class=\"lang-typescript\">First we need to setup the webhook we will call in order to re-deploy the site with Vercel.<\/p>\n\n\n\n<p>In our Vercel project dashboard we navigate to&nbsp;<strong>Settings &gt; Git &gt; Deploy Hooks<\/strong>. We need to give it a unique identifier that will appear as the url. I called mine&nbsp;<em><strong>monday deploys<\/strong><\/em>. It will return a unique URL. Be sure to keep this secret otherwise anyone will be able to trigger your build.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Setup a cron task to hit the deploy webhook<\/h2>\n\n\n\n<p>Setup an env variable that will hold your deploy hook.<\/p>\n\n\n\n<p>Create a new file in your NextJS&nbsp;<code>api<\/code>&nbsp;folder and call is something like&nbsp;<code>cron.ts<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-ts\"><code>export default async function handler() {\n  if (!process.env.MONDAY_DEPLOY_URL) {\n    throw new Error(\n      \"You must define MONDAY_DEPLOY_URL env variable for this cron.\"\n    );\n  }\n  return await fetch(process.env.MONDAY_DEPLOY_URL);\n}\n<\/code><\/pre>\n\n\n\n<p>All this does is hit the deploy URL with a GET request.<\/p>\n\n\n\n<p>In our&nbsp;<code>vercel.json<\/code>&nbsp;file we will define our cron. Mine is set to build every Monday morning at 8am.<\/p>\n\n\n\n<pre class=\"wp-block-syntaxhighlighter-code lang-json\">{\n  \"crons\": [\n    {\n      \"path\": \"\/api\/cron\",\n      \"schedule\": \"0 8 * * 1\"\n    }\n  ]\n}\n<\/pre>\n\n\n\n<p>That\u2019s it. Now I can schedule my posts within&nbsp;<a href=\"http:\/\/wordpress.com\/\">WordPress.com<\/a>&nbsp;knowing that anything published there will go live Monday mornings.<\/p>\n",
        "date": "2023-04-24 03:54:00",
        "slug": "triggering-a-vercel-build-via-cron",
        "excerpt": "Using&nbsp;WordPress.com&nbsp;as a headless CMS, I looked into the possibility of triggering a Vercel build every time I publish or update a post. This is possible, and I think I\u2019ll still write a blog about it, but I\u2019d rather have blogs published on a schedule. I\u2019m thinking to have them available Monday morning. This requires some [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 464,
        "title": "Why is my \/dist directory missing from my package?",
        "content": "<!-- wp:paragraph -->\n<p>It was rather puzzling that the only directory that really matters, the <code>\/dist<\/code> folder, wasn't included in the final npm package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I know about the <code>files<\/code> property in the <code>package.json<\/code> but I really wanted everything included in the package. Omitting the <code>files<\/code> property is supposed to include all files, but that just wasn't happening.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">.gitignore?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Turns out that if there is no <code>files<\/code> property it will look to the <code>.gitignore<\/code> file and not include any files that are ignored there. Of course the <code>\/dist<\/code> folder is ignored, I don't want to commit bundled files in my repo, only in the final package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, there is another option. If you include a <code>.npmignore<\/code> file, that will supersede the <code>.gitignore<\/code> file. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Creating the <code>.npmignore<\/code> file did the job. I added a few things that weren't really necessary in the npm package such as the <code>.storybook<\/code> and <code>.vscode<\/code> folders.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the end I finally have a package with the bundled files I need. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Chat with ChatGPT<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I was curious why the <code>.gitignore<\/code> file was used for this purpose. Most times you're going to want bundled build artifacts to only be included in your package and not in your repo. Using the <code>.gitignore<\/code> to exclude files for your package.json seems counterintuitive.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I wasn't totally satisfied with the ChatGPT response but it did give a little context that is helpful. I'd love to see an actual example of when <code>.gitignore<\/code> makes sense for this purpose, but on the other hand, I don't care enough to spend any more time on it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This prompt is after a couple other questions to help define the problem, so it may seem like jumping into the middle of a conversation.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Prompt<\/strong>: That seems silly to use the .gitignore file. Most times the .gitignore file is to exclude files that you want specifically to be in your package. Why is the .gitignore used for this purpose?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Response:<\/strong> It's true that using the .gitignore file to exclude files from your package can seem counterintuitive, since the purpose of the .gitignore file is typically to exclude files from version control.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, npm was designed to work closely with git, and by default, it will use your .gitignore file to determine which files to exclude from your package. The reason for this is that there is often significant overlap between the files that you want to exclude from version control and the files that you want to exclude from your package. For example, you might want to exclude configuration files or build artifacts from both version control and your package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Using the .gitignore file for this purpose also has the advantage of allowing you to easily manage the list of excluded files in a single place. Instead of having to maintain a separate .npmignore file, you can simply add files to your .gitignore file as needed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That being said, if you have files that you want to include in your package that are excluded by your .gitignore file, you can always create a separate .npmignore file to override the default behavior. This can be useful if you have files that are excluded from version control but that you still want to include in your package. Just remember that if you do create an .npmignore file, it will take precedence over your .gitignore file.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It was rather puzzling that the only directory that really matters, the <code>\/dist<\/code> folder, wasn't included in the final npm package.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I know about the <code>files<\/code> property in the <code>package.json<\/code> but I really wanted everything included in the package. Omitting the <code>files<\/code> property is supposed to include all files, but that just wasn't happening.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">.gitignore?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Turns out that if there is no <code>files<\/code> property it will look to the <code>.gitignore<\/code> file and not include any files that are ignored there. Of course the <code>\/dist<\/code> folder is ignored, I don't want to commit bundled files in my repo, only in the final package.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>However, there is another option. If you include a <code>.npmignore<\/code> file, that will supersede the <code>.gitignore<\/code> file. <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Creating the <code>.npmignore<\/code> file did the job. I added a few things that weren't really necessary in the npm package such as the <code>.storybook<\/code> and <code>.vscode<\/code> folders.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In the end I finally have a package with the bundled files I need. <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Chat with ChatGPT<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I was curious why the <code>.gitignore<\/code> file was used for this purpose. Most times you're going to want bundled build artifacts to only be included in your package and not in your repo. Using the <code>.gitignore<\/code> to exclude files for your package.json seems counterintuitive.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I wasn't totally satisfied with the ChatGPT response but it did give a little context that is helpful. I'd love to see an actual example of when <code>.gitignore<\/code> makes sense for this purpose, but on the other hand, I don't care enough to spend any more time on it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This prompt is after a couple other questions to help define the problem, so it may seem like jumping into the middle of a conversation.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><strong>Prompt<\/strong>: That seems silly to use the .gitignore file. Most times the .gitignore file is to exclude files that you want specifically to be in your package. Why is the .gitignore used for this purpose?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><strong>Response:<\/strong> It's true that using the .gitignore file to exclude files from your package can seem counterintuitive, since the purpose of the .gitignore file is typically to exclude files from version control.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>However, npm was designed to work closely with git, and by default, it will use your .gitignore file to determine which files to exclude from your package. The reason for this is that there is often significant overlap between the files that you want to exclude from version control and the files that you want to exclude from your package. For example, you might want to exclude configuration files or build artifacts from both version control and your package.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Using the .gitignore file for this purpose also has the advantage of allowing you to easily manage the list of excluded files in a single place. Instead of having to maintain a separate .npmignore file, you can simply add files to your .gitignore file as needed.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That being said, if you have files that you want to include in your package that are excluded by your .gitignore file, you can always create a separate .npmignore file to override the default behavior. This can be useful if you have files that are excluded from version control but that you still want to include in your package. Just remember that if you do create an .npmignore file, it will take precedence over your .gitignore file.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>It was rather puzzling that the only directory that really matters, the <code>\/dist<\/code> folder, wasn&#8217;t included in the final npm package.<\/p>\n\n\n\n<p>I know about the <code>files<\/code> property in the <code>package.json<\/code> but I really wanted everything included in the package. Omitting the <code>files<\/code> property is supposed to include all files, but that just wasn&#8217;t happening.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">.gitignore?<\/h2>\n\n\n\n<p>Turns out that if there is no <code>files<\/code> property it will look to the <code>.gitignore<\/code> file and not include any files that are ignored there. Of course the <code>\/dist<\/code> folder is ignored, I don&#8217;t want to commit bundled files in my repo, only in the final package.<\/p>\n\n\n\n<p>However, there is another option. If you include a <code>.npmignore<\/code> file, that will supersede the <code>.gitignore<\/code> file. <\/p>\n\n\n\n<p>Creating the <code>.npmignore<\/code> file did the job. I added a few things that weren&#8217;t really necessary in the npm package such as the <code>.storybook<\/code> and <code>.vscode<\/code> folders.<\/p>\n\n\n\n<p>In the end I finally have a package with the bundled files I need. <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Chat with ChatGPT<\/h2>\n\n\n\n<p>I was curious why the <code>.gitignore<\/code> file was used for this purpose. Most times you&#8217;re going to want bundled build artifacts to only be included in your package and not in your repo. Using the <code>.gitignore<\/code> to exclude files for your package.json seems counterintuitive.<\/p>\n\n\n\n<p>I wasn&#8217;t totally satisfied with the ChatGPT response but it did give a little context that is helpful. I&#8217;d love to see an actual example of when <code>.gitignore<\/code> makes sense for this purpose, but on the other hand, I don&#8217;t care enough to spend any more time on it.<\/p>\n\n\n\n<p>This prompt is after a couple other questions to help define the problem, so it may seem like jumping into the middle of a conversation.<\/p>\n\n\n\n<p><strong>Prompt<\/strong>: That seems silly to use the .gitignore file. Most times the .gitignore file is to exclude files that you want specifically to be in your package. Why is the .gitignore used for this purpose?<\/p>\n\n\n\n<p><strong>Response:<\/strong> It&#8217;s true that using the .gitignore file to exclude files from your package can seem counterintuitive, since the purpose of the .gitignore file is typically to exclude files from version control.<\/p>\n\n\n\n<p>However, npm was designed to work closely with git, and by default, it will use your .gitignore file to determine which files to exclude from your package. The reason for this is that there is often significant overlap between the files that you want to exclude from version control and the files that you want to exclude from your package. For example, you might want to exclude configuration files or build artifacts from both version control and your package.<\/p>\n\n\n\n<p>Using the .gitignore file for this purpose also has the advantage of allowing you to easily manage the list of excluded files in a single place. Instead of having to maintain a separate .npmignore file, you can simply add files to your .gitignore file as needed.<\/p>\n\n\n\n<p>That being said, if you have files that you want to include in your package that are excluded by your .gitignore file, you can always create a separate .npmignore file to override the default behavior. This can be useful if you have files that are excluded from version control but that you still want to include in your package. Just remember that if you do create an .npmignore file, it will take precedence over your .gitignore file.<\/p>\n",
        "date": "2023-04-14 02:46:04",
        "slug": "why-is-my-dist-directory-missing-from-my-package",
        "excerpt": "It was rather puzzling that the only directory that really matters, the \/dist folder, wasn&#8217;t included in the final npm package. I know about the files property in the package.json but I really wanted everything included in the package. Omitting the files property is supposed to include all files, but that just wasn&#8217;t happening. .gitignore? [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 449,
        "title": "Outputting multiple CSS files with Vite",
        "content": "<!-- wp:paragraph -->\n<p>I'm building a component library for our team and am on a wild ride of understanding the module systems of JavaScript. The latest part of that journey involves attempting to output multiple css files with the bundler Vite.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Vite only outputs a single CSS file<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>No matter what I did, it couldn't seem to get Vite to output multiple CSS files. Using library mode and multiple entry points still only resulted in a single CSS file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also tried using the <code>rollupOptions<\/code> property in the Vite config to manually specify inputs and output, but I never came to a satisfactory solution. I can't exactly remember why which is reminding me to take notes on things like this as I go (I didn't take notes because I didn't realize this was going to be such a long arduous journey!).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Vite JavaScript API<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Vite actually gives us a couple functions that allow us to trigger functionality of Vite manually with our own scripts. The <code>build<\/code> function that Vite exports can trigger a Vite build from a JavaScript file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The loop is the thing<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since we know that Vite outputs a single CSS file per build, I figured we would just need to run multiple builds. A loop that would run a separate build for each entry point seemed the way to go.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I created an object that would be a library type object with keys as the final output file and the value being the source entry point.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>const entries = {\n  components: \"src\/components\",\n  hooks: \"src\/hooks\",\n  utils: \"src\/utils\",\n  \"theme\/v2\": \"src\/theme\",\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now we can loop over this and provide the appropriate values within the loop.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>for (const &#091;key, value] of Object.entries(entries)) {\n  await build({\n    plugins: &#091;dts()],\n    build: {\n      emptyOutDir: false,\n      lib: {\n        entry: { &#091;key]: new URL(value, import.meta.url).pathname },\n        formats: &#091;'es'],\n        fileName: (format, entryName) =&gt; <code>${entryName}.js<\/code>,\n       },\n       rollupOptions: {\n        external: &#091;'react', 'react-dom', 'react\/jsx-runtime'],\n        output: {\n          globals: {\n            react: 'React',\n            'react-dom': 'ReactDOM',\n            'react\/jsx-runtime': 'react\/jsx-runtime',\n          },\n          assetFileNames: () =&gt; `${key}&#091;extname]`,\n        },\n      },\n    },\n  }); \n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Some things to note:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><em>emptyOutDir<\/em> - If we don't specify this then it will overwrite the previous build each time.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>entry<\/em> - This is where we use the value from the loop to populate the entry. We're only specifying a single entry point per build so that we'll get our separate CSS file<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>assetFileNames<\/em> - This is was defines the name of the css file. We're matching it to the entry point name with the appropriate extension so that we know which CSS file is for which build.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Next steps<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We do some additional moving of files in the loop after the build but that relates more to how we're structuring our module. Details on that will follow in a blog about subpath exports. You can read my initial blog post on the subject called <a href=\"https:\/\/jeremyrichardson.home.blog\/2023\/02\/24\/saga_of_learning_exports_property_in_packagejson\/\">The saga of learning the exports property in&nbsp;package.json<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reference<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This was a twitter thread where Wes Bos went through a similar process but solved it a different way. <\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>\"Anyone using Vite library mode for multiple css files?\"<\/em> -<br><a href=\"https:\/\/twitter.com\/wesbos\/status\/1621247972515233796\">https:\/\/twitter.com\/wesbos\/status\/1621247972515233796<\/a><\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I'm building a component library for our team and am on a wild ride of understanding the module systems of JavaScript. The latest part of that journey involves attempting to output multiple css files with the bundler Vite.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Vite only outputs a single CSS file<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>No matter what I did, it couldn't seem to get Vite to output multiple CSS files. Using library mode and multiple entry points still only resulted in a single CSS file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I also tried using the <code>rollupOptions<\/code> property in the Vite config to manually specify inputs and output, but I never came to a satisfactory solution. I can't exactly remember why which is reminding me to take notes on things like this as I go (I didn't take notes because I didn't realize this was going to be such a long arduous journey!).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Vite JavaScript API<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Vite actually gives us a couple functions that allow us to trigger functionality of Vite manually with our own scripts. The <code>build<\/code> function that Vite exports can trigger a Vite build from a JavaScript file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The loop is the thing<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Since we know that Vite outputs a single CSS file per build, I figured we would just need to run multiple builds. A loop that would run a separate build for each entry point seemed the way to go.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I created an object that would be a library type object with keys as the final output file and the value being the source entry point.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>const entries = {\n  components: \"src\/components\",\n  hooks: \"src\/hooks\",\n  utils: \"src\/utils\",\n  \"theme\/v2\": \"src\/theme\",\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we can loop over this and provide the appropriate values within the loop.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>for (const &#091;key, value] of Object.entries(entries)) {\n  await build({\n    plugins: &#091;dts()],\n    build: {\n      emptyOutDir: false,\n      lib: {\n        entry: { &#091;key]: new URL(value, import.meta.url).pathname },\n        formats: &#091;'es'],\n        fileName: (format, entryName) =&gt; <code>${entryName}.js<\/code>,\n       },\n       rollupOptions: {\n        external: &#091;'react', 'react-dom', 'react\/jsx-runtime'],\n        output: {\n          globals: {\n            react: 'React',\n            'react-dom': 'ReactDOM',\n            'react\/jsx-runtime': 'react\/jsx-runtime',\n          },\n          assetFileNames: () =&gt; `${key}&#091;extname]`,\n        },\n      },\n    },\n  }); \n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Some things to note:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><em>emptyOutDir<\/em> - If we don't specify this then it will overwrite the previous build each time.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><em>entry<\/em> - This is where we use the value from the loop to populate the entry. We're only specifying a single entry point per build so that we'll get our separate CSS file<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><em>assetFileNames<\/em> - This is was defines the name of the css file. We're matching it to the entry point name with the appropriate extension so that we know which CSS file is for which build.<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Next steps<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We do some additional moving of files in the loop after the build but that relates more to how we're structuring our module. Details on that will follow in a blog about subpath exports. You can read my initial blog post on the subject called <a href=\"https:\/\/jeremyrichardson.home.blog\/2023\/02\/24\/saga_of_learning_exports_property_in_packagejson\/\">The saga of learning the exports property in&nbsp;package.json<\/a>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Reference<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This was a twitter thread where Wes Bos went through a similar process but solved it a different way. <\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>\"Anyone using Vite library mode for multiple css files?\"<\/em> -<br><a href=\"https:\/\/twitter.com\/wesbos\/status\/1621247972515233796\">https:\/\/twitter.com\/wesbos\/status\/1621247972515233796<\/a><\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I&#8217;m building a component library for our team and am on a wild ride of understanding the module systems of JavaScript. The latest part of that journey involves attempting to output multiple css files with the bundler Vite.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Vite only outputs a single CSS file<\/h2>\n\n\n\n<p>No matter what I did, it couldn&#8217;t seem to get Vite to output multiple CSS files. Using library mode and multiple entry points still only resulted in a single CSS file.<\/p>\n\n\n\n<p>I also tried using the <code>rollupOptions<\/code> property in the Vite config to manually specify inputs and output, but I never came to a satisfactory solution. I can&#8217;t exactly remember why which is reminding me to take notes on things like this as I go (I didn&#8217;t take notes because I didn&#8217;t realize this was going to be such a long arduous journey!).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Vite JavaScript API<\/h2>\n\n\n\n<p>Vite actually gives us a couple functions that allow us to trigger functionality of Vite manually with our own scripts. The <code>build<\/code> function that Vite exports can trigger a Vite build from a JavaScript file.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The loop is the thing<\/h2>\n\n\n\n<p>Since we know that Vite outputs a single CSS file per build, I figured we would just need to run multiple builds. A loop that would run a separate build for each entry point seemed the way to go.<\/p>\n\n\n\n<p>I created an object that would be a library type object with keys as the final output file and the value being the source entry point.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>const entries = {\n  components: \"src\/components\",\n  hooks: \"src\/hooks\",\n  utils: \"src\/utils\",\n  \"theme\/v2\": \"src\/theme\",\n}<\/code><\/pre>\n\n\n\n<p>Now we can loop over this and provide the appropriate values within the loop.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>for (const &#091;key, value] of Object.entries(entries)) {\n  await build({\n    plugins: &#091;dts()],\n    build: {\n      emptyOutDir: false,\n      lib: {\n        entry: { &#091;key]: new URL(value, import.meta.url).pathname },\n        formats: &#091;'es'],\n        fileName: (format, entryName) =&gt; <code>${entryName}.js<\/code>,\n       },\n       rollupOptions: {\n        external: &#091;'react', 'react-dom', 'react\/jsx-runtime'],\n        output: {\n          globals: {\n            react: 'React',\n            'react-dom': 'ReactDOM',\n            'react\/jsx-runtime': 'react\/jsx-runtime',\n          },\n          assetFileNames: () =&gt; `${key}&#091;extname]`,\n        },\n      },\n    },\n  }); \n}<\/code><\/pre>\n\n\n\n<p>Some things to note:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li><em>emptyOutDir<\/em> &#8211; If we don&#8217;t specify this then it will overwrite the previous build each time.<\/li>\n\n\n\n<li><em>entry<\/em> &#8211; This is where we use the value from the loop to populate the entry. We&#8217;re only specifying a single entry point per build so that we&#8217;ll get our separate CSS file<\/li>\n\n\n\n<li><em>assetFileNames<\/em> &#8211; This is was defines the name of the css file. We&#8217;re matching it to the entry point name with the appropriate extension so that we know which CSS file is for which build.<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Next steps<\/h2>\n\n\n\n<p>We do some additional moving of files in the loop after the build but that relates more to how we&#8217;re structuring our module. Details on that will follow in a blog about subpath exports. You can read my initial blog post on the subject called <a href=\"https:\/\/jeremyrichardson.home.blog\/2023\/02\/24\/saga_of_learning_exports_property_in_packagejson\/\">The saga of learning the exports property in&nbsp;package.json<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Reference<\/h2>\n\n\n\n<p>This was a twitter thread where Wes Bos went through a similar process but solved it a different way. <\/p>\n\n\n\n<p><em>&#8220;Anyone using Vite library mode for multiple css files?&#8221;<\/em> &#8211;<br><a href=\"https:\/\/twitter.com\/wesbos\/status\/1621247972515233796\">https:\/\/twitter.com\/wesbos\/status\/1621247972515233796<\/a><\/p>\n",
        "date": "2023-04-04 14:14:44",
        "slug": "outputting-multiple-css-files-with-vite",
        "excerpt": "I&#8217;m building a component library for our team and am on a wild ride of understanding the module systems of JavaScript. The latest part of that journey involves attempting to output multiple css files with the bundler Vite. Vite only outputs a single CSS file No matter what I did, it couldn&#8217;t seem to get [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 434,
        "title": "Parsing a raw WordPress post with blocks",
        "content": "<!-- wp:paragraph -->\n<p>Gutenberg blocks are great. I love the authoring experience using WordPress with blocks.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The trick was figuring out how to use that authoring experience in a headless context with a Next.js site. We somehow need to get the blocks and translate them into a React context.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Raw WordPress post<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first step is to make sure you can grab the raw post content from the REST API which will require authorization. Posts are usually publicly available with the WordPress API, however when you add the query parameter <code>_context=edit<\/code>, you will need authorization. See my article <a href=\"https:\/\/jeremyrichardson.home.blog\/2023\/03\/06\/setup-oauth-with-wordpress-com-to-use-as-headless-cms\/\">Setup OAuth with WordPress.com to use as headless&nbsp;CMS<\/a> for info.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once you're able to make a request with the _content=edit query parameter, you will get another property on the content property - raw. The raw data is the custom WordPress blocks markup that uses HTML comments to store additional data for each block. It will look something like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>      '&lt;!-- wp:paragraph --&gt;\\n' +\n      '&lt;p&gt;This is the first in a series of posts that will cover my recent conversion from using markdown files for my blog posts to using WordPress.com as a headless CMS. The reasoning for using WordPress.com is to get the benefit of the Gutenberg editor without needing to host my own WordPress site just for content editing.&lt;\/p&gt;\\n' +\n      '&lt;!-- \/wp:paragraph --&gt;\\n' +\n      '\\n' +\n      '&lt;!-- wp:heading --&gt;\\n' +\n      '&lt;h2 class=\"wp-block-heading\"&gt;Setting up an &lt;em&gt;application&lt;\/em&gt;&lt;\/h2&gt;\\n' +\n      '&lt;!-- \/wp:heading --&gt;\\n' +\n      '\\n' +\n      '&lt;h2 class=\"wp-block-heading\"&gt;Setting up an &lt;em&gt;application&lt;\/em&gt;&lt;\/h2&gt;\\n' +\n        '&lt;!-- \/wp:heading --&gt;\\n' +<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It's not super hard to understand. Just some HTML wrapped in custom comment tags that mean something to Gutenberg. It's not super important to understand this as we're going to parse it into a JSON object that will be easier to work with.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Parse post into JSON blocks object<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now that we made our fetch request and have the raw post content, we now need to install the block parser:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>npm i @wordpress\/block-serialization-default-parser<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now we can use the parser like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>import { parse } from \"@wordpress\/block-serialization-default-parser\";\n\nconst blocks = parse(content.raw);<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>That will parse the comment style block post into an array of individual JSON block objects.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>&#091;\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;Set up a GET request to an endpoint. Let's use the &lt;em&gt;\/posts&lt;\/em&gt; endpoint for now:&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;Set up a GET request to an endpoint. Let's use the &lt;em&gt;\/posts&lt;\/em&gt; endpoint for now:&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/code\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;pre class=\\\"wp-block-code\\\"&gt;&lt;code&gt;https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts&lt;\/code&gt;&lt;\/pre&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;pre class=\\\"wp-block-code\\\"&gt;&lt;code&gt;https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts&lt;\/code&gt;&lt;\/pre&gt;\\n\"\n        ]\n    },\n]<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I haven't quite figured out why they create a number of blocks with the blockname of <code>null<\/code>, but I have so far just filtered those out.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now we have our blocks in JavaScript which opens up a whole huge range of possibilities.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we'll deal with how to turn those block objects into React components.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Gutenberg blocks are great. I love the authoring experience using WordPress with blocks.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The trick was figuring out how to use that authoring experience in a headless context with a Next.js site. We somehow need to get the blocks and translate them into a React context.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Raw WordPress post<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The first step is to make sure you can grab the raw post content from the REST API which will require authorization. Posts are usually publicly available with the WordPress API, however when you add the query parameter <code>_context=edit<\/code>, you will need authorization. See my article <a href=\"https:\/\/jeremyrichardson.home.blog\/2023\/03\/06\/setup-oauth-with-wordpress-com-to-use-as-headless-cms\/\">Setup OAuth with WordPress.com to use as headless&nbsp;CMS<\/a> for info.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Once you're able to make a request with the _content=edit query parameter, you will get another property on the content property - raw. The raw data is the custom WordPress blocks markup that uses HTML comments to store additional data for each block. It will look something like:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>      '&lt;!-- wp:paragraph --&gt;\\n' +\n      '&lt;p&gt;This is the first in a series of posts that will cover my recent conversion from using markdown files for my blog posts to using WordPress.com as a headless CMS. The reasoning for using WordPress.com is to get the benefit of the Gutenberg editor without needing to host my own WordPress site just for content editing.&lt;\/p&gt;\\n' +\n      '&lt;!-- \/wp:paragraph --&gt;\\n' +\n      '\\n' +\n      '&lt;!-- wp:heading --&gt;\\n' +\n      '&lt;h2 class=\"wp-block-heading\"&gt;Setting up an &lt;em&gt;application&lt;\/em&gt;&lt;\/h2&gt;\\n' +\n      '&lt;!-- \/wp:heading --&gt;\\n' +\n      '\\n' +\n      '&lt;h2 class=\"wp-block-heading\"&gt;Setting up an &lt;em&gt;application&lt;\/em&gt;&lt;\/h2&gt;\\n' +\n        '&lt;!-- \/wp:heading --&gt;\\n' +<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It's not super hard to understand. Just some HTML wrapped in custom comment tags that mean something to Gutenberg. It's not super important to understand this as we're going to parse it into a JSON object that will be easier to work with.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Parse post into JSON blocks object<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now that we made our fetch request and have the raw post content, we now need to install the block parser:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>npm i @wordpress\/block-serialization-default-parser<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we can use the parser like this:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>import { parse } from \"@wordpress\/block-serialization-default-parser\";\n\nconst blocks = parse(content.raw);<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That will parse the comment style block post into an array of individual JSON block objects.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>&#091;\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;Set up a GET request to an endpoint. Let's use the &lt;em&gt;\/posts&lt;\/em&gt; endpoint for now:&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;Set up a GET request to an endpoint. Let's use the &lt;em&gt;\/posts&lt;\/em&gt; endpoint for now:&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/code\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;pre class=\\\"wp-block-code\\\"&gt;&lt;code&gt;https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts&lt;\/code&gt;&lt;\/pre&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;pre class=\\\"wp-block-code\\\"&gt;&lt;code&gt;https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts&lt;\/code&gt;&lt;\/pre&gt;\\n\"\n        ]\n    },\n]<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I haven't quite figured out why they create a number of blocks with the blockname of <code>null<\/code>, but I have so far just filtered those out.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we have our blocks in JavaScript which opens up a whole huge range of possibilities.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Next we'll deal with how to turn those block objects into React components.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Gutenberg blocks are great. I love the authoring experience using WordPress with blocks.<\/p>\n\n\n\n<p>The trick was figuring out how to use that authoring experience in a headless context with a Next.js site. We somehow need to get the blocks and translate them into a React context.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Raw WordPress post<\/h2>\n\n\n\n<p>The first step is to make sure you can grab the raw post content from the REST API which will require authorization. Posts are usually publicly available with the WordPress API, however when you add the query parameter <code>_context=edit<\/code>, you will need authorization. See my article <a href=\"https:\/\/jeremyrichardson.home.blog\/2023\/03\/06\/setup-oauth-with-wordpress-com-to-use-as-headless-cms\/\">Setup OAuth with WordPress.com to use as headless&nbsp;CMS<\/a> for info.<\/p>\n\n\n\n<p>Once you&#8217;re able to make a request with the _content=edit query parameter, you will get another property on the content property &#8211; raw. The raw data is the custom WordPress blocks markup that uses HTML comments to store additional data for each block. It will look something like:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>      '&lt;!-- wp:paragraph --&gt;\\n' +\n      '&lt;p&gt;This is the first in a series of posts that will cover my recent conversion from using markdown files for my blog posts to using WordPress.com as a headless CMS. The reasoning for using WordPress.com is to get the benefit of the Gutenberg editor without needing to host my own WordPress site just for content editing.&lt;\/p&gt;\\n' +\n      '&lt;!-- \/wp:paragraph --&gt;\\n' +\n      '\\n' +\n      '&lt;!-- wp:heading --&gt;\\n' +\n      '&lt;h2 class=\"wp-block-heading\"&gt;Setting up an &lt;em&gt;application&lt;\/em&gt;&lt;\/h2&gt;\\n' +\n      '&lt;!-- \/wp:heading --&gt;\\n' +\n      '\\n' +\n      '&lt;h2 class=\"wp-block-heading\"&gt;Setting up an &lt;em&gt;application&lt;\/em&gt;&lt;\/h2&gt;\\n' +\n        '&lt;!-- \/wp:heading --&gt;\\n' +<\/code><\/pre>\n\n\n\n<p>It&#8217;s not super hard to understand. Just some HTML wrapped in custom comment tags that mean something to Gutenberg. It&#8217;s not super important to understand this as we&#8217;re going to parse it into a JSON object that will be easier to work with.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Parse post into JSON blocks object<\/h2>\n\n\n\n<p>Now that we made our fetch request and have the raw post content, we now need to install the block parser:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>npm i @wordpress\/block-serialization-default-parser<\/code><\/pre>\n\n\n\n<p>Now we can use the parser like this:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>import { parse } from \"@wordpress\/block-serialization-default-parser\";\n\nconst blocks = parse(content.raw);<\/code><\/pre>\n\n\n\n<p>That will parse the comment style block post into an array of individual JSON block objects.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>&#091;\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/paragraph\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;p&gt;Set up a GET request to an endpoint. Let's use the &lt;em&gt;\/posts&lt;\/em&gt; endpoint for now:&lt;\/p&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;p&gt;Set up a GET request to an endpoint. Let's use the &lt;em&gt;\/posts&lt;\/em&gt; endpoint for now:&lt;\/p&gt;\\n\"\n        ]\n    },\n    {\n        \"blockName\": null,\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n\\n\",\n        \"innerContent\": &#091;\n            \"\\n\\n\"\n        ]\n    },\n    {\n        \"blockName\": \"core\/code\",\n        \"attrs\": {},\n        \"innerBlocks\": &#091;],\n        \"innerHTML\": \"\\n&lt;pre class=\\\"wp-block-code\\\"&gt;&lt;code&gt;https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts&lt;\/code&gt;&lt;\/pre&gt;\\n\",\n        \"innerContent\": &#091;\n            \"\\n&lt;pre class=\\\"wp-block-code\\\"&gt;&lt;code&gt;https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts&lt;\/code&gt;&lt;\/pre&gt;\\n\"\n        ]\n    },\n]<\/code><\/pre>\n\n\n\n<p>I haven&#8217;t quite figured out why they create a number of blocks with the blockname of <code>null<\/code>, but I have so far just filtered those out.<\/p>\n\n\n\n<p>Now we have our blocks in JavaScript which opens up a whole huge range of possibilities.<\/p>\n\n\n\n<p>Next we&#8217;ll deal with how to turn those block objects into React components.<\/p>\n",
        "date": "2023-03-14 20:29:32",
        "slug": "parsing-a-raw-wordpress-post-with-blocks",
        "excerpt": "Gutenberg blocks are great. I love the authoring experience using WordPress with blocks. The trick was figuring out how to use that authoring experience in a headless context with a Next.js site. We somehow need to get the blocks and translate them into a React context. Raw WordPress post The first step is to make [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 429,
        "title": "Change where screenshots are saved on macOS",
        "content": "<!-- wp:paragraph -->\n<p>I'm not a fan of having a cluttered desktop. Ideally I don't have anything on my desktop.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For temporary storage I use my downloads folder. That way I know I can blow it away at any moment and there is nothing in there that is permanent. Screenshots fall in that category.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How to change screenshot save location on macOS<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This works for macOS Mojave, Catalina, Big Sur or Monterey.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Press <kbd>Command + Shift + 5<\/kbd> to bring up the full featured screenshot interface<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>In the toolbar at the bottom, click on <em>Options<\/em><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Click on <em>Other Location<\/em> so you can select your <em>Downloads<\/em> folder<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>That's it.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I'm not a fan of having a cluttered desktop. Ideally I don't have anything on my desktop.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For temporary storage I use my downloads folder. That way I know I can blow it away at any moment and there is nothing in there that is permanent. Screenshots fall in that category.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">How to change screenshot save location on macOS<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This works for macOS Mojave, Catalina, Big Sur or Monterey.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Press <kbd>Command + Shift + 5<\/kbd> to bring up the full featured screenshot interface<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>In the toolbar at the bottom, click on <em>Options<\/em><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Click on <em>Other Location<\/em> so you can select your <em>Downloads<\/em> folder<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n\n\n<\/ol>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That's it.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I&#8217;m not a fan of having a cluttered desktop. Ideally I don&#8217;t have anything on my desktop.<\/p>\n\n\n\n<p>For temporary storage I use my downloads folder. That way I know I can blow it away at any moment and there is nothing in there that is permanent. Screenshots fall in that category.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">How to change screenshot save location on macOS<\/h2>\n\n\n\n<p>This works for macOS Mojave, Catalina, Big Sur or Monterey.<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Press <kbd>Command + Shift + 5<\/kbd> to bring up the full featured screenshot interface<\/li>\n\n\n\n<li>In the toolbar at the bottom, click on <em>Options<\/em><\/li>\n\n\n\n<li>Click on <em>Other Location<\/em> so you can select your <em>Downloads<\/em> folder<\/li>\n<\/ol>\n\n\n\n<p>That&#8217;s it.<\/p>\n",
        "date": "2023-03-14 17:44:30",
        "slug": "change-where-screenshots-are-saved-on-macos",
        "excerpt": "I&#8217;m not a fan of having a cluttered desktop. Ideally I don&#8217;t have anything on my desktop. For temporary storage I use my downloads folder. That way I know I can blow it away at any moment and there is nothing in there that is permanent. Screenshots fall in that category. How to change screenshot [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 418,
        "title": "Merging back to develop after running semantic-release",
        "content": "<!-- wp:paragraph -->\n<p>Here is the issue:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Push to master<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>CI pipeline runs semantic-release<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>semantic-release updates changelog and package.json<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><em>Changes never get back to develop branch<\/em><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Normally this isn't a big issue other than you develop branch won't have the latest changelog info or the correct version in your package.json.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For us, we're building our Storybook documentation from the develop branch. We're pulling the changelog into Storybook so it's visible there, but it's pulling from the develop branch. Not ideal.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How to get the develop branch<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The trick was understanding that Bitbucket only pulls the specific branch it needs. Initially I tried to just merge the changes into develop but it kept saying develop didn't exist.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>git checkout develop\n\n\/\/ error: pathspec 'develop' did not match any file(s) known to git<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">clone: all<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>My first solution was to clone the entire repository so that the develop branch would exist. This was done by a Bitbucket pipeline property <code>clone<\/code>. With this property you can specify the depth to pull, which is equivalent to the last x number of commit. Or by specifying <em>all<\/em> it will pull the entire repository.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-yaml\"} -->\n<pre class=\"wp-block-code lang-yaml\"><code>pipelines:\n  branches:\n    master:\n      - step:\n          name: Deploy to Production\n          clone:\n            depth: all\n          script:\n            - ...<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Clone can also be useful for steps that you're only working with artifacts of previous steps and don't need to clone anything. You can set clone enabled to false to save the time it would take to clone.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-yaml\"} -->\n<pre class=\"wp-block-code lang-yaml\"><code>pipelines:\n  branches:\n    master:\n      - step:\n          name: Deploy to Production\n          clone:\n            enabled: false\n          script:\n            - ...<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">git remote set-branches<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If we clone the entire repo we're pulling a lot of stuff we just don't need and when we're dealing with CI pipelines we want to keep it to the minimum amount of work necessary.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By using the git remote set-branches command, we can add just the specific branch we need to our local (local to the CI) repo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>git remote set-branches --add origin develop<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now we can checkout the develop branch so we can merge the changes from master into it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>git fetch\ngit checkout develop\ngit push<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Done! Now every time we push to master it will run semantic-release then push the changelog and package.json changes back into develop automatically.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">References<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><a href=\"https:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\">Disabling clones in pipelines steps<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/git-clone-behavior\/\">Git clone behavior<\/a><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:embed {\"url\":\"https:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\",\"type\":\"wp-embed\",\"providerNameSlug\":\"bitbucket\"} -->\n<figure class=\"wp-block-embed is-type-wp-embed is-provider-bitbucket wp-block-embed-bitbucket\"><div class=\"wp-block-embed__wrapper\">\nhttps:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\n<\/div><\/figure>\n<!-- \/wp:embed -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here is the issue:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Push to master<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>CI pipeline runs semantic-release<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>semantic-release updates changelog and package.json<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><em>Changes never get back to develop branch<\/em><\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Normally this isn't a big issue other than you develop branch won't have the latest changelog info or the correct version in your package.json.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For us, we're building our Storybook documentation from the develop branch. We're pulling the changelog into Storybook so it's visible there, but it's pulling from the develop branch. Not ideal.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">How to get the develop branch<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The trick was understanding that Bitbucket only pulls the specific branch it needs. Initially I tried to just merge the changes into develop but it kept saying develop didn't exist.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>git checkout develop\n\n\/\/ error: pathspec 'develop' did not match any file(s) known to git<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">clone: all<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>My first solution was to clone the entire repository so that the develop branch would exist. This was done by a Bitbucket pipeline property <code>clone<\/code>. With this property you can specify the depth to pull, which is equivalent to the last x number of commit. Or by specifying <em>all<\/em> it will pull the entire repository.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-yaml"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-yaml\"><code>pipelines:\n  branches:\n    master:\n      - step:\n          name: Deploy to Production\n          clone:\n            depth: all\n          script:\n            - ...<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Clone can also be useful for steps that you're only working with artifacts of previous steps and don't need to clone anything. You can set clone enabled to false to save the time it would take to clone.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-yaml"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-yaml\"><code>pipelines:\n  branches:\n    master:\n      - step:\n          name: Deploy to Production\n          clone:\n            enabled: false\n          script:\n            - ...<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">git remote set-branches<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If we clone the entire repo we're pulling a lot of stuff we just don't need and when we're dealing with CI pipelines we want to keep it to the minimum amount of work necessary.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>By using the git remote set-branches command, we can add just the specific branch we need to our local (local to the CI) repo.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>git remote set-branches --add origin develop<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we can checkout the develop branch so we can merge the changes from master into it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>git fetch\ngit checkout develop\ngit push<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Done! Now every time we push to master it will run semantic-release then push the changelog and package.json changes back into develop automatically.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">References<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><a href=\"https:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\">Disabling clones in pipelines steps<\/a><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><a href=\"https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/git-clone-behavior\/\">Git clone behavior<\/a><\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/embed",
                "attrs": {
                    "url": "https:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps",
                    "type": "wp-embed",
                    "providerNameSlug": "bitbucket"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-embed is-type-wp-embed is-provider-bitbucket wp-block-embed-bitbucket\"><div class=\"wp-block-embed__wrapper\">\nhttps:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\n<\/div><\/figure>\n"
            }
        ],
        "rendered_content": "\n<p>Here is the issue:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Push to master<\/li>\n\n\n\n<li>CI pipeline runs semantic-release<\/li>\n\n\n\n<li>semantic-release updates changelog and package.json<\/li>\n\n\n\n<li><em>Changes never get back to develop branch<\/em><\/li>\n<\/ul>\n\n\n\n<p>Normally this isn&#8217;t a big issue other than you develop branch won&#8217;t have the latest changelog info or the correct version in your package.json.<\/p>\n\n\n\n<p>For us, we&#8217;re building our Storybook documentation from the develop branch. We&#8217;re pulling the changelog into Storybook so it&#8217;s visible there, but it&#8217;s pulling from the develop branch. Not ideal.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">How to get the develop branch<\/h2>\n\n\n\n<p>The trick was understanding that Bitbucket only pulls the specific branch it needs. Initially I tried to just merge the changes into develop but it kept saying develop didn&#8217;t exist.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>git checkout develop\n\n\/\/ error: pathspec 'develop' did not match any file(s) known to git<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">clone: all<\/h3>\n\n\n\n<p>My first solution was to clone the entire repository so that the develop branch would exist. This was done by a Bitbucket pipeline property <code>clone<\/code>. With this property you can specify the depth to pull, which is equivalent to the last x number of commit. Or by specifying <em>all<\/em> it will pull the entire repository.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-yaml\"><code>pipelines:\n  branches:\n    master:\n      - step:\n          name: Deploy to Production\n          clone:\n            depth: all\n          script:\n            - ...<\/code><\/pre>\n\n\n\n<p>Clone can also be useful for steps that you&#8217;re only working with artifacts of previous steps and don&#8217;t need to clone anything. You can set clone enabled to false to save the time it would take to clone.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-yaml\"><code>pipelines:\n  branches:\n    master:\n      - step:\n          name: Deploy to Production\n          clone:\n            enabled: false\n          script:\n            - ...<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">git remote set-branches<\/h3>\n\n\n\n<p>If we clone the entire repo we&#8217;re pulling a lot of stuff we just don&#8217;t need and when we&#8217;re dealing with CI pipelines we want to keep it to the minimum amount of work necessary.<\/p>\n\n\n\n<p>By using the git remote set-branches command, we can add just the specific branch we need to our local (local to the CI) repo.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>git remote set-branches --add origin develop<\/code><\/pre>\n\n\n\n<p>Now we can checkout the develop branch so we can merge the changes from master into it.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>git fetch\ngit checkout develop\ngit push<\/code><\/pre>\n\n\n\n<p>Done! Now every time we push to master it will run semantic-release then push the changelog and package.json changes back into develop automatically.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">References<\/h2>\n\n\n\n<ul class=\"wp-block-list\">\n<li><a href=\"https:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\">Disabling clones in pipelines steps<\/a><\/li>\n\n\n\n<li><a href=\"https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/git-clone-behavior\/\">Git clone behavior<\/a><\/li>\n<\/ul>\n\n\n\n<figure class=\"wp-block-embed is-type-wp-embed is-provider-bitbucket wp-block-embed-bitbucket\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"wp-embedded-content\" data-secret=\"PN9IGBNDdg\"><a href=\"https:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\">Disabling clones in pipelines steps<\/a><\/blockquote><iframe loading=\"lazy\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; visibility: hidden;\" title=\"&#8220;Disabling clones in pipelines steps&#8221; &#8212; Bitbucket\" src=\"https:\/\/bitbucket.org\/blog\/disabling-clones-in-pipelines-steps\/embed#?secret=2jSjA33qYb#?secret=PN9IGBNDdg\" data-secret=\"PN9IGBNDdg\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"><\/iframe>\n<\/div><\/figure>\n",
        "date": "2023-03-09 14:06:42",
        "slug": "merging-back-to-develop-after-running-semantic-release",
        "excerpt": "Here is the issue: Normally this isn&#8217;t a big issue other than you develop branch won&#8217;t have the latest changelog info or the correct version in your package.json. For us, we&#8217;re building our Storybook documentation from the develop branch. We&#8217;re pulling the changelog into Storybook so it&#8217;s visible there, but it&#8217;s pulling from the develop [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 405,
        "title": "Using Postman to Access the WordPress.com REST API",
        "content": "<!-- wp:paragraph -->\n<p>Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Set up a GET request to an endpoint. Let's use the <em>\/posts<\/em> endpoint for now:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>https:&#047;&#047;public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you execute the request you will get a response with a list of posts. The field we care about is the content. Currently it only has the rendered version of the content. We need the raw content in order to parse the block information to turn into React components.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To get that info we need to add the <code>context=edit<\/code> parameter to the request:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>https:&#047;&#047;public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts?context=edit<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Uh oh.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>{\n    \"code\": \"rest_forbidden_context\",\n    \"message\": \"Sorry, you are not allowed to edit posts in this post type.\",\n    \"data\": {\n        \"status\": 401\n    }\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now you see why we need authorization.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Authorization with Postman<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>On the <em>Authorization<\/em> tab of the Postman request, select <em>Oauth 2.0<\/em>. On the right hand side you'll see a dropdown with a list of all tokens you have already setup. To create a new token, scroll down to the section <em>Configure New Token<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":416,\"width\":1022,\"height\":541,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm.png?w=1024\" alt=\"\" class=\"wp-image-416\" width=\"1022\" height=\"541\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Fill out the fields appropriately:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Token Name<\/strong><\/td><td>the name you'll refer to this token in the future<\/td><\/tr><tr><td><strong>Grant Type<\/strong><\/td><td><em>Authorization code<\/em><\/td><\/tr><tr><td><strong>Callback URL<\/strong><\/td><td><a href=\"https:\/\/oauth.pstmn.io\/v1\/browser-callback\">https:\/\/oauth.pstmn.io\/v1\/browser-callback<\/a> (now I remember where this url came from!)<\/td><\/tr><tr><td><strong>Auth URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authorize\">https:\/\/public-api.wordpress.com\/oauth2\/authorize<\/a><\/td><\/tr><tr><td><strong>Access Token URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/token\">https:\/\/public-api.wordpress.com\/oauth2\/token<\/a><\/td><\/tr><tr><td><strong>Client ID<\/strong><\/td><td>shows up on your WordPress.com OAuth application page<\/td><\/tr><tr><td><strong>Client Secret<\/strong><\/td><td>shows up on your WordPress.com OAuth application page<\/td><\/tr><\/tbody><\/table><\/figure>\n<!-- \/wp:table -->\n\n<!-- wp:paragraph -->\n<p>Leave the rest of the fields default or blank.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you click <em>Get Access Token<\/em>, Postman will take you through the steps of logging in and authorizing the app. This will result in Postman obtaining your access token.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can now use the token with Postman to make calls to the WordPress.com api that require authentication just by selecting the right token in the authentication tab.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Try executing the get request again. Now you should get the post information but this time with the raw content for the posts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Set Environment Variable<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now that you have the access token, you need to save it in your application as an environmental variable to you can include it in fetch requests as a bearer token.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Create a .env file if you haven't already to be used by NextJS<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Create a new environment variable in your host application platform (Vercel in my case)<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now you're ready to make authenticated calls to the WordPress.com REST API. This is essential for being able to return the raw content of a post where we can rebuild the blocks with React components.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the next post we'll go over how to pull post data and parse the blocks to be able to render as React components.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Set up a GET request to an endpoint. Let's use the <em>\/posts<\/em> endpoint for now:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>https:&#047;&#047;public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you execute the request you will get a response with a list of posts. The field we care about is the content. Currently it only has the rendered version of the content. We need the raw content in order to parse the block information to turn into React components.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>To get that info we need to add the <code>context=edit<\/code> parameter to the request:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>https:&#047;&#047;public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts?context=edit<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Uh oh.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>{\n    \"code\": \"rest_forbidden_context\",\n    \"message\": \"Sorry, you are not allowed to edit posts in this post type.\",\n    \"data\": {\n        \"status\": 401\n    }\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now you see why we need authorization.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Authorization with Postman<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>On the <em>Authorization<\/em> tab of the Postman request, select <em>Oauth 2.0<\/em>. On the right hand side you'll see a dropdown with a list of all tokens you have already setup. To create a new token, scroll down to the section <em>Configure New Token<\/em>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 416,
                    "width": 1022,
                    "height": 541,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm.png?w=1024\" alt=\"\" class=\"wp-image-416\" width=\"1022\" height=\"541\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2022,
                    "height": 1070,
                    "file": "2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm.png",
                    "filesize": 132855,
                    "sizes": {
                        "medium": {
                            "file": "screen-shot-2023-03-05-at-4.01.02-pm-300x159.png",
                            "width": 300,
                            "height": 159,
                            "mime-type": "image\/png",
                            "filesize": 15919
                        },
                        "large": {
                            "file": "screen-shot-2023-03-05-at-4.01.02-pm-1024x542.png",
                            "width": 1024,
                            "height": 542,
                            "mime-type": "image\/png",
                            "filesize": 111804
                        },
                        "thumbnail": {
                            "file": "screen-shot-2023-03-05-at-4.01.02-pm-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 8428
                        },
                        "medium_large": {
                            "file": "screen-shot-2023-03-05-at-4.01.02-pm-768x406.png",
                            "width": 768,
                            "height": 406,
                            "mime-type": "image\/png",
                            "filesize": 73395
                        },
                        "1536x1536": {
                            "file": "screen-shot-2023-03-05-at-4.01.02-pm-1536x813.png",
                            "width": 1536,
                            "height": 813,
                            "mime-type": "image\/png",
                            "filesize": 202213
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Fill out the fields appropriately:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/table",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Token Name<\/strong><\/td><td>the name you'll refer to this token in the future<\/td><\/tr><tr><td><strong>Grant Type<\/strong><\/td><td><em>Authorization code<\/em><\/td><\/tr><tr><td><strong>Callback URL<\/strong><\/td><td><a href=\"https:\/\/oauth.pstmn.io\/v1\/browser-callback\">https:\/\/oauth.pstmn.io\/v1\/browser-callback<\/a> (now I remember where this url came from!)<\/td><\/tr><tr><td><strong>Auth URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authorize\">https:\/\/public-api.wordpress.com\/oauth2\/authorize<\/a><\/td><\/tr><tr><td><strong>Access Token URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/token\">https:\/\/public-api.wordpress.com\/oauth2\/token<\/a><\/td><\/tr><tr><td><strong>Client ID<\/strong><\/td><td>shows up on your WordPress.com OAuth application page<\/td><\/tr><tr><td><strong>Client Secret<\/strong><\/td><td>shows up on your WordPress.com OAuth application page<\/td><\/tr><\/tbody><\/table><\/figure>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Leave the rest of the fields default or blank.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When you click <em>Get Access Token<\/em>, Postman will take you through the steps of logging in and authorizing the app. This will result in Postman obtaining your access token.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You can now use the token with Postman to make calls to the WordPress.com api that require authentication just by selecting the right token in the authentication tab.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Try executing the get request again. Now you should get the post information but this time with the raw content for the posts.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Set Environment Variable<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now that you have the access token, you need to save it in your application as an environmental variable to you can include it in fetch requests as a bearer token.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Create a .env file if you haven't already to be used by NextJS<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Create a new environment variable in your host application platform (Vercel in my case)<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now you're ready to make authenticated calls to the WordPress.com REST API. This is essential for being able to return the raw content of a post where we can rebuild the blocks with React components.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In the next post we'll go over how to pull post data and parse the blocks to be able to render as React components.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure.<\/p>\n\n\n\n<p>In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests.<\/p>\n\n\n\n<p>Set up a GET request to an endpoint. Let&#8217;s use the <em>\/posts<\/em> endpoint for now:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>https:&#047;&#047;public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts<\/code><\/pre>\n\n\n\n<p>If you execute the request you will get a response with a list of posts. The field we care about is the content. Currently it only has the rendered version of the content. We need the raw content in order to parse the block information to turn into React components.<\/p>\n\n\n\n<p>To get that info we need to add the <code>context=edit<\/code> parameter to the request:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>https:&#047;&#047;public-api.wordpress.com\/wp\/v2\/sites\/jeremyrichardson.home.blog\/posts?context=edit<\/code><\/pre>\n\n\n\n<p>Uh oh.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>{\n    \"code\": \"rest_forbidden_context\",\n    \"message\": \"Sorry, you are not allowed to edit posts in this post type.\",\n    \"data\": {\n        \"status\": 401\n    }\n}<\/code><\/pre>\n\n\n\n<p>Now you see why we need authorization.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Authorization with Postman<\/h2>\n\n\n\n<p>On the <em>Authorization<\/em> tab of the Postman request, select <em>Oauth 2.0<\/em>. On the right hand side you&#8217;ll see a dropdown with a list of all tokens you have already setup. To create a new token, scroll down to the section <em>Configure New Token<\/em>.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm.png?w=1024\" alt=\"\" class=\"wp-image-416\" width=\"1022\" height=\"541\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm.png 2022w, http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm-300x159.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm-1024x542.png 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm-768x406.png 768w, http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-4.01.02-pm-1536x813.png 1536w\" sizes=\"(max-width: 1022px) 100vw, 1022px\" \/><\/figure>\n\n\n\n<p>Fill out the fields appropriately:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Token Name<\/strong><\/td><td>the name you&#8217;ll refer to this token in the future<\/td><\/tr><tr><td><strong>Grant Type<\/strong><\/td><td><em>Authorization code<\/em><\/td><\/tr><tr><td><strong>Callback URL<\/strong><\/td><td><a href=\"https:\/\/oauth.pstmn.io\/v1\/browser-callback\">https:\/\/oauth.pstmn.io\/v1\/browser-callback<\/a> (now I remember where this url came from!)<\/td><\/tr><tr><td><strong>Auth URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authorize\">https:\/\/public-api.wordpress.com\/oauth2\/authorize<\/a><\/td><\/tr><tr><td><strong>Access Token URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/token\">https:\/\/public-api.wordpress.com\/oauth2\/token<\/a><\/td><\/tr><tr><td><strong>Client ID<\/strong><\/td><td>shows up on your WordPress.com OAuth application page<\/td><\/tr><tr><td><strong>Client Secret<\/strong><\/td><td>shows up on your WordPress.com OAuth application page<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Leave the rest of the fields default or blank.<\/p>\n\n\n\n<p>When you click <em>Get Access Token<\/em>, Postman will take you through the steps of logging in and authorizing the app. This will result in Postman obtaining your access token.<\/p>\n\n\n\n<p>You can now use the token with Postman to make calls to the WordPress.com api that require authentication just by selecting the right token in the authentication tab.<\/p>\n\n\n\n<p>Try executing the get request again. Now you should get the post information but this time with the raw content for the posts.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Set Environment Variable<\/h2>\n\n\n\n<p>Now that you have the access token, you need to save it in your application as an environmental variable to you can include it in fetch requests as a bearer token.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Create a .env file if you haven&#8217;t already to be used by NextJS<\/li>\n\n\n\n<li>Create a new environment variable in your host application platform (Vercel in my case)<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n\n\n\n<p>Now you&#8217;re ready to make authenticated calls to the WordPress.com REST API. This is essential for being able to return the raw content of a post where we can rebuild the blocks with React components.<\/p>\n\n\n\n<p>In the next post we&#8217;ll go over how to pull post data and parse the blocks to be able to render as React components.<\/p>\n",
        "date": "2023-03-06 03:58:19",
        "slug": "using-postman-to-access-the-wordpress-com-rest-api",
        "excerpt": "Postman is a great tool for working with REST APIs. It allows us to test out endpoints without having to setup a bunch of infrastructure. In order to unlock access to all the WordPress.com endpoints and data we will need to generate an access token to send with our requests. Set up a GET request [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 389,
        "title": "Setup OAuth with WordPress.com to use as headless CMS",
        "content": "<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Documentation - <a href=\"https:\/\/developer.wordpress.com\/docs\/oauth2\/\">https:\/\/developer.wordpress.com\/docs\/oauth2\/<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Apps URL - <a href=\"https:\/\/developer.wordpress.com\/apps\/\">https:\/\/developer.wordpress.com\/apps\/<\/a><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>WordPress.com REST url - https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/nameofblog<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>This is the first in a series of posts that will cover my recent conversion from using markdown files for my blog posts to using WordPress.com as a headless CMS. The reasoning for using WordPress.com is to get the benefit of the Gutenberg editor without needing to host my own WordPress site just for content editing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Setting up an <em>application<\/em><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The term <em>application<\/em> can be confusing to those new to the concept of OAuth. The application in some ways is like the <em>user<\/em> account in a normal login setup. In my case, the application is my blog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:image {\"id\":408,\"width\":1023,\"height\":642,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm.png?w=1024\" alt=\"\" class=\"wp-image-408\" width=\"1023\" height=\"642\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>WordPress.com OAuth applications can be setup at <a href=\"https:\/\/developer.wordpress.com\/apps\">https:\/\/developer.wordpress.com\/apps<\/a> We need to supply a couple of things to setup the application:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Redirect URLs<\/strong><\/td><td><a href=\"https:\/\/oauth.pstmn.io\/v1\/browser-callback\">https:\/\/oauth.pstmn.io\/v1\/browser-callback<\/a><\/td><\/tr><tr><td><strong>Javascript Origins<\/strong><\/td><td><a href=\"https:\/\/www.jeremyrichardson.dev\">https:\/\/www.jeremyrichardson.dev<\/a>, http:\/\/localhost:3000<\/td><\/tr><tr><td><strong>Type<\/strong><\/td><td>Web<\/td><\/tr><tr><td><strong>Request token URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/token\">https:\/\/public-api.wordpress.com\/oauth2\/token<\/a><\/td><\/tr><tr><td><strong>Authorize URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authorize\">https:\/\/public-api.wordpress.com\/oauth2\/authorize<\/a><\/td><\/tr><tr><td><strong>Authenticate URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authenticate\">https:\/\/public-api.wordpress.com\/oauth2\/authenticate<\/a><\/td><\/tr><\/tbody><\/table><\/figure>\n<!-- \/wp:table -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Redirect URLs<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I use Postman to make the call in order to get the token. In that case we need to use the Postman url since that is what the WordPress.com app will redirect to to complete the authentication.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>NOTE: I can't remember exactly how I got that url, but it was Postman that suggested it to me. In the future I would confirm that url is correct and not just copy it from this blog.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Javascript Origins<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is required for CORS compliance. If your website will be making REST API calls from the client browser, this is necessary. However, in my case I am making the calls at build time in the NextJS <code>getStaticProps<\/code> function. That function runs on a node server and therefore CORS restrictions don't apply.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I added my website url and localhost anyway in case I need to make calls from the client in the future.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Request, Authorize, Authenticate URLs<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>These URLs are specific to WordPress.com. We will plug these URLs into Postman in order to request our access token.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Next Steps<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now that we have a WordPress.com OAuth application we can request our access token that we will use to access authorized resources on the REST API.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Documentation - <a href=\"https:\/\/developer.wordpress.com\/docs\/oauth2\/\">https:\/\/developer.wordpress.com\/docs\/oauth2\/<\/a><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Apps URL - <a href=\"https:\/\/developer.wordpress.com\/apps\/\">https:\/\/developer.wordpress.com\/apps\/<\/a><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>WordPress.com REST url - https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/nameofblog<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is the first in a series of posts that will cover my recent conversion from using markdown files for my blog posts to using WordPress.com as a headless CMS. The reasoning for using WordPress.com is to get the benefit of the Gutenberg editor without needing to host my own WordPress site just for content editing.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Setting up an <em>application<\/em><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The term <em>application<\/em> can be confusing to those new to the concept of OAuth. The application in some ways is like the <em>user<\/em> account in a normal login setup. In my case, the application is my blog.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 408,
                    "width": 1023,
                    "height": 642,
                    "sizeSlug": "large",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm.png?w=1024\" alt=\"\" class=\"wp-image-408\" width=\"1023\" height=\"642\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 1322,
                    "height": 830,
                    "file": "2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm.png",
                    "filesize": 57305,
                    "sizes": {
                        "medium": {
                            "file": "screen-shot-2023-03-05-at-9.38.19-pm-300x188.png",
                            "width": 300,
                            "height": 188,
                            "mime-type": "image\/png",
                            "filesize": 14185
                        },
                        "large": {
                            "file": "screen-shot-2023-03-05-at-9.38.19-pm-1024x643.png",
                            "width": 1024,
                            "height": 643,
                            "mime-type": "image\/png",
                            "filesize": 75980
                        },
                        "thumbnail": {
                            "file": "screen-shot-2023-03-05-at-9.38.19-pm-150x150.png",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/png",
                            "filesize": 7109
                        },
                        "medium_large": {
                            "file": "screen-shot-2023-03-05-at-9.38.19-pm-768x482.png",
                            "width": 768,
                            "height": 482,
                            "mime-type": "image\/png",
                            "filesize": 52111
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    }
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>WordPress.com OAuth applications can be setup at <a href=\"https:\/\/developer.wordpress.com\/apps\">https:\/\/developer.wordpress.com\/apps<\/a> We need to supply a couple of things to setup the application:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/table",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Redirect URLs<\/strong><\/td><td><a href=\"https:\/\/oauth.pstmn.io\/v1\/browser-callback\">https:\/\/oauth.pstmn.io\/v1\/browser-callback<\/a><\/td><\/tr><tr><td><strong>Javascript Origins<\/strong><\/td><td><a href=\"https:\/\/www.jeremyrichardson.dev\">https:\/\/www.jeremyrichardson.dev<\/a>, http:\/\/localhost:3000<\/td><\/tr><tr><td><strong>Type<\/strong><\/td><td>Web<\/td><\/tr><tr><td><strong>Request token URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/token\">https:\/\/public-api.wordpress.com\/oauth2\/token<\/a><\/td><\/tr><tr><td><strong>Authorize URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authorize\">https:\/\/public-api.wordpress.com\/oauth2\/authorize<\/a><\/td><\/tr><tr><td><strong>Authenticate URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authenticate\">https:\/\/public-api.wordpress.com\/oauth2\/authenticate<\/a><\/td><\/tr><\/tbody><\/table><\/figure>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Redirect URLs<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I use Postman to make the call in order to get the token. In that case we need to use the Postman url since that is what the WordPress.com app will redirect to to complete the authentication.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>NOTE: I can't remember exactly how I got that url, but it was Postman that suggested it to me. In the future I would confirm that url is correct and not just copy it from this blog.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Javascript Origins<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is required for CORS compliance. If your website will be making REST API calls from the client browser, this is necessary. However, in my case I am making the calls at build time in the NextJS <code>getStaticProps<\/code> function. That function runs on a node server and therefore CORS restrictions don't apply.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I added my website url and localhost anyway in case I need to make calls from the client in the future.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Request, Authorize, Authenticate URLs<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>These URLs are specific to WordPress.com. We will plug these URLs into Postman in order to request our access token.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Next Steps<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now that we have a WordPress.com OAuth application we can request our access token that we will use to access authorized resources on the REST API.<\/p>\n"
            }
        ],
        "rendered_content": "\n<ul class=\"wp-block-list\">\n<li>Documentation &#8211; <a href=\"https:\/\/developer.wordpress.com\/docs\/oauth2\/\">https:\/\/developer.wordpress.com\/docs\/oauth2\/<\/a><\/li>\n\n\n\n<li>Apps URL &#8211; <a href=\"https:\/\/developer.wordpress.com\/apps\/\">https:\/\/developer.wordpress.com\/apps\/<\/a><\/li>\n\n\n\n<li>WordPress.com REST url &#8211; https:\/\/public-api.wordpress.com\/wp\/v2\/sites\/nameofblog<\/li>\n<\/ul>\n\n\n\n<p>This is the first in a series of posts that will cover my recent conversion from using markdown files for my blog posts to using WordPress.com as a headless CMS. The reasoning for using WordPress.com is to get the benefit of the Gutenberg editor without needing to host my own WordPress site just for content editing.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Setting up an <em>application<\/em><\/h2>\n\n\n\n<p>The term <em>application<\/em> can be confusing to those new to the concept of OAuth. The application in some ways is like the <em>user<\/em> account in a normal login setup. In my case, the application is my blog.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm.png?w=1024\" alt=\"\" class=\"wp-image-408\" width=\"1023\" height=\"642\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm.png 1322w, http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm-300x188.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm-1024x643.png 1024w, http:\/\/localhost:8881\/wp-content\/uploads\/2023\/03\/screen-shot-2023-03-05-at-9.38.19-pm-768x482.png 768w\" sizes=\"(max-width: 1023px) 100vw, 1023px\" \/><\/figure>\n\n\n\n<p>WordPress.com OAuth applications can be setup at <a href=\"https:\/\/developer.wordpress.com\/apps\">https:\/\/developer.wordpress.com\/apps<\/a> We need to supply a couple of things to setup the application:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Redirect URLs<\/strong><\/td><td><a href=\"https:\/\/oauth.pstmn.io\/v1\/browser-callback\">https:\/\/oauth.pstmn.io\/v1\/browser-callback<\/a><\/td><\/tr><tr><td><strong>Javascript Origins<\/strong><\/td><td><a href=\"https:\/\/www.jeremyrichardson.dev\">https:\/\/www.jeremyrichardson.dev<\/a>, http:\/\/localhost:3000<\/td><\/tr><tr><td><strong>Type<\/strong><\/td><td>Web<\/td><\/tr><tr><td><strong>Request token URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/token\">https:\/\/public-api.wordpress.com\/oauth2\/token<\/a><\/td><\/tr><tr><td><strong>Authorize URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authorize\">https:\/\/public-api.wordpress.com\/oauth2\/authorize<\/a><\/td><\/tr><tr><td><strong>Authenticate URL<\/strong><\/td><td><a href=\"https:\/\/public-api.wordpress.com\/oauth2\/authenticate\">https:\/\/public-api.wordpress.com\/oauth2\/authenticate<\/a><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">Redirect URLs<\/h3>\n\n\n\n<p>I use Postman to make the call in order to get the token. In that case we need to use the Postman url since that is what the WordPress.com app will redirect to to complete the authentication.<\/p>\n\n\n\n<p>NOTE: I can&#8217;t remember exactly how I got that url, but it was Postman that suggested it to me. In the future I would confirm that url is correct and not just copy it from this blog.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Javascript Origins<\/h3>\n\n\n\n<p>This is required for CORS compliance. If your website will be making REST API calls from the client browser, this is necessary. However, in my case I am making the calls at build time in the NextJS <code>getStaticProps<\/code> function. That function runs on a node server and therefore CORS restrictions don&#8217;t apply.<\/p>\n\n\n\n<p>I added my website url and localhost anyway in case I need to make calls from the client in the future.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Request, Authorize, Authenticate URLs<\/h3>\n\n\n\n<p>These URLs are specific to WordPress.com. We will plug these URLs into Postman in order to request our access token.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Next Steps<\/h2>\n\n\n\n<p>Now that we have a WordPress.com OAuth application we can request our access token that we will use to access authorized resources on the REST API.<\/p>\n",
        "date": "2023-03-06 03:41:14",
        "slug": "setup-oauth-with-wordpress-com-to-use-as-headless-cms",
        "excerpt": "This is the first in a series of posts that will cover my recent conversion from using markdown files for my blog posts to using WordPress.com as a headless CMS. The reasoning for using WordPress.com is to get the benefit of the Gutenberg editor without needing to host my own WordPress site just for content [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 320,
        "title": "How to detect if a site loads React",
        "content": "<!-- wp:paragraph -->\n<p>I recently needed a way to figure out if React was being loaded on various different pages of a site. The first script I found didn't work, which basically looked to see if React was attached to the window object.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, I did find this script that does work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>if (\n  Array.from(document.querySelectorAll(\"*\")).some(\n    (e) =&gt; e._reactRootContainer !== undefined\n  )\n) {\n  console.log(\"React.js\");\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>What it can't determine is if there are multiple versions of React running on a page, which is something I would like to be able to detect, if that makes sense. Is that possible?<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I recently needed a way to figure out if React was being loaded on various different pages of a site. The first script I found didn't work, which basically looked to see if React was attached to the window object.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>However, I did find this script that does work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>if (\n  Array.from(document.querySelectorAll(\"*\")).some(\n    (e) =&gt; e._reactRootContainer !== undefined\n  )\n) {\n  console.log(\"React.js\");\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>What it can't determine is if there are multiple versions of React running on a page, which is something I would like to be able to detect, if that makes sense. Is that possible?<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I recently needed a way to figure out if React was being loaded on various different pages of a site. The first script I found didn&#8217;t work, which basically looked to see if React was attached to the window object.<\/p>\n\n\n\n<p>However, I did find this script that does work.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>if (\n  Array.from(document.querySelectorAll(\"*\")).some(\n    (e) =&gt; e._reactRootContainer !== undefined\n  )\n) {\n  console.log(\"React.js\");\n}<\/code><\/pre>\n\n\n\n<p>What it can&#8217;t determine is if there are multiple versions of React running on a page, which is something I would like to be able to detect, if that makes sense. Is that possible?<\/p>\n",
        "date": "2023-02-28 21:58:28",
        "slug": "how-to-detect-if-a-site-loads-react",
        "excerpt": "I recently needed a way to figure out if React was being loaded on various different pages of a site. The first script I found didn&#8217;t work, which basically looked to see if React was attached to the window object. However, I did find this script that does work. What it can&#8217;t determine is if [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 381,
        "title": "The saga of learning the exports property in package.json",
        "content": "<!-- wp:paragraph -->\n<p>This is here to document the steps I went through to come to the conclusion that ESM exports syntax in package.json is not ready for use.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Use case<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our use case is for an internal component library that we want to supply to other projects. Ideally we want to export this as a TypeScript library so the project itself can do the bundling and make smart decisions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We don\u2019t need to support a lot of legacy projects so ideally I was trying to go all in on EcmaScript modules. Unfortunately, in our use case, we still can\u2019t do that.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Exports<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The exports property in package.json is supposed to allow you to define aliases for your package.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/nodejs.org\/api\/packages.html#exports<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Module Resolution and TypeScript<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The exports property in package.json is part of the esm specification. In order to make it work with TypeScript you need to specify&nbsp;<code>moduleResolution: node16<\/code>&nbsp;or&nbsp;<code>moduleResolution: nodenext<\/code>&nbsp;(didn't figure out the difference between the two yet...) in tsconfig. This has other repercussions that can affect how modules are processed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">NextJS and the component library<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you set&nbsp;<code>moduleResolution: node16<\/code>&nbsp;in the tsconfig it allows you to import the component library when it is using the exports field. However, it throws an error that the component library is an es module and the Next environment is running in CommonJS.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you set the NextJS project as an es module by specifying&nbsp;<code>type: module<\/code>&nbsp;in package.json it will allow the component library to be imported properly but then for some reason all of the NextJS native imports start failing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It should be noted it is something to do with the combination of&nbsp;<code>type: module<\/code>&nbsp;and&nbsp;<code>moduleResolution:node16<\/code>&nbsp;as either one of those settings set by themselves works with a plain NextJS project. If you do set&nbsp;<code>type: module<\/code>&nbsp;you will need to rename&nbsp;<code>next.config.js<\/code>&nbsp;to&nbsp;<code>next.config.cjs<\/code>&nbsp;as it can only exist as a CommonJS module.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It seems as though NextJS is moving towards being built in ESM natively but that is most likely some time off. Hopefully that will clear up the issues and we will be able to go completely ESM. But that is not possible currently.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">How to Test<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Don\u2019t trust VS code for your errors when debugging. I found it to be misleading and often just plain wrong. The only effective way to know if your code is working while playing with module resolution is to use&nbsp;<code>npm run build<\/code>&nbsp;for NextJS projects.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Transpile modules<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For some reason when using the exports field of package.json for the component library, when trying to build with NextJS it acts like it can\u2019t understand TypeScript. This normally would happen if you don\u2019t have&nbsp;<code>transpilePackages: [\"@ourorg\/componentlibrary\"]<\/code>&nbsp;set in next.config.js, but even with transpilePackages set it still doesn\u2019t seem to work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The native transpileModules that was introduced in NextJS 13.1 doesn\u2019t seem as fully featured as the previous module that was used to do this -&nbsp;<a href=\"https:\/\/github.com\/martpie\/next-transpile-modules\/tree\/the-end\">https:\/\/github.com\/martpie\/next-transpile-modules\/tree\/the-end<\/a>&nbsp;. I actually found the documentation here more helpful as well as the NextJS documentation is quite thin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Filename extensions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the few combinations where I was able to get things kind of working I ran into a weird ESM issue where you need to specify file extensions with your imports. It wouldn\u2019t be an issue if we weren\u2019t using TypeScript but for some reason you can\u2019t specify a file extension other than .js. It was kind of hacky because I could actually specify Component.js even though the actual file was Component.tsx and it would work. That was too weird for me and definitely too much tech debt to take on.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Resources<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I found a great resource on Github that describes exactly the issues with ESM and some possible workarounds. All I was after was being able to have subpath exports so I could logically divide up our library in a way that makes sense.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/github.com\/andrewbranch\/example-subpath-exports-ts-compat<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I ended up choosing the extensionless option for our use case. It muddies up the root of our component library repo slightly but the tradeoff is worth it in my opinion.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Subpath exports with extensionless method<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>What I wanted to end up with is imports that follow the pattern:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>import { Button } from \"@ourorg\/componentlibrary\/components\";\nimport { icons, theme } from \"@ourorg\/componentlibrary\/theme1\";<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We can accomplish this by creating ts files named with the subpath we\u2019re looking for. In this case we would have two files in the root of our component library called&nbsp;<code>components.ts<\/code>&nbsp;and&nbsp;<code>theme1.ts<\/code>. Those files will just be barrel files with export statements that pull in the appropriate modules we need.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Make sure in the package.json of your component library that you either don\u2019t specify the files property or set it to&nbsp;<code>\"files\": \"[*]\"<\/code>&nbsp;otherwise the source files you need will not be there.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>My conclusion was that the exports field of package.json is not ready for use with our NextJS projects. Maybe when NextJS goes totally in on ESM, but until then we\u2019re stuck with old<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ChatGPT explains the history of the exports property<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This was helpful to understand a little of the history behind the exports field. ChatGPT is definitely more optimistic than I am on using the exports field in real world projects. Looking forward to the day when CommonJS is just a memory.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">What is the history of the package.json exports property?<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property in the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file is a relatively recent addition to the Node.js ecosystem, and it was introduced as part of the ECMAScript Modules (ESM) specification, which was added to Node.js in version 12.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Prior to the introduction of ESM, Node.js relied on the CommonJS module system, which used the&nbsp;<strong><code>module.exports<\/code><\/strong>&nbsp;and&nbsp;<strong><code>require()<\/code><\/strong>&nbsp;functions to define and load modules, respectively. With the introduction of ESM, however, a new syntax and module system was introduced, which used&nbsp;<strong><code>import<\/code><\/strong>&nbsp;and&nbsp;<strong><code>export<\/code><\/strong>&nbsp;statements to define and load modules.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To maintain compatibility between the two module systems, the&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was added to the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file. This property allows module authors to specify how their module should be loaded in both the CommonJS and ESM systems.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property can be used to define a single entry point for the module, as well as alternate entry points for different module systems or environments. For example, a module author can specify that their module should be loaded using&nbsp;<strong><code>require()<\/code><\/strong>&nbsp;in a CommonJS environment, but using an&nbsp;<strong><code>import<\/code><\/strong>&nbsp;statement in an ESM environment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was first proposed in 2018 as part of a larger effort to bring ESM support to Node.js. The proposal was eventually accepted, and the&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was added to the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file in Node.js version 12.10.0. Since then, it has become a widely used feature of the Node.js ecosystem, allowing developers to write modules that work seamlessly across different module systems and environments.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is here to document the steps I went through to come to the conclusion that ESM exports syntax in package.json is not ready for use.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Use case<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Our use case is for an internal component library that we want to supply to other projects. Ideally we want to export this as a TypeScript library so the project itself can do the bundling and make smart decisions.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We don\u2019t need to support a lot of legacy projects so ideally I was trying to go all in on EcmaScript modules. Unfortunately, in our use case, we still can\u2019t do that.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Exports<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The exports property in package.json is supposed to allow you to define aliases for your package.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/nodejs.org\/api\/packages.html#exports<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Module Resolution and TypeScript<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The exports property in package.json is part of the esm specification. In order to make it work with TypeScript you need to specify&nbsp;<code>moduleResolution: node16<\/code>&nbsp;or&nbsp;<code>moduleResolution: nodenext<\/code>&nbsp;(didn't figure out the difference between the two yet...) in tsconfig. This has other repercussions that can affect how modules are processed.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">NextJS and the component library<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When you set&nbsp;<code>moduleResolution: node16<\/code>&nbsp;in the tsconfig it allows you to import the component library when it is using the exports field. However, it throws an error that the component library is an es module and the Next environment is running in CommonJS.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you set the NextJS project as an es module by specifying&nbsp;<code>type: module<\/code>&nbsp;in package.json it will allow the component library to be imported properly but then for some reason all of the NextJS native imports start failing.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It should be noted it is something to do with the combination of&nbsp;<code>type: module<\/code>&nbsp;and&nbsp;<code>moduleResolution:node16<\/code>&nbsp;as either one of those settings set by themselves works with a plain NextJS project. If you do set&nbsp;<code>type: module<\/code>&nbsp;you will need to rename&nbsp;<code>next.config.js<\/code>&nbsp;to&nbsp;<code>next.config.cjs<\/code>&nbsp;as it can only exist as a CommonJS module.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It seems as though NextJS is moving towards being built in ESM natively but that is most likely some time off. Hopefully that will clear up the issues and we will be able to go completely ESM. But that is not possible currently.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">How to Test<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Don\u2019t trust VS code for your errors when debugging. I found it to be misleading and often just plain wrong. The only effective way to know if your code is working while playing with module resolution is to use&nbsp;<code>npm run build<\/code>&nbsp;for NextJS projects.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Transpile modules<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For some reason when using the exports field of package.json for the component library, when trying to build with NextJS it acts like it can\u2019t understand TypeScript. This normally would happen if you don\u2019t have&nbsp;<code>transpilePackages: [\"@ourorg\/componentlibrary\"]<\/code>&nbsp;set in next.config.js, but even with transpilePackages set it still doesn\u2019t seem to work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The native transpileModules that was introduced in NextJS 13.1 doesn\u2019t seem as fully featured as the previous module that was used to do this -&nbsp;<a href=\"https:\/\/github.com\/martpie\/next-transpile-modules\/tree\/the-end\">https:\/\/github.com\/martpie\/next-transpile-modules\/tree\/the-end<\/a>&nbsp;. I actually found the documentation here more helpful as well as the NextJS documentation is quite thin.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Filename extensions<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In the few combinations where I was able to get things kind of working I ran into a weird ESM issue where you need to specify file extensions with your imports. It wouldn\u2019t be an issue if we weren\u2019t using TypeScript but for some reason you can\u2019t specify a file extension other than .js. It was kind of hacky because I could actually specify Component.js even though the actual file was Component.tsx and it would work. That was too weird for me and definitely too much tech debt to take on.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Resources<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I found a great resource on Github that describes exactly the issues with ESM and some possible workarounds. All I was after was being able to have subpath exports so I could logically divide up our library in a way that makes sense.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/github.com\/andrewbranch\/example-subpath-exports-ts-compat<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I ended up choosing the extensionless option for our use case. It muddies up the root of our component library repo slightly but the tradeoff is worth it in my opinion.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Subpath exports with extensionless method<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>What I wanted to end up with is imports that follow the pattern:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>import { Button } from \"@ourorg\/componentlibrary\/components\";\nimport { icons, theme } from \"@ourorg\/componentlibrary\/theme1\";<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We can accomplish this by creating ts files named with the subpath we\u2019re looking for. In this case we would have two files in the root of our component library called&nbsp;<code>components.ts<\/code>&nbsp;and&nbsp;<code>theme1.ts<\/code>. Those files will just be barrel files with export statements that pull in the appropriate modules we need.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Make sure in the package.json of your component library that you either don\u2019t specify the files property or set it to&nbsp;<code>\"files\": \"[*]\"<\/code>&nbsp;otherwise the source files you need will not be there.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>My conclusion was that the exports field of package.json is not ready for use with our NextJS projects. Maybe when NextJS goes totally in on ESM, but until then we\u2019re stuck with old<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">ChatGPT explains the history of the exports property<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This was helpful to understand a little of the history behind the exports field. ChatGPT is definitely more optimistic than I am on using the exports field in real world projects. Looking forward to the day when CommonJS is just a memory.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">What is the history of the package.json exports property?<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property in the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file is a relatively recent addition to the Node.js ecosystem, and it was introduced as part of the ECMAScript Modules (ESM) specification, which was added to Node.js in version 12.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Prior to the introduction of ESM, Node.js relied on the CommonJS module system, which used the&nbsp;<strong><code>module.exports<\/code><\/strong>&nbsp;and&nbsp;<strong><code>require()<\/code><\/strong>&nbsp;functions to define and load modules, respectively. With the introduction of ESM, however, a new syntax and module system was introduced, which used&nbsp;<strong><code>import<\/code><\/strong>&nbsp;and&nbsp;<strong><code>export<\/code><\/strong>&nbsp;statements to define and load modules.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>To maintain compatibility between the two module systems, the&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was added to the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file. This property allows module authors to specify how their module should be loaded in both the CommonJS and ESM systems.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property can be used to define a single entry point for the module, as well as alternate entry points for different module systems or environments. For example, a module author can specify that their module should be loaded using&nbsp;<strong><code>require()<\/code><\/strong>&nbsp;in a CommonJS environment, but using an&nbsp;<strong><code>import<\/code><\/strong>&nbsp;statement in an ESM environment.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was first proposed in 2018 as part of a larger effort to bring ESM support to Node.js. The proposal was eventually accepted, and the&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was added to the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file in Node.js version 12.10.0. Since then, it has become a widely used feature of the Node.js ecosystem, allowing developers to write modules that work seamlessly across different module systems and environments.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>This is here to document the steps I went through to come to the conclusion that ESM exports syntax in package.json is not ready for use.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Use case<\/h2>\n\n\n\n<p>Our use case is for an internal component library that we want to supply to other projects. Ideally we want to export this as a TypeScript library so the project itself can do the bundling and make smart decisions.<\/p>\n\n\n\n<p>We don\u2019t need to support a lot of legacy projects so ideally I was trying to go all in on EcmaScript modules. Unfortunately, in our use case, we still can\u2019t do that.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Exports<\/h2>\n\n\n\n<p>The exports property in package.json is supposed to allow you to define aliases for your package.<\/p>\n\n\n\n<p>https:\/\/nodejs.org\/api\/packages.html#exports<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Module Resolution and TypeScript<\/h3>\n\n\n\n<p>The exports property in package.json is part of the esm specification. In order to make it work with TypeScript you need to specify&nbsp;<code>moduleResolution: node16<\/code>&nbsp;or&nbsp;<code>moduleResolution: nodenext<\/code>&nbsp;(didn&#8217;t figure out the difference between the two yet&#8230;) in tsconfig. This has other repercussions that can affect how modules are processed.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">NextJS and the component library<\/h3>\n\n\n\n<p>When you set&nbsp;<code>moduleResolution: node16<\/code>&nbsp;in the tsconfig it allows you to import the component library when it is using the exports field. However, it throws an error that the component library is an es module and the Next environment is running in CommonJS.<\/p>\n\n\n\n<p>If you set the NextJS project as an es module by specifying&nbsp;<code>type: module<\/code>&nbsp;in package.json it will allow the component library to be imported properly but then for some reason all of the NextJS native imports start failing.<\/p>\n\n\n\n<p>It should be noted it is something to do with the combination of&nbsp;<code>type: module<\/code>&nbsp;and&nbsp;<code>moduleResolution:node16<\/code>&nbsp;as either one of those settings set by themselves works with a plain NextJS project. If you do set&nbsp;<code>type: module<\/code>&nbsp;you will need to rename&nbsp;<code>next.config.js<\/code>&nbsp;to&nbsp;<code>next.config.cjs<\/code>&nbsp;as it can only exist as a CommonJS module.<\/p>\n\n\n\n<p>It seems as though NextJS is moving towards being built in ESM natively but that is most likely some time off. Hopefully that will clear up the issues and we will be able to go completely ESM. But that is not possible currently.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">How to Test<\/h3>\n\n\n\n<p>Don\u2019t trust VS code for your errors when debugging. I found it to be misleading and often just plain wrong. The only effective way to know if your code is working while playing with module resolution is to use&nbsp;<code>npm run build<\/code>&nbsp;for NextJS projects.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Transpile modules<\/h3>\n\n\n\n<p>For some reason when using the exports field of package.json for the component library, when trying to build with NextJS it acts like it can\u2019t understand TypeScript. This normally would happen if you don\u2019t have&nbsp;<code>transpilePackages: [\"@ourorg\/componentlibrary\"]<\/code>&nbsp;set in next.config.js, but even with transpilePackages set it still doesn\u2019t seem to work.<\/p>\n\n\n\n<p>The native transpileModules that was introduced in NextJS 13.1 doesn\u2019t seem as fully featured as the previous module that was used to do this &#8211;&nbsp;<a href=\"https:\/\/github.com\/martpie\/next-transpile-modules\/tree\/the-end\">https:\/\/github.com\/martpie\/next-transpile-modules\/tree\/the-end<\/a>&nbsp;. I actually found the documentation here more helpful as well as the NextJS documentation is quite thin.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Filename extensions<\/h3>\n\n\n\n<p>In the few combinations where I was able to get things kind of working I ran into a weird ESM issue where you need to specify file extensions with your imports. It wouldn\u2019t be an issue if we weren\u2019t using TypeScript but for some reason you can\u2019t specify a file extension other than .js. It was kind of hacky because I could actually specify Component.js even though the actual file was Component.tsx and it would work. That was too weird for me and definitely too much tech debt to take on.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Resources<\/h2>\n\n\n\n<p>I found a great resource on Github that describes exactly the issues with ESM and some possible workarounds. All I was after was being able to have subpath exports so I could logically divide up our library in a way that makes sense.<\/p>\n\n\n\n<p>https:\/\/github.com\/andrewbranch\/example-subpath-exports-ts-compat<\/p>\n\n\n\n<p>I ended up choosing the extensionless option for our use case. It muddies up the root of our component library repo slightly but the tradeoff is worth it in my opinion.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Subpath exports with extensionless method<\/h3>\n\n\n\n<p>What I wanted to end up with is imports that follow the pattern:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>import { Button } from \"@ourorg\/componentlibrary\/components\";\nimport { icons, theme } from \"@ourorg\/componentlibrary\/theme1\";<\/code><\/pre>\n\n\n\n<p>We can accomplish this by creating ts files named with the subpath we\u2019re looking for. In this case we would have two files in the root of our component library called&nbsp;<code>components.ts<\/code>&nbsp;and&nbsp;<code>theme1.ts<\/code>. Those files will just be barrel files with export statements that pull in the appropriate modules we need.<\/p>\n\n\n\n<p>Make sure in the package.json of your component library that you either don\u2019t specify the files property or set it to&nbsp;<code>\"files\": \"[*]\"<\/code>&nbsp;otherwise the source files you need will not be there.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n\n\n\n<p>My conclusion was that the exports field of package.json is not ready for use with our NextJS projects. Maybe when NextJS goes totally in on ESM, but until then we\u2019re stuck with old<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">ChatGPT explains the history of the exports property<\/h2>\n\n\n\n<p>This was helpful to understand a little of the history behind the exports field. ChatGPT is definitely more optimistic than I am on using the exports field in real world projects. Looking forward to the day when CommonJS is just a memory.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">What is the history of the package.json exports property?<\/h3>\n\n\n\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property in the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file is a relatively recent addition to the Node.js ecosystem, and it was introduced as part of the ECMAScript Modules (ESM) specification, which was added to Node.js in version 12.<\/p>\n\n\n\n<p>Prior to the introduction of ESM, Node.js relied on the CommonJS module system, which used the&nbsp;<strong><code>module.exports<\/code><\/strong>&nbsp;and&nbsp;<strong><code>require()<\/code><\/strong>&nbsp;functions to define and load modules, respectively. With the introduction of ESM, however, a new syntax and module system was introduced, which used&nbsp;<strong><code>import<\/code><\/strong>&nbsp;and&nbsp;<strong><code>export<\/code><\/strong>&nbsp;statements to define and load modules.<\/p>\n\n\n\n<p>To maintain compatibility between the two module systems, the&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was added to the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file. This property allows module authors to specify how their module should be loaded in both the CommonJS and ESM systems.<\/p>\n\n\n\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property can be used to define a single entry point for the module, as well as alternate entry points for different module systems or environments. For example, a module author can specify that their module should be loaded using&nbsp;<strong><code>require()<\/code><\/strong>&nbsp;in a CommonJS environment, but using an&nbsp;<strong><code>import<\/code><\/strong>&nbsp;statement in an ESM environment.<\/p>\n\n\n\n<p>The&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was first proposed in 2018 as part of a larger effort to bring ESM support to Node.js. The proposal was eventually accepted, and the&nbsp;<strong><code>exports<\/code><\/strong>&nbsp;property was added to the&nbsp;<strong><code>package.json<\/code><\/strong>&nbsp;file in Node.js version 12.10.0. Since then, it has become a widely used feature of the Node.js ecosystem, allowing developers to write modules that work seamlessly across different module systems and environments.<\/p>\n",
        "date": "2023-02-24 17:33:34",
        "slug": "saga_of_learning_exports_property_in_packagejson",
        "excerpt": "This is here to document the steps I went through to come to the conclusion that ESM exports syntax in package.json is not ready for use. Use case Our use case is for an internal component library that we want to supply to other projects. Ideally we want to export this as a TypeScript library [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 378,
        "title": "Refactoring is a way of life",
        "content": "<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>I have to admit that this article is primarily a result of ChatGPT. I should probably do another blog post on the usefulness\u2014or evil depending how you look at it\u2014of chatGPT. The final result is still edited and massaged by me, but I had a good base to start from. No matter your stance, AI is here to stay and my stance is that we should learn how to use this new tool.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Refactoring code is an essential part of being a JavaScript developer. It's a way of life that allows us to continuously improve our codebase, making it more readable, maintainable, and efficient.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The first goal is functionality<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When we first write code, we often focus on getting the functionality to work as quickly as possible. But as we continue to work on a project, we may realize that our initial implementation is not as efficient or readable as it could be. This is where refactoring comes in.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What is refactoring?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Refactoring is the process of changing the structure of our code without changing its functionality. This can include things like renaming variables, reorganizing functions, and removing duplicated code. By refactoring our code, we can make it easier to understand and maintain, which in turn makes it easier to add new features and fix bugs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Efficiency<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One goal of refactoring is to improve the efficiency of our code. We can remove unnecessary code and optimize what is there to make it run faster and be easier to read. In JavaScript this can be hugely beneficial when you consider the range of devices a frontend application has to run on. Those 8-year old phones just can\u2019t chew the bits like the modern ones.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Readability<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Another benefit of refactoring is that it allows us to improve the readability of our code. By following best practices and conventions, we can make our code more consistent and easier to understand. This is especially important when working on a team, as it makes it easier for others to understand and contribute to the codebase.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I\u2019m a big proponent of writing readable code. You might earn a merit badge for completing a complex task in a single line of code, but if nobody understands it that could be the achilles heal of your entire application.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Make it part of your workflow<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Refactoring is a continuous process, and it's important to make it a regular part of our workflow. Whether it's during development, before a release, or after a bug has been found, taking the time to refactor our code can have a significant impact on the quality and maintainability of our codebase.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/quote",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/paragraph",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<p>I have to admit that this article is primarily a result of ChatGPT. I should probably do another blog post on the usefulness\u2014or evil depending how you look at it\u2014of chatGPT. The final result is still edited and massaged by me, but I had a good base to start from. No matter your stance, AI is here to stay and my stance is that we should learn how to use this new tool.<\/p>\n"
                    }
                ],
                "innerHTML": "\n<blockquote class=\"wp-block-quote\"><\/blockquote>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Refactoring code is an essential part of being a JavaScript developer. It's a way of life that allows us to continuously improve our codebase, making it more readable, maintainable, and efficient.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The first goal is functionality<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When we first write code, we often focus on getting the functionality to work as quickly as possible. But as we continue to work on a project, we may realize that our initial implementation is not as efficient or readable as it could be. This is where refactoring comes in.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">What is refactoring?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Refactoring is the process of changing the structure of our code without changing its functionality. This can include things like renaming variables, reorganizing functions, and removing duplicated code. By refactoring our code, we can make it easier to understand and maintain, which in turn makes it easier to add new features and fix bugs.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Efficiency<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One goal of refactoring is to improve the efficiency of our code. We can remove unnecessary code and optimize what is there to make it run faster and be easier to read. In JavaScript this can be hugely beneficial when you consider the range of devices a frontend application has to run on. Those 8-year old phones just can\u2019t chew the bits like the modern ones.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Readability<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Another benefit of refactoring is that it allows us to improve the readability of our code. By following best practices and conventions, we can make our code more consistent and easier to understand. This is especially important when working on a team, as it makes it easier for others to understand and contribute to the codebase.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019m a big proponent of writing readable code. You might earn a merit badge for completing a complex task in a single line of code, but if nobody understands it that could be the achilles heal of your entire application.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Make it part of your workflow<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Refactoring is a continuous process, and it's important to make it a regular part of our workflow. Whether it's during development, before a release, or after a bug has been found, taking the time to refactor our code can have a significant impact on the quality and maintainability of our codebase.<\/p>\n"
            }
        ],
        "rendered_content": "\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>I have to admit that this article is primarily a result of ChatGPT. I should probably do another blog post on the usefulness\u2014or evil depending how you look at it\u2014of chatGPT. The final result is still edited and massaged by me, but I had a good base to start from. No matter your stance, AI is here to stay and my stance is that we should learn how to use this new tool.<\/p>\n<\/blockquote>\n\n\n\n<p>Refactoring code is an essential part of being a JavaScript developer. It&#8217;s a way of life that allows us to continuously improve our codebase, making it more readable, maintainable, and efficient.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The first goal is functionality<\/h2>\n\n\n\n<p>When we first write code, we often focus on getting the functionality to work as quickly as possible. But as we continue to work on a project, we may realize that our initial implementation is not as efficient or readable as it could be. This is where refactoring comes in.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What is refactoring?<\/h2>\n\n\n\n<p>Refactoring is the process of changing the structure of our code without changing its functionality. This can include things like renaming variables, reorganizing functions, and removing duplicated code. By refactoring our code, we can make it easier to understand and maintain, which in turn makes it easier to add new features and fix bugs.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Efficiency<\/h2>\n\n\n\n<p>One goal of refactoring is to improve the efficiency of our code. We can remove unnecessary code and optimize what is there to make it run faster and be easier to read. In JavaScript this can be hugely beneficial when you consider the range of devices a frontend application has to run on. Those 8-year old phones just can\u2019t chew the bits like the modern ones.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Readability<\/h2>\n\n\n\n<p>Another benefit of refactoring is that it allows us to improve the readability of our code. By following best practices and conventions, we can make our code more consistent and easier to understand. This is especially important when working on a team, as it makes it easier for others to understand and contribute to the codebase.<\/p>\n\n\n\n<p>I\u2019m a big proponent of writing readable code. You might earn a merit badge for completing a complex task in a single line of code, but if nobody understands it that could be the achilles heal of your entire application.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Make it part of your workflow<\/h2>\n\n\n\n<p>Refactoring is a continuous process, and it&#8217;s important to make it a regular part of our workflow. Whether it&#8217;s during development, before a release, or after a bug has been found, taking the time to refactor our code can have a significant impact on the quality and maintainability of our codebase.<\/p>\n",
        "date": "2023-02-13 03:24:00",
        "slug": "refactoring-is-a-way-of-life",
        "excerpt": "I have to admit that this article is primarily a result of ChatGPT. I should probably do another blog post on the usefulness\u2014or evil depending how you look at it\u2014of chatGPT. The final result is still edited and massaged by me, but I had a good base to start from. No matter your stance, AI [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 375,
        "title": "You need to be using conventional commits",
        "content": "<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Why?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before we get into&nbsp;<em>what is conventional commits<\/em>, I thought it made more sense to talk about why you need it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Determining what changes have happened to your project is not a trivial task. What version should this release be? What features are included? What does it matter?!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead of spending valuable brain cycles on figuring out the answers to these questions, conventional commits comes on the scene to solve with your current workflow.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What is\/are conventional commits?<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Conventional commits is a lightweight and simple convention for structuring commit messages. It provides an easy way to communicate the purpose of a commit to both humans and machines. It will make your development life better.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>feat(&lt;Button&gt;): add render as anchor tag capability\nJIRA-843<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>feat<\/code>&nbsp;denotes a commit that contributes to a new feature. This type of commit will increase your project\u2019s version number by 0.1.0 (eg. 5.11.3 will go to 5.12.0).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Or a simple bug fix might be:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>fix: spelling mistake<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><code>fix<\/code>&nbsp;will take your project up just a 0.0.1 (eg. 8.4.6 will go to 8.4.7).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Automate away the boring stuff<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Using conventional commits allows us to automate certain tasks. Semantic release is an amazing tool for taking the emotional component out of deciding version numbers. By describing your commits in a uniform manner, your version numbers are generated for you based on a simple set of criteria.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Conventional commits also makes it easier to create changelogs, a list of all the changes that have been made to your codebase. Even internal-only changelogs are important to give basic documentation on what work was actually done. Link your commit messages to Jira issues (or whatever painful issue tracker you subscribe to) and the business will know what work is done.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">You need to be using conventional commits<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If nothing else, it helps save you from a world of commit messages that lack heart like&nbsp;<code>fix<\/code>&nbsp;or&nbsp;<code>uh oh...<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Conventional commits is a simple and lightweight convention for structuring commit messages that will greatly improve your workflow. It makes it easy to understand the history of your codebase, automate certain tasks, and create changelogs. You need to be using conventional commits in your projects.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Why?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Before we get into&nbsp;<em>what is conventional commits<\/em>, I thought it made more sense to talk about why you need it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Determining what changes have happened to your project is not a trivial task. What version should this release be? What features are included? What does it matter?!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Instead of spending valuable brain cycles on figuring out the answers to these questions, conventional commits comes on the scene to solve with your current workflow.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">What is\/are conventional commits?<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Conventional commits is a lightweight and simple convention for structuring commit messages. It provides an easy way to communicate the purpose of a commit to both humans and machines. It will make your development life better.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For example:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>feat(&lt;Button&gt;): add render as anchor tag capability\nJIRA-843<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><code>feat<\/code>&nbsp;denotes a commit that contributes to a new feature. This type of commit will increase your project\u2019s version number by 0.1.0 (eg. 5.11.3 will go to 5.12.0).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Or a simple bug fix might be:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>fix: spelling mistake<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><code>fix<\/code>&nbsp;will take your project up just a 0.0.1 (eg. 8.4.6 will go to 8.4.7).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Automate away the boring stuff<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Using conventional commits allows us to automate certain tasks. Semantic release is an amazing tool for taking the emotional component out of deciding version numbers. By describing your commits in a uniform manner, your version numbers are generated for you based on a simple set of criteria.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Conventional commits also makes it easier to create changelogs, a list of all the changes that have been made to your codebase. Even internal-only changelogs are important to give basic documentation on what work was actually done. Link your commit messages to Jira issues (or whatever painful issue tracker you subscribe to) and the business will know what work is done.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">You need to be using conventional commits<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If nothing else, it helps save you from a world of commit messages that lack heart like&nbsp;<code>fix<\/code>&nbsp;or&nbsp;<code>uh oh...<\/code>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Conventional commits is a simple and lightweight convention for structuring commit messages that will greatly improve your workflow. It makes it easy to understand the history of your codebase, automate certain tasks, and create changelogs. You need to be using conventional commits in your projects.<\/p>\n"
            }
        ],
        "rendered_content": "\n<h2 class=\"wp-block-heading\">Why?<\/h2>\n\n\n\n<p>Before we get into&nbsp;<em>what is conventional commits<\/em>, I thought it made more sense to talk about why you need it.<\/p>\n\n\n\n<p>Determining what changes have happened to your project is not a trivial task. What version should this release be? What features are included? What does it matter?!<\/p>\n\n\n\n<p>Instead of spending valuable brain cycles on figuring out the answers to these questions, conventional commits comes on the scene to solve with your current workflow.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What is\/are conventional commits?<\/h2>\n\n\n\n<p>Conventional commits is a lightweight and simple convention for structuring commit messages. It provides an easy way to communicate the purpose of a commit to both humans and machines. It will make your development life better.<\/p>\n\n\n\n<p>For example:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>feat(&lt;Button&gt;): add render as anchor tag capability\nJIRA-843<\/code><\/pre>\n\n\n\n<p><code>feat<\/code>&nbsp;denotes a commit that contributes to a new feature. This type of commit will increase your project\u2019s version number by 0.1.0 (eg. 5.11.3 will go to 5.12.0).<\/p>\n\n\n\n<p>Or a simple bug fix might be:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>fix: spelling mistake<\/code><\/pre>\n\n\n\n<p><code>fix<\/code>&nbsp;will take your project up just a 0.0.1 (eg. 8.4.6 will go to 8.4.7).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Automate away the boring stuff<\/h2>\n\n\n\n<p>Using conventional commits allows us to automate certain tasks. Semantic release is an amazing tool for taking the emotional component out of deciding version numbers. By describing your commits in a uniform manner, your version numbers are generated for you based on a simple set of criteria.<\/p>\n\n\n\n<p>Conventional commits also makes it easier to create changelogs, a list of all the changes that have been made to your codebase. Even internal-only changelogs are important to give basic documentation on what work was actually done. Link your commit messages to Jira issues (or whatever painful issue tracker you subscribe to) and the business will know what work is done.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">You need to be using conventional commits<\/h2>\n\n\n\n<p>If nothing else, it helps save you from a world of commit messages that lack heart like&nbsp;<code>fix<\/code>&nbsp;or&nbsp;<code>uh oh...<\/code>.<\/p>\n\n\n\n<p>Conventional commits is a simple and lightweight convention for structuring commit messages that will greatly improve your workflow. It makes it easy to understand the history of your codebase, automate certain tasks, and create changelogs. You need to be using conventional commits in your projects.<\/p>\n",
        "date": "2023-02-06 03:22:00",
        "slug": "you-need-to-be-using-conventional-commits",
        "excerpt": "Why? Before we get into&nbsp;what is conventional commits, I thought it made more sense to talk about why you need it. Determining what changes have happened to your project is not a trivial task. What version should this release be? What features are included? What does it matter?! Instead of spending valuable brain cycles on [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 372,
        "title": "How to take advantage of Envrionment Variables",
        "content": "<!-- wp:paragraph -->\n<p>Our projects have at least 3 different environments:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Development<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>QA<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Production<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>When developing a project it is often common to hard code values just to get things working. The context shift of setting up environment variables is enough to put it off until a later moment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then we need to push it up to QA for someone to take a look at and we need a new value for this variable. Again, instead of setting up environment variables, for a slew of reasons including that we probably don\u2019t have access to the deployment environment to create those variables, so we need to put a request in that will take time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead we add an if statement:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>let importantVariable = \"dev value\"\nif (some way of determining QA environments...) {\n\timportantVariable = \"QA value\"\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>And then we\u2019re up against a deadline so we need to get it to production and end up doing:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>let importantVariable = \"dev value\"\nif (some way of determining QA environments...) {\n\timportantVariable = \"QA value\"\n}\nif (some way of determining prod environment...) {\n  importantVariable = \"Prod value\"\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The enemy of clarity<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We always want our code to be easy to read an understand. This is especially important when working on a team but also promotes writing better code.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We don\u2019t want environment specific code in our repo. This muddies things up and makes our code less concise and harder to debug. Why have a string of if statements when we can easily swap out this value with an environment variable?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Environment variables make your code simpler<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With environment variables setup, you code can now focus on what it is doing instead of where it is running. This reduces the friction of trying to determine the environment in code and instead delegating this to the environment itself.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Our projects have at least 3 different environments:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Development<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>QA<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Production<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When developing a project it is often common to hard code values just to get things working. The context shift of setting up environment variables is enough to put it off until a later moment.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then we need to push it up to QA for someone to take a look at and we need a new value for this variable. Again, instead of setting up environment variables, for a slew of reasons including that we probably don\u2019t have access to the deployment environment to create those variables, so we need to put a request in that will take time.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Instead we add an if statement:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>let importantVariable = \"dev value\"\nif (some way of determining QA environments...) {\n\timportantVariable = \"QA value\"\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>And then we\u2019re up against a deadline so we need to get it to production and end up doing:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>let importantVariable = \"dev value\"\nif (some way of determining QA environments...) {\n\timportantVariable = \"QA value\"\n}\nif (some way of determining prod environment...) {\n  importantVariable = \"Prod value\"\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The enemy of clarity<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We always want our code to be easy to read an understand. This is especially important when working on a team but also promotes writing better code.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We don\u2019t want environment specific code in our repo. This muddies things up and makes our code less concise and harder to debug. Why have a string of if statements when we can easily swap out this value with an environment variable?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Environment variables make your code simpler<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>With environment variables setup, you code can now focus on what it is doing instead of where it is running. This reduces the friction of trying to determine the environment in code and instead delegating this to the environment itself.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Our projects have at least 3 different environments:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Development<\/li>\n\n\n\n<li>QA<\/li>\n\n\n\n<li>Production<\/li>\n<\/ul>\n\n\n\n<p>When developing a project it is often common to hard code values just to get things working. The context shift of setting up environment variables is enough to put it off until a later moment.<\/p>\n\n\n\n<p>Then we need to push it up to QA for someone to take a look at and we need a new value for this variable. Again, instead of setting up environment variables, for a slew of reasons including that we probably don\u2019t have access to the deployment environment to create those variables, so we need to put a request in that will take time.<\/p>\n\n\n\n<p>Instead we add an if statement:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>let importantVariable = \"dev value\"\nif (some way of determining QA environments...) {\n\timportantVariable = \"QA value\"\n}<\/code><\/pre>\n\n\n\n<p>And then we\u2019re up against a deadline so we need to get it to production and end up doing:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>let importantVariable = \"dev value\"\nif (some way of determining QA environments...) {\n\timportantVariable = \"QA value\"\n}\nif (some way of determining prod environment...) {\n  importantVariable = \"Prod value\"\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">The enemy of clarity<\/h2>\n\n\n\n<p>We always want our code to be easy to read an understand. This is especially important when working on a team but also promotes writing better code.<\/p>\n\n\n\n<p>We don\u2019t want environment specific code in our repo. This muddies things up and makes our code less concise and harder to debug. Why have a string of if statements when we can easily swap out this value with an environment variable?<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Environment variables make your code simpler<\/h2>\n\n\n\n<p>With environment variables setup, you code can now focus on what it is doing instead of where it is running. This reduces the friction of trying to determine the environment in code and instead delegating this to the environment itself.<\/p>\n",
        "date": "2023-01-30 03:20:00",
        "slug": "how-to-take-advantage-of-envrionment-variables",
        "excerpt": "Our projects have at least 3 different environments: When developing a project it is often common to hard code values just to get things working. The context shift of setting up environment variables is enough to put it off until a later moment. Then we need to push it up to QA for someone to [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 370,
        "title": "Don\u2019t use localStorage for application state",
        "content": "<!-- wp:paragraph -->\n<p>I\u2019ve seen it a couple times that when a junior developer is trying to figure out how to persist state from different interfaces, they default to localStorage. LocalStorage has its place, but it is not the right option for dealing with application state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>When to Use<\/strong><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>LocalStorage is used to store data that needs to persist beyond a single user session.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>User preferences<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Application data<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>Don\u2019t confuse with application state<\/strong><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Application state is something that controls what the interface looks like and options that are presented to the user at any given moment. LocalStorage should not be used for application state:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Can\u2019t trigger interface updates automatically like useState<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sync\u2019ing - end up needing to do custom syncing that is tough to manage<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>Alternatives<\/strong><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>sessionStorage - similar to localStorage but is wiped when the user session is ended (browser tab closed, etc\u2026) - still have sync\u2019ing issue with the main state<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>url variables - for state that can be saved with the url, persists with refresh<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>React state, useContext<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ve seen it a couple times that when a junior developer is trying to figure out how to persist state from different interfaces, they default to localStorage. LocalStorage has its place, but it is not the right option for dealing with application state.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><strong>When to Use<\/strong><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>LocalStorage is used to store data that needs to persist beyond a single user session.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>User preferences<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Application data<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><strong>Don\u2019t confuse with application state<\/strong><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Application state is something that controls what the interface looks like and options that are presented to the user at any given moment. LocalStorage should not be used for application state:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Can\u2019t trigger interface updates automatically like useState<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Sync\u2019ing - end up needing to do custom syncing that is tough to manage<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><strong>Alternatives<\/strong><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>sessionStorage - similar to localStorage but is wiped when the user session is ended (browser tab closed, etc\u2026) - still have sync\u2019ing issue with the main state<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>url variables - for state that can be saved with the url, persists with refresh<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>React state, useContext<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n<\/ul>\n"
            }
        ],
        "rendered_content": "\n<p>I\u2019ve seen it a couple times that when a junior developer is trying to figure out how to persist state from different interfaces, they default to localStorage. LocalStorage has its place, but it is not the right option for dealing with application state.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>When to Use<\/strong><\/h2>\n\n\n\n<p>LocalStorage is used to store data that needs to persist beyond a single user session.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>User preferences<\/li>\n\n\n\n<li>Application data<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Don\u2019t confuse with application state<\/strong><\/h2>\n\n\n\n<p>Application state is something that controls what the interface looks like and options that are presented to the user at any given moment. LocalStorage should not be used for application state:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Can\u2019t trigger interface updates automatically like useState<\/li>\n\n\n\n<li>Sync\u2019ing &#8211; end up needing to do custom syncing that is tough to manage<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Alternatives<\/strong><\/h2>\n\n\n\n<ul class=\"wp-block-list\">\n<li>sessionStorage &#8211; similar to localStorage but is wiped when the user session is ended (browser tab closed, etc\u2026) &#8211; still have sync\u2019ing issue with the main state<\/li>\n\n\n\n<li>url variables &#8211; for state that can be saved with the url, persists with refresh<\/li>\n\n\n\n<li>React state, useContext<\/li>\n<\/ul>\n",
        "date": "2023-01-22 03:19:00",
        "slug": "dont-use-localstorage-for-application-state",
        "excerpt": "I\u2019ve seen it a couple times that when a junior developer is trying to figure out how to persist state from different interfaces, they default to localStorage. LocalStorage has its place, but it is not the right option for dealing with application state. When to Use LocalStorage is used to store data that needs to [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 367,
        "title": "What problem does useState in React solve?",
        "content": "<!-- wp:paragraph -->\n<p>This was a recent question on&nbsp;<a href=\"https:\/\/www.reddit.com\/r\/webdev\/\">r\/webdev<\/a>&nbsp;subreddit.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I thought it would help to give some context through history. Jumping directly into React can be disorienting, especially when you don\u2019t understand the basic reason for its existence. Let\u2019s see how we got here.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Back in old school JavaScript only days, if you had a variable that held a value that you wanted to show on the screen, you\u2019d update the DOM with that value.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>var myValue = \"hello world\";\ndocument.getElementById(\"myElement\").innerHTML = myValue;\n\nfunction myLogic() {\n  var myValue = \"hello mars\";\n  document.getElementById(\"myElement\").innerHTML = myValue;\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Every time you updated that variable with a new value, you would have to remember to update the DOM with that new value, otherwise your screen wouldn\u2019t be in sync with your variable. This got super tedious if you needed to update the DOM in 6 places every time your variable updated.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">React - state, state, and more state<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>React came along and introduced the idea of state.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>State refers to the current value, attributes, or data related to a contained portion of your application<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I like to think of state in terms of a traffic light. A traffic light has at least 3 different states. Go, stop, and caution. Internally in the logic of that traffic light, when the state changes it knows to change the light to green, red, and yellow respectively.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With React state, it introduced the idea of components that could contain state variables. You could update a state variable in once place and it would automatically update your DOM every place it was used. It was amazing!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Declarative vs Imperative<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Besides the basic idea of state, this illustrates the idea of declarative vs imperative.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first example was imperative - change variable then tell the DOM to update because the variable changed.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Declarative is more like, \u201c<em>I have this variable and I want it linked to all these different places. I\u2019ll tell you when the variable changes and then the framework (in this case React) will figure out how to update the screen.<\/em>\u201d In this way, we don\u2019t really care how the screen gets updated, React is taking care of that. I just need to tell it when my variable changes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hope that helps. It\u2019s really just a simple way to update the screen in multiple places by changing a variable instead of directly modifying the DOM.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This was a recent question on&nbsp;<a href=\"https:\/\/www.reddit.com\/r\/webdev\/\">r\/webdev<\/a>&nbsp;subreddit.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I thought it would help to give some context through history. Jumping directly into React can be disorienting, especially when you don\u2019t understand the basic reason for its existence. Let\u2019s see how we got here.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Back in old school JavaScript only days, if you had a variable that held a value that you wanted to show on the screen, you\u2019d update the DOM with that value.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>var myValue = \"hello world\";\ndocument.getElementById(\"myElement\").innerHTML = myValue;\n\nfunction myLogic() {\n  var myValue = \"hello mars\";\n  document.getElementById(\"myElement\").innerHTML = myValue;\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Every time you updated that variable with a new value, you would have to remember to update the DOM with that new value, otherwise your screen wouldn\u2019t be in sync with your variable. This got super tedious if you needed to update the DOM in 6 places every time your variable updated.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">React - state, state, and more state<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>React came along and introduced the idea of state.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/quote",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/paragraph",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<p>State refers to the current value, attributes, or data related to a contained portion of your application<\/p>\n"
                    }
                ],
                "innerHTML": "\n<blockquote class=\"wp-block-quote\"><\/blockquote>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I like to think of state in terms of a traffic light. A traffic light has at least 3 different states. Go, stop, and caution. Internally in the logic of that traffic light, when the state changes it knows to change the light to green, red, and yellow respectively.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>With React state, it introduced the idea of components that could contain state variables. You could update a state variable in once place and it would automatically update your DOM every place it was used. It was amazing!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Declarative vs Imperative<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Besides the basic idea of state, this illustrates the idea of declarative vs imperative.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The first example was imperative - change variable then tell the DOM to update because the variable changed.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Declarative is more like, \u201c<em>I have this variable and I want it linked to all these different places. I\u2019ll tell you when the variable changes and then the framework (in this case React) will figure out how to update the screen.<\/em>\u201d In this way, we don\u2019t really care how the screen gets updated, React is taking care of that. I just need to tell it when my variable changes.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Hope that helps. It\u2019s really just a simple way to update the screen in multiple places by changing a variable instead of directly modifying the DOM.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>This was a recent question on&nbsp;<a href=\"https:\/\/www.reddit.com\/r\/webdev\/\">r\/webdev<\/a>&nbsp;subreddit.<\/p>\n\n\n\n<p>I thought it would help to give some context through history. Jumping directly into React can be disorienting, especially when you don\u2019t understand the basic reason for its existence. Let\u2019s see how we got here.<\/p>\n\n\n\n<p>Back in old school JavaScript only days, if you had a variable that held a value that you wanted to show on the screen, you\u2019d update the DOM with that value.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>var myValue = \"hello world\";\ndocument.getElementById(\"myElement\").innerHTML = myValue;\n\nfunction myLogic() {\n  var myValue = \"hello mars\";\n  document.getElementById(\"myElement\").innerHTML = myValue;\n}<\/code><\/pre>\n\n\n\n<p>Every time you updated that variable with a new value, you would have to remember to update the DOM with that new value, otherwise your screen wouldn\u2019t be in sync with your variable. This got super tedious if you needed to update the DOM in 6 places every time your variable updated.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">React &#8211; state, state, and more state<\/h2>\n\n\n\n<p>React came along and introduced the idea of state.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>State refers to the current value, attributes, or data related to a contained portion of your application<\/p>\n<\/blockquote>\n\n\n\n<p>I like to think of state in terms of a traffic light. A traffic light has at least 3 different states. Go, stop, and caution. Internally in the logic of that traffic light, when the state changes it knows to change the light to green, red, and yellow respectively.<\/p>\n\n\n\n<p>With React state, it introduced the idea of components that could contain state variables. You could update a state variable in once place and it would automatically update your DOM every place it was used. It was amazing!<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Declarative vs Imperative<\/h2>\n\n\n\n<p>Besides the basic idea of state, this illustrates the idea of declarative vs imperative.<\/p>\n\n\n\n<p>The first example was imperative &#8211; change variable then tell the DOM to update because the variable changed.<\/p>\n\n\n\n<p>Declarative is more like, \u201c<em>I have this variable and I want it linked to all these different places. I\u2019ll tell you when the variable changes and then the framework (in this case React) will figure out how to update the screen.<\/em>\u201d In this way, we don\u2019t really care how the screen gets updated, React is taking care of that. I just need to tell it when my variable changes.<\/p>\n\n\n\n<p>Hope that helps. It\u2019s really just a simple way to update the screen in multiple places by changing a variable instead of directly modifying the DOM.<\/p>\n",
        "date": "2022-11-20 03:17:00",
        "slug": "what-problem-does-usestate-in-react-solve",
        "excerpt": "This was a recent question on&nbsp;r\/webdev&nbsp;subreddit. I thought it would help to give some context through history. Jumping directly into React can be disorienting, especially when you don\u2019t understand the basic reason for its existence. Let\u2019s see how we got here. Back in old school JavaScript only days, if you had a variable that held [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 364,
        "title": "Access source code of a Node module",
        "content": "<!-- wp:paragraph -->\n<p>This may seem obvious to some, but as a senior developer with almost 20 years experience, I just figured this out. I thought I would document it for others who might be searching for how to do it since my searches didn\u2019t pull up anything. Probably because it\u2019s just too obvious.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Problem - access src instead of compiled module<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I\u2019m in the process of building a component library in TypeScript and wanted the ability to give the consumers of this library both the compiled code and the source.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The primary reason being is that we\u2019re using CSS modules and with Vite, the css is bundled into a separate file called&nbsp;<code>style.css<\/code>. It\u2019s not ideal because then you need to include the css for the entire module even if you\u2019re just using a single component. If we could use the source code then we could tree shake and use only the css code we need.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The source is there, how do I access it<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The simple answer is, when you import, just add the appropriate folder name after the module name. For instance:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>\/\/ This will import whatever if specified in the \"main\"\n\/\/ (or \"module\") property of package.json\nimport { Button } from \"componentLibrary\";\n\n\/\/ This will import a folder relative to the root of the module\nimport { Button } from \"componentLibrary\/src\";<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>It seems so obvious, but for me it wasn\u2019t.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Don\u2019t even attempt to use exports property of package.json with TypeScript<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Before I figured out the above, I assumed I could take advantage of the idea of&nbsp;<a href=\"https:\/\/nodejs.org\/api\/packages.html#subpath-exports\">subpath exports<\/a>&nbsp;in package.json. It apparently is meant to replace the&nbsp;<code>main<\/code>&nbsp;and&nbsp;<code>module<\/code>&nbsp;properties of package.json.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can specific additional entry points that will be appended to the end of the module name when importing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>\"exports\": {\n    \".\": \".\/dist\/mm-ui-components.es.js\"\n    \".\/source\": \".\/src\/index.ts\"\n}\n\n\/\/ will import the bundled version\nimport { Button } from \"componentLibrary\"\n\n\/\/ will import the src index file\nimport { Button } from \"componentLibrary\/source\"<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Works great in JavaScript. TypeScript chokes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You might find some people suggesting you can change the&nbsp;<code>moduleResolution<\/code>&nbsp;property in&nbsp;<code>tsconfig.json<\/code>&nbsp;but that didn\u2019t work for me.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can find out some of the&nbsp;<a href=\"https:\/\/github.com\/microsoft\/TypeScript\/issues\/33079\">history behind it<\/a>&nbsp;if you enjoy painful Github threads<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This may seem obvious to some, but as a senior developer with almost 20 years experience, I just figured this out. I thought I would document it for others who might be searching for how to do it since my searches didn\u2019t pull up anything. Probably because it\u2019s just too obvious.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Problem - access src instead of compiled module<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019m in the process of building a component library in TypeScript and wanted the ability to give the consumers of this library both the compiled code and the source.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The primary reason being is that we\u2019re using CSS modules and with Vite, the css is bundled into a separate file called&nbsp;<code>style.css<\/code>. It\u2019s not ideal because then you need to include the css for the entire module even if you\u2019re just using a single component. If we could use the source code then we could tree shake and use only the css code we need.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The source is there, how do I access it<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The simple answer is, when you import, just add the appropriate folder name after the module name. For instance:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>\/\/ This will import whatever if specified in the \"main\"\n\/\/ (or \"module\") property of package.json\nimport { Button } from \"componentLibrary\";\n\n\/\/ This will import a folder relative to the root of the module\nimport { Button } from \"componentLibrary\/src\";<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It seems so obvious, but for me it wasn\u2019t.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Don\u2019t even attempt to use exports property of package.json with TypeScript<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Before I figured out the above, I assumed I could take advantage of the idea of&nbsp;<a href=\"https:\/\/nodejs.org\/api\/packages.html#subpath-exports\">subpath exports<\/a>&nbsp;in package.json. It apparently is meant to replace the&nbsp;<code>main<\/code>&nbsp;and&nbsp;<code>module<\/code>&nbsp;properties of package.json.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You can specific additional entry points that will be appended to the end of the module name when importing.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>\"exports\": {\n    \".\": \".\/dist\/mm-ui-components.es.js\"\n    \".\/source\": \".\/src\/index.ts\"\n}\n\n\/\/ will import the bundled version\nimport { Button } from \"componentLibrary\"\n\n\/\/ will import the src index file\nimport { Button } from \"componentLibrary\/source\"<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Works great in JavaScript. TypeScript chokes.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You might find some people suggesting you can change the&nbsp;<code>moduleResolution<\/code>&nbsp;property in&nbsp;<code>tsconfig.json<\/code>&nbsp;but that didn\u2019t work for me.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You can find out some of the&nbsp;<a href=\"https:\/\/github.com\/microsoft\/TypeScript\/issues\/33079\">history behind it<\/a>&nbsp;if you enjoy painful Github threads<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>This may seem obvious to some, but as a senior developer with almost 20 years experience, I just figured this out. I thought I would document it for others who might be searching for how to do it since my searches didn\u2019t pull up anything. Probably because it\u2019s just too obvious.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Problem &#8211; access src instead of compiled module<\/h2>\n\n\n\n<p>I\u2019m in the process of building a component library in TypeScript and wanted the ability to give the consumers of this library both the compiled code and the source.<\/p>\n\n\n\n<p>The primary reason being is that we\u2019re using CSS modules and with Vite, the css is bundled into a separate file called&nbsp;<code>style.css<\/code>. It\u2019s not ideal because then you need to include the css for the entire module even if you\u2019re just using a single component. If we could use the source code then we could tree shake and use only the css code we need.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The source is there, how do I access it<\/h2>\n\n\n\n<p>The simple answer is, when you import, just add the appropriate folder name after the module name. For instance:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>\/\/ This will import whatever if specified in the \"main\"\n\/\/ (or \"module\") property of package.json\nimport { Button } from \"componentLibrary\";\n\n\/\/ This will import a folder relative to the root of the module\nimport { Button } from \"componentLibrary\/src\";<\/code><\/pre>\n\n\n\n<p>It seems so obvious, but for me it wasn\u2019t.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Don\u2019t even attempt to use exports property of package.json with TypeScript<\/h2>\n\n\n\n<p>Before I figured out the above, I assumed I could take advantage of the idea of&nbsp;<a href=\"https:\/\/nodejs.org\/api\/packages.html#subpath-exports\">subpath exports<\/a>&nbsp;in package.json. It apparently is meant to replace the&nbsp;<code>main<\/code>&nbsp;and&nbsp;<code>module<\/code>&nbsp;properties of package.json.<\/p>\n\n\n\n<p>You can specific additional entry points that will be appended to the end of the module name when importing.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>\"exports\": {\n    \".\": \".\/dist\/mm-ui-components.es.js\"\n    \".\/source\": \".\/src\/index.ts\"\n}\n\n\/\/ will import the bundled version\nimport { Button } from \"componentLibrary\"\n\n\/\/ will import the src index file\nimport { Button } from \"componentLibrary\/source\"<\/code><\/pre>\n\n\n\n<p>Works great in JavaScript. TypeScript chokes.<\/p>\n\n\n\n<p>You might find some people suggesting you can change the&nbsp;<code>moduleResolution<\/code>&nbsp;property in&nbsp;<code>tsconfig.json<\/code>&nbsp;but that didn\u2019t work for me.<\/p>\n\n\n\n<p>You can find out some of the&nbsp;<a href=\"https:\/\/github.com\/microsoft\/TypeScript\/issues\/33079\">history behind it<\/a>&nbsp;if you enjoy painful Github threads<\/p>\n",
        "date": "2022-11-19 03:10:00",
        "slug": "access-source-code-of-a-node-module",
        "excerpt": "This may seem obvious to some, but as a senior developer with almost 20 years experience, I just figured this out. I thought I would document it for others who might be searching for how to do it since my searches didn\u2019t pull up anything. Probably because it\u2019s just too obvious. Problem &#8211; access src [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 361,
        "title": "Where to put Cypress TypeScript definitions?",
        "content": "<!-- wp:paragraph -->\n<p>Ran into this issue where the addition of mount to cy wasn\u2019t working properly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Property 'mount' does not exist on type 'cy &amp; CyEventEmitter'.ts(2339)<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I couldn\u2019t for the life of me figure out why! I followed the&nbsp;<a href=\"https:\/\/docs.cypress.io\/guides\/tooling\/typescript-support\">TypeScript page<\/a>&nbsp;in the Cypress docs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It first recommends putting the definition in the appropriate file in the&nbsp;<code>\/cypress\/support<\/code>&nbsp;folder. Since I was doing component testing I added it to the component.ts file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>import \".\/commands\";\nimport { mount } from \"cypress\/react18\";\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add(\"mount\", mount);<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Exactly how they described, but still didn\u2019t work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Later in that document they mention that you can put it in its own definition file. So let\u2019s try that.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>\/\/cypress.d.ts in the root\n\nimport { mount } from \"cypress\/react\";\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount;\n    }\n  }\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Still no dice.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But the next paragraph in the docs triggered my understanding of what was going on.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>You might need to include the&nbsp;*<em>.d.ts<\/em>&nbsp;&nbsp;in the include options in any&nbsp;<em>tsconfig.json<\/em>&nbsp;&nbsp;files in your project for TypeScript to pick up the new types<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Now it was beginning to make sense.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My tsconfig include section looked like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>\"include\": &#091;\"src\"]<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I was only including the src folder\u2014which is what I wanted\u2014but the Cypress TypeScript definition was always outside of that include path. The Cypress support folder and the definition file in the root were never picked up by TypeScript and therefore never applied.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The simple fix was to explicitly include the external definitions file I had created in the root of the project. I ended up moving the definition file into a&nbsp;<code>types<\/code>&nbsp;folder to keep things organized and clean.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>\"include\": &#091;\"src\", \".\/types\/cypress.d.ts\"]<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Worked like a charm! Well almost\u2026<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I get an error in my&nbsp;<code>component.ts<\/code>&nbsp;file!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>Argument of type '\"mount\"' is not assignable to parameter of type 'keyof Chainable&lt;any&gt;'.ts(2345)<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the comments of that file it mentions something about using the triple-slash notation to reference types. I haven\u2019t quite wrapped my brain around that one and my eslint yells at me if I do, telling me to use normal ES module import syntax.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That ended up being the solution.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-typescript\"} -->\n<pre class=\"wp-block-code lang-typescript\"><code>import \"..\/..\/types\/cypress.d\";<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Rule of thumb I learned:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>T<em>ype definitions must be reachable by the TypeScript compiler controlled by the include option in tsconfig.json. For files outside the include you must manually import the type definition.<\/em><\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Ran into this issue where the addition of mount to cy wasn\u2019t working properly.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>Property 'mount' does not exist on type 'cy &amp; CyEventEmitter'.ts(2339)<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I couldn\u2019t for the life of me figure out why! I followed the&nbsp;<a href=\"https:\/\/docs.cypress.io\/guides\/tooling\/typescript-support\">TypeScript page<\/a>&nbsp;in the Cypress docs.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It first recommends putting the definition in the appropriate file in the&nbsp;<code>\/cypress\/support<\/code>&nbsp;folder. Since I was doing component testing I added it to the component.ts file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>import \".\/commands\";\nimport { mount } from \"cypress\/react18\";\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add(\"mount\", mount);<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Exactly how they described, but still didn\u2019t work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Later in that document they mention that you can put it in its own definition file. So let\u2019s try that.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>\/\/cypress.d.ts in the root\n\nimport { mount } from \"cypress\/react\";\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount;\n    }\n  }\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Still no dice.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>But the next paragraph in the docs triggered my understanding of what was going on.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/quote",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/paragraph",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<p>You might need to include the&nbsp;*<em>.d.ts<\/em>&nbsp;&nbsp;in the include options in any&nbsp;<em>tsconfig.json<\/em>&nbsp;&nbsp;files in your project for TypeScript to pick up the new types<\/p>\n"
                    }
                ],
                "innerHTML": "\n<blockquote class=\"wp-block-quote\"><\/blockquote>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now it was beginning to make sense.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>My tsconfig include section looked like:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>\"include\": &#091;\"src\"]<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I was only including the src folder\u2014which is what I wanted\u2014but the Cypress TypeScript definition was always outside of that include path. The Cypress support folder and the definition file in the root were never picked up by TypeScript and therefore never applied.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The simple fix was to explicitly include the external definitions file I had created in the root of the project. I ended up moving the definition file into a&nbsp;<code>types<\/code>&nbsp;folder to keep things organized and clean.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>\"include\": &#091;\"src\", \".\/types\/cypress.d.ts\"]<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Worked like a charm! Well almost\u2026<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now I get an error in my&nbsp;<code>component.ts<\/code>&nbsp;file!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code>Argument of type '\"mount\"' is not assignable to parameter of type 'keyof Chainable&lt;any&gt;'.ts(2345)<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In the comments of that file it mentions something about using the triple-slash notation to reference types. I haven\u2019t quite wrapped my brain around that one and my eslint yells at me if I do, telling me to use normal ES module import syntax.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That ended up being the solution.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-typescript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-typescript\"><code>import \"..\/..\/types\/cypress.d\";<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Rule of thumb I learned:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/quote",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/paragraph",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<p>T<em>ype definitions must be reachable by the TypeScript compiler controlled by the include option in tsconfig.json. For files outside the include you must manually import the type definition.<\/em><\/p>\n"
                    }
                ],
                "innerHTML": "\n<blockquote class=\"wp-block-quote\"><\/blockquote>\n"
            }
        ],
        "rendered_content": "\n<p>Ran into this issue where the addition of mount to cy wasn\u2019t working properly.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Property 'mount' does not exist on type 'cy &amp; CyEventEmitter'.ts(2339)<\/code><\/pre>\n\n\n\n<p>I couldn\u2019t for the life of me figure out why! I followed the&nbsp;<a href=\"https:\/\/docs.cypress.io\/guides\/tooling\/typescript-support\">TypeScript page<\/a>&nbsp;in the Cypress docs.<\/p>\n\n\n\n<p>It first recommends putting the definition in the appropriate file in the&nbsp;<code>\/cypress\/support<\/code>&nbsp;folder. Since I was doing component testing I added it to the component.ts file.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>import \".\/commands\";\nimport { mount } from \"cypress\/react18\";\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount;\n    }\n  }\n}\n\nCypress.Commands.add(\"mount\", mount);<\/code><\/pre>\n\n\n\n<p>Exactly how they described, but still didn\u2019t work.<\/p>\n\n\n\n<p>Later in that document they mention that you can put it in its own definition file. So let\u2019s try that.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>\/\/cypress.d.ts in the root\n\nimport { mount } from \"cypress\/react\";\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount;\n    }\n  }\n}<\/code><\/pre>\n\n\n\n<p>Still no dice.<\/p>\n\n\n\n<p>But the next paragraph in the docs triggered my understanding of what was going on.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>You might need to include the&nbsp;*<em>.d.ts<\/em>&nbsp;&nbsp;in the include options in any&nbsp;<em>tsconfig.json<\/em>&nbsp;&nbsp;files in your project for TypeScript to pick up the new types<\/p>\n<\/blockquote>\n\n\n\n<p>Now it was beginning to make sense.<\/p>\n\n\n\n<p>My tsconfig include section looked like:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>\"include\": &#091;\"src\"]<\/code><\/pre>\n\n\n\n<p>I was only including the src folder\u2014which is what I wanted\u2014but the Cypress TypeScript definition was always outside of that include path. The Cypress support folder and the definition file in the root were never picked up by TypeScript and therefore never applied.<\/p>\n\n\n\n<p>The simple fix was to explicitly include the external definitions file I had created in the root of the project. I ended up moving the definition file into a&nbsp;<code>types<\/code>&nbsp;folder to keep things organized and clean.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>\"include\": &#091;\"src\", \".\/types\/cypress.d.ts\"]<\/code><\/pre>\n\n\n\n<p>Worked like a charm! Well almost\u2026<\/p>\n\n\n\n<p>Now I get an error in my&nbsp;<code>component.ts<\/code>&nbsp;file!<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Argument of type '\"mount\"' is not assignable to parameter of type 'keyof Chainable&lt;any&gt;'.ts(2345)<\/code><\/pre>\n\n\n\n<p>In the comments of that file it mentions something about using the triple-slash notation to reference types. I haven\u2019t quite wrapped my brain around that one and my eslint yells at me if I do, telling me to use normal ES module import syntax.<\/p>\n\n\n\n<p>That ended up being the solution.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-typescript\"><code>import \"..\/..\/types\/cypress.d\";<\/code><\/pre>\n\n\n\n<p>Rule of thumb I learned:<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>T<em>ype definitions must be reachable by the TypeScript compiler controlled by the include option in tsconfig.json. For files outside the include you must manually import the type definition.<\/em><\/p>\n<\/blockquote>\n",
        "date": "2022-11-01 03:06:00",
        "slug": "where-to-put-cypress-typescript-definitions",
        "excerpt": "Ran into this issue where the addition of mount to cy wasn\u2019t working properly. I couldn\u2019t for the life of me figure out why! I followed the&nbsp;TypeScript page&nbsp;in the Cypress docs. It first recommends putting the definition in the appropriate file in the&nbsp;\/cypress\/support&nbsp;folder. Since I was doing component testing I added it to the component.ts [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 358,
        "title": "Searching for a full stack developer job online",
        "content": "<!-- wp:paragraph -->\n<p>I\u2019ve recently begun to look for new work. I haven\u2019t had to do this specific type of job search in a long time since my last number of positions were through professional relationships. I pursued all of these career connections I had first, as that\u2019s usually the best way to land a position , but there are now so many resources for finding work that it can be overwhelming. I thought I\u2019d explain my process to help anyone in the same position.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Professional Connections<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>First and foremost,&nbsp;<em>let all your professional connections know you\u2019re looking for work<\/em>. Past co-workers, friends, neighbors\u2014whoever you know that is in the tech industry, just let them know one way or another that you\u2019re looking for work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I would prioritize in person meetings if you can. It goes a long way to be able to just sit down and have a conversation with someone about your career and thoughts about your future, even if it\u2019s just for your confidence level as you search for a job.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then, LinkedIn, Facebook, text messages are all good way to make that quick little touch. Sometimes in the past I would hesitate reaching out to someone, thinking that the only time I talk to them is when I need something. Then I started to look at it in a positive light\u2014maybe this is the perfect topic to reconnect and reestablish that relationship.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Job Sites<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">LinkedIn<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The next place I continue my search is&nbsp;<a href=\"https:\/\/www.linkedin.com\/\">LinkedIn<\/a>. Make sure all your profile information is up to date with at least your work experience and education. It\u2019s helpful, but not essential (in my opinion), to find people who might add a recommendation for you. The main thing is to get something up there that you feel represents you. You should consistently be adding to and revising your profile, but don\u2019t wait until your have the&nbsp;<em>perfect profile<\/em>&nbsp;to get started. You gotta get in motion.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once you have your basic LinkedIn profile ready, you will use that information to fill out all other job posting sites that you deem to be useful. Make sure to turn on the setting that you\u2019re&nbsp;<em>Open to Work<\/em>&nbsp;and only to show recruiters if you don\u2019t want your current employer to know you\u2019re looking.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Indeed<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I found&nbsp;<a href=\"https:\/\/www.indeed.com\/\">Indeed<\/a>&nbsp;to be more focused on just listing jobs than LinkedIn\u2019s social media approach. It was far easier to find relevant job postings using Indeed than LinkedIn. You can browse jobs whenever you have a minute and always favorite them if you don\u2019t have time to apply that minute.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Setup your profile with your information from LinkedIn. Never rewrite stuff if you don\u2019t need to.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Similar to LinkedIn, Indeed has a&nbsp;<em>Ready to work<\/em>&nbsp;setting that you\u2019ll want to turn on.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Glassdoor<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Although&nbsp;<a href=\"https:\/\/www.glassdoor.com\/\">Glassdoor<\/a>&nbsp;is actually owned by Indeed, I found it offered value on it\u2019s own. It could help you get a feel for a company based on reviews employees have left. You always have to take them with a grain of salt, but it is helpful. Glassdoor also posts estimated salary expectations even if the job posting does not explicitly state. I\u2019m not sure how accurate the estimates are but it still helps.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Complete using the same principles as the other networks, enter your profile information and turn on the setting that tells everyone you\u2019re ready to work.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">State Sponsored Job Board<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You should look at your local government\u2019s job search options. Often they will have their own system that provides listings. I\u2019m in Iowa and we have&nbsp;<a href=\"https:\/\/iowaworks.gov\/\">IowaWORKS<\/a>. Can\u2019t say it\u2019s the best user experience but I have found some opportunities through their listings.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You may need to apply for jobs through this state sponsored job as well if you\u2019re applying for unemployment. In Iowa we are required to prove we\u2019ve applied to at least 3 jobs each week to qualify for unemployment. The way to track this is through the IowaWORKS website.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Others<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are so many out there. I have tried a few others but honestly there is enough in the above recommendations to keep you busy for a long time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Cover Letter<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I can\u2019t emphasize enough\u2014the cover letter matters. Yes, these jobs sites make it super easy to apply and you could just go for numbers and apply all over the place. However, remember that it\u2019s just as easy for all those other applicants as well.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Your cover letter will help you stand out<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Find a formula that you can use as the basis for every application and then customize per job. I know it\u2019s work, but your cover letter will help you stand out in the crowd. It\u2019s like you\u2019re elevator pitch. You need to prove to the recruiter that you are the best candidate for the job in less than a page.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Cover letter formula<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I\u2019ll share with you my secret sauce of how I write cover letters. I\u2019m sure there are better ways out there but this has worked for me.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Three quotes from the job posting<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This proves that you thoroughly read the posting and are highlighting to the recruiter specific ways that you fit this job description.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Find things that both excite you about this position and that match your skills.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>collaborate and mentor international teammates<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">First paragraph<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Start by summarizing your resume in a single paragraph. Maybe talk about a specific project you worked on or the technologies you specialize in. This is the only time in your resume you are going to talk about your accomplishments. The rest is going to focus on the needs of the employer and how you meet those.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Following three paragraphs<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The next three paragraphs you will give evidence of how you are a match for this job based on the three quotes you highlight at the top.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here is an example I have used that answers the example quote above:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>In my current position I have mentored four junior developers\u20143 of which were from Brazil\u2014on how to build applications with full-stack tools. Basecamp, which specializes in asynchronous collaboration, was used for day to day with regular teaching sessions by Zoom. I documented everything in a way that could be picked up by any one of those developers if I was unavailable.<\/p>\n<!-- \/wp:paragraph --><\/blockquote>\n<!-- \/wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I\u2019m giving the evidence of how my experience fulfills exactly what they are looking for.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Closing sentence<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I close the cover letter by saying that I think I would be an asset to their team and would love a chance to show them why.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Tracking the status of your search<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very quickly you will find it difficult to remember the status of any one of your applications. Did I apply already? Have I had one interview or two so far? Did they even answer me yet?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Notion databases<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can use anything to track your progress, but I found Notion to be an asset in this regard. Notion allowed me to list all jobs in a table. Then, for situations where I applied to multiple jobs, I had a separate table for the company list with a relationship to the jobs list.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I also have a kanban board view for the job list so that I can see the status of each with the classic kanban style columns. The further to the right, the closer I am to getting an offer.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Job Postings table<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I used the following fields but this is just to get your started. Add whatever information you want to track.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Job Title<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Company Name - this is a relationship to the&nbsp;<em>Job Companies<\/em>&nbsp;database<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Job posting link - I also add the job description to the body of the Notion page in case the job posting goes away at some point<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Status - I use these basic status\u2019 to know where I am in the process and to define the kanban board columns<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Applied<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>1st Interview<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>2nd Interview<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>3rd Interview<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>4th Interview (yes, sometimes there is a 4th\u2026)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Offer made<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>No match - when you or the company decide to go different directions<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Status notes - sometime reality doesn\u2019t fit into those specific categories, use this to explain where things are at<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Apply date<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>1st interview date<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>2nd interview date<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>3rd interview date<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>4th interview date<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4 class=\"wp-block-heading\">Job Companies<\/h4>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Name<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Website - I usually link to the careers page<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Contact name - usually recruiter or HR<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Address - applicable if you\u2019re looking at local on-premises work<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>I\u2019m sure there is more you could track on the company. I try not to complicate it too much for no reason. Most info on a company I can easily and quickly find from their website or a Google search.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I don\u2019t know that this is the perfect formula, but it\u2019s the one I have used fairly successfully in the past and will continue to evolve in the future. Online tools make this process more fun but can be overwhelming. Creating a system will help you simplify and focus on the jobs instead of the process.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Appendix<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Unemployment<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It sucks to be out of work and it\u2019s usually not a quick process to get hired. Depending on where you live there may be financial help to get you by.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Find out the options and requirements in your area. Many times it is linked to your job search so it is best to find out early so you can modify your system to take any requirements into account.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For instance, in Iowa you are required to apply to at least 3 jobs each week and log them in their system. I modified my system to track all the information they were looking for to qualify for unemployment.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ve recently begun to look for new work. I haven\u2019t had to do this specific type of job search in a long time since my last number of positions were through professional relationships. I pursued all of these career connections I had first, as that\u2019s usually the best way to land a position , but there are now so many resources for finding work that it can be overwhelming. I thought I\u2019d explain my process to help anyone in the same position.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Professional Connections<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>First and foremost,&nbsp;<em>let all your professional connections know you\u2019re looking for work<\/em>. Past co-workers, friends, neighbors\u2014whoever you know that is in the tech industry, just let them know one way or another that you\u2019re looking for work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I would prioritize in person meetings if you can. It goes a long way to be able to just sit down and have a conversation with someone about your career and thoughts about your future, even if it\u2019s just for your confidence level as you search for a job.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then, LinkedIn, Facebook, text messages are all good way to make that quick little touch. Sometimes in the past I would hesitate reaching out to someone, thinking that the only time I talk to them is when I need something. Then I started to look at it in a positive light\u2014maybe this is the perfect topic to reconnect and reestablish that relationship.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Job Sites<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">LinkedIn<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The next place I continue my search is&nbsp;<a href=\"https:\/\/www.linkedin.com\/\">LinkedIn<\/a>. Make sure all your profile information is up to date with at least your work experience and education. It\u2019s helpful, but not essential (in my opinion), to find people who might add a recommendation for you. The main thing is to get something up there that you feel represents you. You should consistently be adding to and revising your profile, but don\u2019t wait until your have the&nbsp;<em>perfect profile<\/em>&nbsp;to get started. You gotta get in motion.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Once you have your basic LinkedIn profile ready, you will use that information to fill out all other job posting sites that you deem to be useful. Make sure to turn on the setting that you\u2019re&nbsp;<em>Open to Work<\/em>&nbsp;and only to show recruiters if you don\u2019t want your current employer to know you\u2019re looking.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Indeed<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I found&nbsp;<a href=\"https:\/\/www.indeed.com\/\">Indeed<\/a>&nbsp;to be more focused on just listing jobs than LinkedIn\u2019s social media approach. It was far easier to find relevant job postings using Indeed than LinkedIn. You can browse jobs whenever you have a minute and always favorite them if you don\u2019t have time to apply that minute.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Setup your profile with your information from LinkedIn. Never rewrite stuff if you don\u2019t need to.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Similar to LinkedIn, Indeed has a&nbsp;<em>Ready to work<\/em>&nbsp;setting that you\u2019ll want to turn on.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Glassdoor<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Although&nbsp;<a href=\"https:\/\/www.glassdoor.com\/\">Glassdoor<\/a>&nbsp;is actually owned by Indeed, I found it offered value on it\u2019s own. It could help you get a feel for a company based on reviews employees have left. You always have to take them with a grain of salt, but it is helpful. Glassdoor also posts estimated salary expectations even if the job posting does not explicitly state. I\u2019m not sure how accurate the estimates are but it still helps.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Complete using the same principles as the other networks, enter your profile information and turn on the setting that tells everyone you\u2019re ready to work.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">State Sponsored Job Board<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You should look at your local government\u2019s job search options. Often they will have their own system that provides listings. I\u2019m in Iowa and we have&nbsp;<a href=\"https:\/\/iowaworks.gov\/\">IowaWORKS<\/a>. Can\u2019t say it\u2019s the best user experience but I have found some opportunities through their listings.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You may need to apply for jobs through this state sponsored job as well if you\u2019re applying for unemployment. In Iowa we are required to prove we\u2019ve applied to at least 3 jobs each week to qualify for unemployment. The way to track this is through the IowaWORKS website.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Others<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>There are so many out there. I have tried a few others but honestly there is enough in the above recommendations to keep you busy for a long time.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Cover Letter<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I can\u2019t emphasize enough\u2014the cover letter matters. Yes, these jobs sites make it super easy to apply and you could just go for numbers and apply all over the place. However, remember that it\u2019s just as easy for all those other applicants as well.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>Your cover letter will help you stand out<\/em>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Find a formula that you can use as the basis for every application and then customize per job. I know it\u2019s work, but your cover letter will help you stand out in the crowd. It\u2019s like you\u2019re elevator pitch. You need to prove to the recruiter that you are the best candidate for the job in less than a page.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Cover letter formula<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ll share with you my secret sauce of how I write cover letters. I\u2019m sure there are better ways out there but this has worked for me.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 4
                },
                "innerBlocks": [],
                "innerHTML": "\n<h4 class=\"wp-block-heading\">Three quotes from the job posting<\/h4>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This proves that you thoroughly read the posting and are highlighting to the recruiter specific ways that you fit this job description.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Find things that both excite you about this position and that match your skills.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here is an example:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/quote",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/paragraph",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<p>collaborate and mentor international teammates<\/p>\n"
                    }
                ],
                "innerHTML": "\n<blockquote class=\"wp-block-quote\"><\/blockquote>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 4
                },
                "innerBlocks": [],
                "innerHTML": "\n<h4 class=\"wp-block-heading\">First paragraph<\/h4>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Start by summarizing your resume in a single paragraph. Maybe talk about a specific project you worked on or the technologies you specialize in. This is the only time in your resume you are going to talk about your accomplishments. The rest is going to focus on the needs of the employer and how you meet those.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 4
                },
                "innerBlocks": [],
                "innerHTML": "\n<h4 class=\"wp-block-heading\">Following three paragraphs<\/h4>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The next three paragraphs you will give evidence of how you are a match for this job based on the three quotes you highlight at the top.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here is an example I have used that answers the example quote above:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/quote",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/paragraph",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<p>In my current position I have mentored four junior developers\u20143 of which were from Brazil\u2014on how to build applications with full-stack tools. Basecamp, which specializes in asynchronous collaboration, was used for day to day with regular teaching sessions by Zoom. I documented everything in a way that could be picked up by any one of those developers if I was unavailable.<\/p>\n"
                    }
                ],
                "innerHTML": "\n<blockquote class=\"wp-block-quote\"><\/blockquote>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019m giving the evidence of how my experience fulfills exactly what they are looking for.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 4
                },
                "innerBlocks": [],
                "innerHTML": "\n<h4 class=\"wp-block-heading\">Closing sentence<\/h4>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I close the cover letter by saying that I think I would be an asset to their team and would love a chance to show them why.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Tracking the status of your search<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Very quickly you will find it difficult to remember the status of any one of your applications. Did I apply already? Have I had one interview or two so far? Did they even answer me yet?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Notion databases<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You can use anything to track your progress, but I found Notion to be an asset in this regard. Notion allowed me to list all jobs in a table. Then, for situations where I applied to multiple jobs, I had a separate table for the company list with a relationship to the jobs list.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I also have a kanban board view for the job list so that I can see the status of each with the classic kanban style columns. The further to the right, the closer I am to getting an offer.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 4
                },
                "innerBlocks": [],
                "innerHTML": "\n<h4 class=\"wp-block-heading\">Job Postings table<\/h4>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I used the following fields but this is just to get your started. Add whatever information you want to track.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Job Title<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Company Name - this is a relationship to the&nbsp;<em>Job Companies<\/em>&nbsp;database<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Job posting link - I also add the job description to the body of the Notion page in case the job posting goes away at some point<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [
                            {
                                "blockName": "core\/list",
                                "attrs": [],
                                "innerBlocks": [
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>Applied<\/li>\n"
                                    },
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>1st Interview<\/li>\n"
                                    },
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>2nd Interview<\/li>\n"
                                    },
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>3rd Interview<\/li>\n"
                                    },
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>4th Interview (yes, sometimes there is a 4th\u2026)<\/li>\n"
                                    },
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>Offer made<\/li>\n"
                                    },
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>No match - when you or the company decide to go different directions<\/li>\n"
                                    }
                                ],
                                "innerHTML": "\n<ul>\n\n\n\n\n\n\n\n\n\n\n\n<\/ul>\n"
                            }
                        ],
                        "innerHTML": "\n<li>Status - I use these basic status\u2019 to know where I am in the process and to define the kanban board columns<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Status notes - sometime reality doesn\u2019t fit into those specific categories, use this to explain where things are at<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Apply date<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>1st interview date<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>2nd interview date<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>3rd interview date<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>4th interview date<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 4
                },
                "innerBlocks": [],
                "innerHTML": "\n<h4 class=\"wp-block-heading\">Job Companies<\/h4>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Name<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Website - I usually link to the careers page<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Contact name - usually recruiter or HR<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Address - applicable if you\u2019re looking at local on-premises work<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019m sure there is more you could track on the company. I try not to complicate it too much for no reason. Most info on a company I can easily and quickly find from their website or a Google search.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I don\u2019t know that this is the perfect formula, but it\u2019s the one I have used fairly successfully in the past and will continue to evolve in the future. Online tools make this process more fun but can be overwhelming. Creating a system will help you simplify and focus on the jobs instead of the process.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Appendix<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Unemployment<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It sucks to be out of work and it\u2019s usually not a quick process to get hired. Depending on where you live there may be financial help to get you by.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Find out the options and requirements in your area. Many times it is linked to your job search so it is best to find out early so you can modify your system to take any requirements into account.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For instance, in Iowa you are required to apply to at least 3 jobs each week and log them in their system. I modified my system to track all the information they were looking for to qualify for unemployment.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I\u2019ve recently begun to look for new work. I haven\u2019t had to do this specific type of job search in a long time since my last number of positions were through professional relationships. I pursued all of these career connections I had first, as that\u2019s usually the best way to land a position , but there are now so many resources for finding work that it can be overwhelming. I thought I\u2019d explain my process to help anyone in the same position.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Professional Connections<\/h2>\n\n\n\n<p>First and foremost,&nbsp;<em>let all your professional connections know you\u2019re looking for work<\/em>. Past co-workers, friends, neighbors\u2014whoever you know that is in the tech industry, just let them know one way or another that you\u2019re looking for work.<\/p>\n\n\n\n<p>I would prioritize in person meetings if you can. It goes a long way to be able to just sit down and have a conversation with someone about your career and thoughts about your future, even if it\u2019s just for your confidence level as you search for a job.<\/p>\n\n\n\n<p>Then, LinkedIn, Facebook, text messages are all good way to make that quick little touch. Sometimes in the past I would hesitate reaching out to someone, thinking that the only time I talk to them is when I need something. Then I started to look at it in a positive light\u2014maybe this is the perfect topic to reconnect and reestablish that relationship.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Job Sites<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">LinkedIn<\/h3>\n\n\n\n<p>The next place I continue my search is&nbsp;<a href=\"https:\/\/www.linkedin.com\/\">LinkedIn<\/a>. Make sure all your profile information is up to date with at least your work experience and education. It\u2019s helpful, but not essential (in my opinion), to find people who might add a recommendation for you. The main thing is to get something up there that you feel represents you. You should consistently be adding to and revising your profile, but don\u2019t wait until your have the&nbsp;<em>perfect profile<\/em>&nbsp;to get started. You gotta get in motion.<\/p>\n\n\n\n<p>Once you have your basic LinkedIn profile ready, you will use that information to fill out all other job posting sites that you deem to be useful. Make sure to turn on the setting that you\u2019re&nbsp;<em>Open to Work<\/em>&nbsp;and only to show recruiters if you don\u2019t want your current employer to know you\u2019re looking.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Indeed<\/h3>\n\n\n\n<p>I found&nbsp;<a href=\"https:\/\/www.indeed.com\/\">Indeed<\/a>&nbsp;to be more focused on just listing jobs than LinkedIn\u2019s social media approach. It was far easier to find relevant job postings using Indeed than LinkedIn. You can browse jobs whenever you have a minute and always favorite them if you don\u2019t have time to apply that minute.<\/p>\n\n\n\n<p>Setup your profile with your information from LinkedIn. Never rewrite stuff if you don\u2019t need to.<\/p>\n\n\n\n<p>Similar to LinkedIn, Indeed has a&nbsp;<em>Ready to work<\/em>&nbsp;setting that you\u2019ll want to turn on.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Glassdoor<\/h3>\n\n\n\n<p>Although&nbsp;<a href=\"https:\/\/www.glassdoor.com\/\">Glassdoor<\/a>&nbsp;is actually owned by Indeed, I found it offered value on it\u2019s own. It could help you get a feel for a company based on reviews employees have left. You always have to take them with a grain of salt, but it is helpful. Glassdoor also posts estimated salary expectations even if the job posting does not explicitly state. I\u2019m not sure how accurate the estimates are but it still helps.<\/p>\n\n\n\n<p>Complete using the same principles as the other networks, enter your profile information and turn on the setting that tells everyone you\u2019re ready to work.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">State Sponsored Job Board<\/h3>\n\n\n\n<p>You should look at your local government\u2019s job search options. Often they will have their own system that provides listings. I\u2019m in Iowa and we have&nbsp;<a href=\"https:\/\/iowaworks.gov\/\">IowaWORKS<\/a>. Can\u2019t say it\u2019s the best user experience but I have found some opportunities through their listings.<\/p>\n\n\n\n<p>You may need to apply for jobs through this state sponsored job as well if you\u2019re applying for unemployment. In Iowa we are required to prove we\u2019ve applied to at least 3 jobs each week to qualify for unemployment. The way to track this is through the IowaWORKS website.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Others<\/h3>\n\n\n\n<p>There are so many out there. I have tried a few others but honestly there is enough in the above recommendations to keep you busy for a long time.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Cover Letter<\/h2>\n\n\n\n<p>I can\u2019t emphasize enough\u2014the cover letter matters. Yes, these jobs sites make it super easy to apply and you could just go for numbers and apply all over the place. However, remember that it\u2019s just as easy for all those other applicants as well.<\/p>\n\n\n\n<p><em>Your cover letter will help you stand out<\/em>.<\/p>\n\n\n\n<p>Find a formula that you can use as the basis for every application and then customize per job. I know it\u2019s work, but your cover letter will help you stand out in the crowd. It\u2019s like you\u2019re elevator pitch. You need to prove to the recruiter that you are the best candidate for the job in less than a page.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Cover letter formula<\/h3>\n\n\n\n<p>I\u2019ll share with you my secret sauce of how I write cover letters. I\u2019m sure there are better ways out there but this has worked for me.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Three quotes from the job posting<\/h4>\n\n\n\n<p>This proves that you thoroughly read the posting and are highlighting to the recruiter specific ways that you fit this job description.<\/p>\n\n\n\n<p>Find things that both excite you about this position and that match your skills.<\/p>\n\n\n\n<p>Here is an example:<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>collaborate and mentor international teammates<\/p>\n<\/blockquote>\n\n\n\n<h4 class=\"wp-block-heading\">First paragraph<\/h4>\n\n\n\n<p>Start by summarizing your resume in a single paragraph. Maybe talk about a specific project you worked on or the technologies you specialize in. This is the only time in your resume you are going to talk about your accomplishments. The rest is going to focus on the needs of the employer and how you meet those.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Following three paragraphs<\/h4>\n\n\n\n<p>The next three paragraphs you will give evidence of how you are a match for this job based on the three quotes you highlight at the top.<\/p>\n\n\n\n<p>Here is an example I have used that answers the example quote above:<\/p>\n\n\n\n<blockquote class=\"wp-block-quote is-layout-flow wp-block-quote-is-layout-flow\">\n<p>In my current position I have mentored four junior developers\u20143 of which were from Brazil\u2014on how to build applications with full-stack tools. Basecamp, which specializes in asynchronous collaboration, was used for day to day with regular teaching sessions by Zoom. I documented everything in a way that could be picked up by any one of those developers if I was unavailable.<\/p>\n<\/blockquote>\n\n\n\n<p>I\u2019m giving the evidence of how my experience fulfills exactly what they are looking for.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Closing sentence<\/h4>\n\n\n\n<p>I close the cover letter by saying that I think I would be an asset to their team and would love a chance to show them why.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Tracking the status of your search<\/h2>\n\n\n\n<p>Very quickly you will find it difficult to remember the status of any one of your applications. Did I apply already? Have I had one interview or two so far? Did they even answer me yet?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Notion databases<\/h3>\n\n\n\n<p>You can use anything to track your progress, but I found Notion to be an asset in this regard. Notion allowed me to list all jobs in a table. Then, for situations where I applied to multiple jobs, I had a separate table for the company list with a relationship to the jobs list.<\/p>\n\n\n\n<p>I also have a kanban board view for the job list so that I can see the status of each with the classic kanban style columns. The further to the right, the closer I am to getting an offer.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Job Postings table<\/h4>\n\n\n\n<p>I used the following fields but this is just to get your started. Add whatever information you want to track.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Job Title<\/li>\n\n\n\n<li>Company Name &#8211; this is a relationship to the&nbsp;<em>Job Companies<\/em>&nbsp;database<\/li>\n\n\n\n<li>Job posting link &#8211; I also add the job description to the body of the Notion page in case the job posting goes away at some point<\/li>\n\n\n\n<li>Status &#8211; I use these basic status\u2019 to know where I am in the process and to define the kanban board columns\n<ul class=\"wp-block-list\">\n<li>Applied<\/li>\n\n\n\n<li>1st Interview<\/li>\n\n\n\n<li>2nd Interview<\/li>\n\n\n\n<li>3rd Interview<\/li>\n\n\n\n<li>4th Interview (yes, sometimes there is a 4th\u2026)<\/li>\n\n\n\n<li>Offer made<\/li>\n\n\n\n<li>No match &#8211; when you or the company decide to go different directions<\/li>\n<\/ul>\n<\/li>\n\n\n\n<li>Status notes &#8211; sometime reality doesn\u2019t fit into those specific categories, use this to explain where things are at<\/li>\n\n\n\n<li>Apply date<\/li>\n\n\n\n<li>1st interview date<\/li>\n\n\n\n<li>2nd interview date<\/li>\n\n\n\n<li>3rd interview date<\/li>\n\n\n\n<li>4th interview date<\/li>\n<\/ul>\n\n\n\n<h4 class=\"wp-block-heading\">Job Companies<\/h4>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Name<\/li>\n\n\n\n<li>Website &#8211; I usually link to the careers page<\/li>\n\n\n\n<li>Contact name &#8211; usually recruiter or HR<\/li>\n\n\n\n<li>Address &#8211; applicable if you\u2019re looking at local on-premises work<\/li>\n<\/ul>\n\n\n\n<p>I\u2019m sure there is more you could track on the company. I try not to complicate it too much for no reason. Most info on a company I can easily and quickly find from their website or a Google search.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n\n\n\n<p>I don\u2019t know that this is the perfect formula, but it\u2019s the one I have used fairly successfully in the past and will continue to evolve in the future. Online tools make this process more fun but can be overwhelming. Creating a system will help you simplify and focus on the jobs instead of the process.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Appendix<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Unemployment<\/h3>\n\n\n\n<p>It sucks to be out of work and it\u2019s usually not a quick process to get hired. Depending on where you live there may be financial help to get you by.<\/p>\n\n\n\n<p>Find out the options and requirements in your area. Many times it is linked to your job search so it is best to find out early so you can modify your system to take any requirements into account.<\/p>\n\n\n\n<p>For instance, in Iowa you are required to apply to at least 3 jobs each week and log them in their system. I modified my system to track all the information they were looking for to qualify for unemployment.<\/p>\n",
        "date": "2022-06-07 02:47:00",
        "slug": "searching-for-a-full-stack-developer-job-online",
        "excerpt": "I\u2019ve recently begun to look for new work. I haven\u2019t had to do this specific type of job search in a long time since my last number of positions were through professional relationships. I pursued all of these career connections I had first, as that\u2019s usually the best way to land a position , but [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 355,
        "title": "npm - install, update, or upgrade?",
        "content": "<!-- wp:paragraph -->\n<p>I\u2019ve been a user of npm for a long time and even still when it comes time to look at my dependencies, I\u2019m always confused as the the&nbsp;<em>official<\/em>&nbsp;method to update dependencies.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">npm install&nbsp;<em>library-name<\/em><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Install<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is the easiest and most obvious. When you run npm install it will install the latest release version of the plugin (excluding pre-release versions).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>npm install my-required-library<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Easy peasy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">npm install<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Update<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When you first clone a repo, you must do an&nbsp;<code>npm install<\/code>&nbsp;in order to grab the dependencies listed in package.json. The trick is it will automatically upgrade to the latest version of the dependency given the version rule.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For example, if we set the version in our library to&nbsp;<code>~1.2.0<\/code>&nbsp;and the latest version of the library is&nbsp;<code>1.2.6<\/code>, you will get 1.2.6. Or if your version in package.json is set to ^1.2.0 and the latest version is 1.3.2, you will be upgraded to 1.3.2.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>NOTE: It doesn\u2019t matter what is in your package-lock.json file, it will still update these libraries and also update the package-lock.json file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Any time you run&nbsp;<code>npm install<\/code>&nbsp;it will attempt to find the latest version that your package.json version rules allow.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">npm install&nbsp;<em>library-name@version-number<\/em><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Upgrade<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you want to upgrade a library beyond the version rule setup in your package.json, there are two ways. The first is to manually update the dependency version rule and run&nbsp;<code>npm install<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The prefer the second way, which feels more like an intentional upgrade.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>npm install library-name@version-number\n\n# example if version rule was currently ~1.2.0\nnpm install library-name@2<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>If you omit one or more points in the version, npm will assume you want to latest. If the latest version 2 was 2.1.5, that is what you would get.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is not an exhaustive description of npm version management, but it should give newcomers a better reference to the install, update, upgrade process that I wish I had known a lot sooner.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ve been a user of npm for a long time and even still when it comes time to look at my dependencies, I\u2019m always confused as the the&nbsp;<em>official<\/em>&nbsp;method to update dependencies.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">npm install&nbsp;<em>library-name<\/em><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Install<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is the easiest and most obvious. When you run npm install it will install the latest release version of the plugin (excluding pre-release versions).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>npm install my-required-library<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Easy peasy.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">npm install<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Update<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When you first clone a repo, you must do an&nbsp;<code>npm install<\/code>&nbsp;in order to grab the dependencies listed in package.json. The trick is it will automatically upgrade to the latest version of the dependency given the version rule.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For example, if we set the version in our library to&nbsp;<code>~1.2.0<\/code>&nbsp;and the latest version of the library is&nbsp;<code>1.2.6<\/code>, you will get 1.2.6. Or if your version in package.json is set to ^1.2.0 and the latest version is 1.3.2, you will be upgraded to 1.3.2.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>NOTE: It doesn\u2019t matter what is in your package-lock.json file, it will still update these libraries and also update the package-lock.json file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Any time you run&nbsp;<code>npm install<\/code>&nbsp;it will attempt to find the latest version that your package.json version rules allow.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">npm install&nbsp;<em>library-name@version-number<\/em><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Upgrade<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you want to upgrade a library beyond the version rule setup in your package.json, there are two ways. The first is to manually update the dependency version rule and run&nbsp;<code>npm install<\/code>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The prefer the second way, which feels more like an intentional upgrade.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>npm install library-name@version-number\n\n# example if version rule was currently ~1.2.0\nnpm install library-name@2<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you omit one or more points in the version, npm will assume you want to latest. If the latest version 2 was 2.1.5, that is what you would get.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is not an exhaustive description of npm version management, but it should give newcomers a better reference to the install, update, upgrade process that I wish I had known a lot sooner.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I\u2019ve been a user of npm for a long time and even still when it comes time to look at my dependencies, I\u2019m always confused as the the&nbsp;<em>official<\/em>&nbsp;method to update dependencies.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">npm install&nbsp;<em>library-name<\/em><\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Install<\/h3>\n\n\n\n<p>This is the easiest and most obvious. When you run npm install it will install the latest release version of the plugin (excluding pre-release versions).<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>npm install my-required-library<\/code><\/pre>\n\n\n\n<p>Easy peasy.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">npm install<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Update<\/h3>\n\n\n\n<p>When you first clone a repo, you must do an&nbsp;<code>npm install<\/code>&nbsp;in order to grab the dependencies listed in package.json. The trick is it will automatically upgrade to the latest version of the dependency given the version rule.<\/p>\n\n\n\n<p>For example, if we set the version in our library to&nbsp;<code>~1.2.0<\/code>&nbsp;and the latest version of the library is&nbsp;<code>1.2.6<\/code>, you will get 1.2.6. Or if your version in package.json is set to ^1.2.0 and the latest version is 1.3.2, you will be upgraded to 1.3.2.<\/p>\n\n\n\n<p>NOTE: It doesn\u2019t matter what is in your package-lock.json file, it will still update these libraries and also update the package-lock.json file.<\/p>\n\n\n\n<p>Any time you run&nbsp;<code>npm install<\/code>&nbsp;it will attempt to find the latest version that your package.json version rules allow.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">npm install&nbsp;<em>library-name@version-number<\/em><\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Upgrade<\/h3>\n\n\n\n<p>If you want to upgrade a library beyond the version rule setup in your package.json, there are two ways. The first is to manually update the dependency version rule and run&nbsp;<code>npm install<\/code>.<\/p>\n\n\n\n<p>The prefer the second way, which feels more like an intentional upgrade.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>npm install library-name@version-number\n\n# example if version rule was currently ~1.2.0\nnpm install library-name@2<\/code><\/pre>\n\n\n\n<p>If you omit one or more points in the version, npm will assume you want to latest. If the latest version 2 was 2.1.5, that is what you would get.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n\n\n\n<p>This is not an exhaustive description of npm version management, but it should give newcomers a better reference to the install, update, upgrade process that I wish I had known a lot sooner.<\/p>\n",
        "date": "2022-05-10 02:45:00",
        "slug": "npm-install-update-or-upgrade",
        "excerpt": "I\u2019ve been a user of npm for a long time and even still when it comes time to look at my dependencies, I\u2019m always confused as the the&nbsp;official&nbsp;method to update dependencies. npm install&nbsp;library-name Install This is the easiest and most obvious. When you run npm install it will install the latest release version of the [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 352,
        "title": "AWS CLI commands from FileMaker server Script and Verify Schedules",
        "content": "<!-- wp:paragraph -->\n<p>We ran into an issue where the batch file that we use to run an S3 backup script on a schedule with FileMaker server, was erroring out with no indication of why.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Setup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>FileMaker server has the ability to run scripts on a schedule. We want to run various scripts on schedules that will backup our databases to an S3 bucket.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We do this from the FileMaker server admin console under&nbsp;<em>Configuration &gt; Script and Verify Schedules.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We add the AWS CLI S3 backup command to a batch file as FileMaker server requires and put it in&nbsp;<code>c:\\Program Files\\FileMaker\\FileMaker Server\\Data\\Scripts<\/code>&nbsp;(or wherever FileMaker server was installed)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code># Contents of the batch file with the aws cli command\naws s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Details&nbsp;<a href=\"https:\/\/help.claris.com\/en\/server-help\/content\/schedule-run-system-script.html\">Running system script files<\/a>&nbsp;in the Claris FileMaker server 19 Help.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Running the script from FileMaker fails<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When selecting the script schedule in the FileMaker server console and clicking&nbsp;<em>Run Now<\/em>&nbsp;we would just get the quick response that it failed. The event log would just say that the script schedule was&nbsp;<em>aborted by user<\/em>. What!? We didn\u2019t abort it, so what is going on?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">User permissions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We know that FileMaker server runs the script as Local System. We wanted to first check if this user for some reason didn\u2019t have the correct permissions to run our AWS CLI S3 command.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We ended up finding an article about&nbsp;<a href=\"https:\/\/www.winhelponline.com\/blog\/run-program-as-system-localsystem-account-windows\/\">how to use PsExec.exe to open a command prompt<\/a>&nbsp;as the Local System user so we could do some testing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After all that, our bat file ran flawlessly. Wasn\u2019t a user permission issue.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Log output from FileMaker server calling script<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We decided to add some logging to the commands in our batch file so that it would save the output of the command to a text file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\n# Contents of the batch file with the aws cli command\naws s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete&gt;&gt; e:\\Backups\\Daily\\s3backup.log\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>We add a quick echo so that we know that the batch file was at least called. And the first time we tried it, that\u2019s all we got, a&nbsp;<em>TEST S3 backup command<\/em>&nbsp;in the s3backup.log file with nothing else. Weird.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then simplify...<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\n# Contents of the batch file with the aws cli command\naws --version&gt;&gt; e:\\Backups\\Daily\\s3backup.log<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Still nothing...ok, something weird is going on. Let\u2019s see if AWS CLI is in the path.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\necho %PATH%&gt;&gt; e:\\Backups\\Daily\\s3backup.log<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>AND WE FOUND OUR ISSUE! The output did not include the path to the aws cli!<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Solution<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It\u2019s unclear why only when FileMaker server would run the batch file that it didn\u2019t have the correct path. The only thing different from echoing the path from the command prompt as Local System and echoing the path through the batch file that FileMaker server executes is the AWS CLI.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The solution is to add the full path to the aws cli:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code># Contents of the batch file with the aws cli command\n\"c:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\" s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Remember the quotes around the path because of the space in&nbsp;<em>Program Files<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">AWS CLI install<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The only explanation for the path issue is how we installed the aws cli. It is installed as part of our CloudFormation stack using the&nbsp;<em>userdata<\/em>&nbsp;metadata.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code># Install AWS cli\nmsiexec.exe \/i https:\/\/awscli.amazonaws.com\/AWSCLIV2.msi \/quiet \/norestart<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I have no idea why that would not modify the path in the one context where FileMaker server runs and yet adds it to the path in every other context we tried.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We ran into an issue where the batch file that we use to run an S3 backup script on a schedule with FileMaker server, was erroring out with no indication of why.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Setup<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>FileMaker server has the ability to run scripts on a schedule. We want to run various scripts on schedules that will backup our databases to an S3 bucket.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We do this from the FileMaker server admin console under&nbsp;<em>Configuration &gt; Script and Verify Schedules.<\/em><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We add the AWS CLI S3 backup command to a batch file as FileMaker server requires and put it in&nbsp;<code>c:\\Program Files\\FileMaker\\FileMaker Server\\Data\\Scripts<\/code>&nbsp;(or wherever FileMaker server was installed)<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code># Contents of the batch file with the aws cli command\naws s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Details&nbsp;<a href=\"https:\/\/help.claris.com\/en\/server-help\/content\/schedule-run-system-script.html\">Running system script files<\/a>&nbsp;in the Claris FileMaker server 19 Help.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Running the script from FileMaker fails<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When selecting the script schedule in the FileMaker server console and clicking&nbsp;<em>Run Now<\/em>&nbsp;we would just get the quick response that it failed. The event log would just say that the script schedule was&nbsp;<em>aborted by user<\/em>. What!? We didn\u2019t abort it, so what is going on?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">User permissions<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We know that FileMaker server runs the script as Local System. We wanted to first check if this user for some reason didn\u2019t have the correct permissions to run our AWS CLI S3 command.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We ended up finding an article about&nbsp;<a href=\"https:\/\/www.winhelponline.com\/blog\/run-program-as-system-localsystem-account-windows\/\">how to use PsExec.exe to open a command prompt<\/a>&nbsp;as the Local System user so we could do some testing.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>After all that, our bat file ran flawlessly. Wasn\u2019t a user permission issue.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Log output from FileMaker server calling script<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We decided to add some logging to the commands in our batch file so that it would save the output of the command to a text file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\n# Contents of the batch file with the aws cli command\naws s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete&gt;&gt; e:\\Backups\\Daily\\s3backup.log\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We add a quick echo so that we know that the batch file was at least called. And the first time we tried it, that\u2019s all we got, a&nbsp;<em>TEST S3 backup command<\/em>&nbsp;in the s3backup.log file with nothing else. Weird.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then simplify...<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\n# Contents of the batch file with the aws cli command\naws --version&gt;&gt; e:\\Backups\\Daily\\s3backup.log<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Still nothing...ok, something weird is going on. Let\u2019s see if AWS CLI is in the path.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\necho %PATH%&gt;&gt; e:\\Backups\\Daily\\s3backup.log<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>AND WE FOUND OUR ISSUE! The output did not include the path to the aws cli!<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Solution<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It\u2019s unclear why only when FileMaker server would run the batch file that it didn\u2019t have the correct path. The only thing different from echoing the path from the command prompt as Local System and echoing the path through the batch file that FileMaker server executes is the AWS CLI.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The solution is to add the full path to the aws cli:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code># Contents of the batch file with the aws cli command\n\"c:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\" s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Remember the quotes around the path because of the space in&nbsp;<em>Program Files<\/em>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">AWS CLI install<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The only explanation for the path issue is how we installed the aws cli. It is installed as part of our CloudFormation stack using the&nbsp;<em>userdata<\/em>&nbsp;metadata.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code\"><code># Install AWS cli\nmsiexec.exe \/i https:\/\/awscli.amazonaws.com\/AWSCLIV2.msi \/quiet \/norestart<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I have no idea why that would not modify the path in the one context where FileMaker server runs and yet adds it to the path in every other context we tried.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>We ran into an issue where the batch file that we use to run an S3 backup script on a schedule with FileMaker server, was erroring out with no indication of why.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Setup<\/h2>\n\n\n\n<p>FileMaker server has the ability to run scripts on a schedule. We want to run various scripts on schedules that will backup our databases to an S3 bucket.<\/p>\n\n\n\n<p>We do this from the FileMaker server admin console under&nbsp;<em>Configuration &gt; Script and Verify Schedules.<\/em><\/p>\n\n\n\n<p>We add the AWS CLI S3 backup command to a batch file as FileMaker server requires and put it in&nbsp;<code>c:\\Program Files\\FileMaker\\FileMaker Server\\Data\\Scripts<\/code>&nbsp;(or wherever FileMaker server was installed)<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code># Contents of the batch file with the aws cli command\naws s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete\n<\/code><\/pre>\n\n\n\n<p>Details&nbsp;<a href=\"https:\/\/help.claris.com\/en\/server-help\/content\/schedule-run-system-script.html\">Running system script files<\/a>&nbsp;in the Claris FileMaker server 19 Help.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Running the script from FileMaker fails<\/h2>\n\n\n\n<p>When selecting the script schedule in the FileMaker server console and clicking&nbsp;<em>Run Now<\/em>&nbsp;we would just get the quick response that it failed. The event log would just say that the script schedule was&nbsp;<em>aborted by user<\/em>. What!? We didn\u2019t abort it, so what is going on?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">User permissions<\/h3>\n\n\n\n<p>We know that FileMaker server runs the script as Local System. We wanted to first check if this user for some reason didn\u2019t have the correct permissions to run our AWS CLI S3 command.<\/p>\n\n\n\n<p>We ended up finding an article about&nbsp;<a href=\"https:\/\/www.winhelponline.com\/blog\/run-program-as-system-localsystem-account-windows\/\">how to use PsExec.exe to open a command prompt<\/a>&nbsp;as the Local System user so we could do some testing.<\/p>\n\n\n\n<p>After all that, our bat file ran flawlessly. Wasn\u2019t a user permission issue.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Log output from FileMaker server calling script<\/h3>\n\n\n\n<p>We decided to add some logging to the commands in our batch file so that it would save the output of the command to a text file.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\n# Contents of the batch file with the aws cli command\naws s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete&gt;&gt; e:\\Backups\\Daily\\s3backup.log\n<\/code><\/pre>\n\n\n\n<p>We add a quick echo so that we know that the batch file was at least called. And the first time we tried it, that\u2019s all we got, a&nbsp;<em>TEST S3 backup command<\/em>&nbsp;in the s3backup.log file with nothing else. Weird.<\/p>\n\n\n\n<p>Then simplify&#8230;<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\n# Contents of the batch file with the aws cli command\naws --version&gt;&gt; e:\\Backups\\Daily\\s3backup.log<\/code><\/pre>\n\n\n\n<p>Still nothing&#8230;ok, something weird is going on. Let\u2019s see if AWS CLI is in the path.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>echo \"TEST S3 backup command\"&gt;&gt;e:\\Backups\\Daily\\s3backup.log\necho %PATH%&gt;&gt; e:\\Backups\\Daily\\s3backup.log<\/code><\/pre>\n\n\n\n<p>AND WE FOUND OUR ISSUE! The output did not include the path to the aws cli!<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Solution<\/h2>\n\n\n\n<p>It\u2019s unclear why only when FileMaker server would run the batch file that it didn\u2019t have the correct path. The only thing different from echoing the path from the command prompt as Local System and echoing the path through the batch file that FileMaker server executes is the AWS CLI.<\/p>\n\n\n\n<p>The solution is to add the full path to the aws cli:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code># Contents of the batch file with the aws cli command\n\"c:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe\" s3 sync e:\\Backups\\Daily s3:\/\/oapc-s3-backup-dev\/Daily --delete<\/code><\/pre>\n\n\n\n<p>Remember the quotes around the path because of the space in&nbsp;<em>Program Files<\/em>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">AWS CLI install<\/h3>\n\n\n\n<p>The only explanation for the path issue is how we installed the aws cli. It is installed as part of our CloudFormation stack using the&nbsp;<em>userdata<\/em>&nbsp;metadata.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Install AWS cli\nmsiexec.exe \/i https:\/\/awscli.amazonaws.com\/AWSCLIV2.msi \/quiet \/norestart<\/code><\/pre>\n\n\n\n<p>I have no idea why that would not modify the path in the one context where FileMaker server runs and yet adds it to the path in every other context we tried.<\/p>\n",
        "date": "2022-05-03 02:41:00",
        "slug": "aws-cli-commands-from-filemaker-server-script-and-verify-schedules",
        "excerpt": "We ran into an issue where the batch file that we use to run an S3 backup script on a schedule with FileMaker server, was erroring out with no indication of why. Setup FileMaker server has the ability to run scripts on a schedule. We want to run various scripts on schedules that will backup [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 349,
        "title": "True and false for CloudFormation parameters",
        "content": "<!-- wp:paragraph -->\n<p>CloudFormation doesn\u2019t offer an official boolean type when dealing with parameters, but I\u2019ve found that the coercion of values works pretty well. Using this method helps to avoid a lot of unnecessary if statements in our templates.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">True \/ False parameters<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Although there are no true boolean parameters types, there are boolean properties that exist in CloudFormation. If we wanted to parameterize any of these properties we either have to use and if statement, or we can allow CloudFormation to coerce the value from a string.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I don\u2019t have a great example of this but would refer to an excellent blog post by&nbsp;<a href=\"https:\/\/github.com\/farski\">farski<\/a>&nbsp;entitled \u201c<a href=\"https:\/\/www.awholenother.com\/2020\/06\/20\/boolean-parameters-in-cloudformation.html\">Boolean Parameters in CloudFormation<\/a>\u201d where he illustrates using the&nbsp;<em>ObjectLockEnabled<\/em>&nbsp;property of an S3 bucket.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For my purposes, I\u2019m going to show how this looks with conditions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-yaml\"} -->\n<pre class=\"wp-block-code lang-yaml\"><code>Parameters:\n  ExistingVPC:\n    Description: Do you want to use an existing VPC?\n    Type: String\n    Default: false\n    AllowedValues:\n      - true\n      - false\n\nConditions:\n  IsExistingVPC: !Equals &#091;!Ref ExistingVPC, true]\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">It\u2019s Still a String...<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In the above example you need to remember that even though YAML interprets the booleans, CloudFormation will coerce them into strings. That is why we can\u2019t do something like:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-yaml\"} -->\n<pre class=\"wp-block-code lang-yaml\"><code>Conditions:\n  IsExistingVPC: !Ref ExistingVPC\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>CloudFormation will interpret this as a string and the condition will error out because it expects a true boolean. That is why we need the function !Equals to return a true boolean.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>!Equals will coerce the boolean into a string, compare it with the parameter, which is also coerced to a string, and evaluate to the true boolean true for the condition.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Benefits<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The primary benefits to this method compared to straight strings:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Properties - This is illustrated by the blog post mentioned above.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>YAML code highlighting - Don\u2019t underestimate the value of code highlighting. Boolean values show different than strings and help with readability.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Future proof - If CloudFormation ever does add boolean parameters values, you\u2019ll already be taking advantage.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Reduce code complexity - Don\u2019t need so many if statements.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>CloudFormation doesn\u2019t offer an official boolean type when dealing with parameters, but I\u2019ve found that the coercion of values works pretty well. Using this method helps to avoid a lot of unnecessary if statements in our templates.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">True \/ False parameters<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Although there are no true boolean parameters types, there are boolean properties that exist in CloudFormation. If we wanted to parameterize any of these properties we either have to use and if statement, or we can allow CloudFormation to coerce the value from a string.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I don\u2019t have a great example of this but would refer to an excellent blog post by&nbsp;<a href=\"https:\/\/github.com\/farski\">farski<\/a>&nbsp;entitled \u201c<a href=\"https:\/\/www.awholenother.com\/2020\/06\/20\/boolean-parameters-in-cloudformation.html\">Boolean Parameters in CloudFormation<\/a>\u201d where he illustrates using the&nbsp;<em>ObjectLockEnabled<\/em>&nbsp;property of an S3 bucket.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For my purposes, I\u2019m going to show how this looks with conditions.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-yaml"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-yaml\"><code>Parameters:\n  ExistingVPC:\n    Description: Do you want to use an existing VPC?\n    Type: String\n    Default: false\n    AllowedValues:\n      - true\n      - false\n\nConditions:\n  IsExistingVPC: !Equals &#091;!Ref ExistingVPC, true]\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">It\u2019s Still a String...<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In the above example you need to remember that even though YAML interprets the booleans, CloudFormation will coerce them into strings. That is why we can\u2019t do something like:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-yaml"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-yaml\"><code>Conditions:\n  IsExistingVPC: !Ref ExistingVPC\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>CloudFormation will interpret this as a string and the condition will error out because it expects a true boolean. That is why we need the function !Equals to return a true boolean.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>!Equals will coerce the boolean into a string, compare it with the parameter, which is also coerced to a string, and evaluate to the true boolean true for the condition.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Benefits<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The primary benefits to this method compared to straight strings:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Properties - This is illustrated by the blog post mentioned above.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>YAML code highlighting - Don\u2019t underestimate the value of code highlighting. Boolean values show different than strings and help with readability.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Future proof - If CloudFormation ever does add boolean parameters values, you\u2019ll already be taking advantage.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Reduce code complexity - Don\u2019t need so many if statements.<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n\n\n<\/ul>\n"
            }
        ],
        "rendered_content": "\n<p>CloudFormation doesn\u2019t offer an official boolean type when dealing with parameters, but I\u2019ve found that the coercion of values works pretty well. Using this method helps to avoid a lot of unnecessary if statements in our templates.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">True \/ False parameters<\/h2>\n\n\n\n<p>Although there are no true boolean parameters types, there are boolean properties that exist in CloudFormation. If we wanted to parameterize any of these properties we either have to use and if statement, or we can allow CloudFormation to coerce the value from a string.<\/p>\n\n\n\n<p>I don\u2019t have a great example of this but would refer to an excellent blog post by&nbsp;<a href=\"https:\/\/github.com\/farski\">farski<\/a>&nbsp;entitled \u201c<a href=\"https:\/\/www.awholenother.com\/2020\/06\/20\/boolean-parameters-in-cloudformation.html\">Boolean Parameters in CloudFormation<\/a>\u201d where he illustrates using the&nbsp;<em>ObjectLockEnabled<\/em>&nbsp;property of an S3 bucket.<\/p>\n\n\n\n<p>For my purposes, I\u2019m going to show how this looks with conditions.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-yaml\"><code>Parameters:\n  ExistingVPC:\n    Description: Do you want to use an existing VPC?\n    Type: String\n    Default: false\n    AllowedValues:\n      - true\n      - false\n\nConditions:\n  IsExistingVPC: !Equals &#091;!Ref ExistingVPC, true]\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">It\u2019s Still a String&#8230;<\/h3>\n\n\n\n<p>In the above example you need to remember that even though YAML interprets the booleans, CloudFormation will coerce them into strings. That is why we can\u2019t do something like:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-yaml\"><code>Conditions:\n  IsExistingVPC: !Ref ExistingVPC\n<\/code><\/pre>\n\n\n\n<p>CloudFormation will interpret this as a string and the condition will error out because it expects a true boolean. That is why we need the function !Equals to return a true boolean.<\/p>\n\n\n\n<p>!Equals will coerce the boolean into a string, compare it with the parameter, which is also coerced to a string, and evaluate to the true boolean true for the condition.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Benefits<\/h3>\n\n\n\n<p>The primary benefits to this method compared to straight strings:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Properties &#8211; This is illustrated by the blog post mentioned above.<\/li>\n\n\n\n<li>YAML code highlighting &#8211; Don\u2019t underestimate the value of code highlighting. Boolean values show different than strings and help with readability.<\/li>\n\n\n\n<li>Future proof &#8211; If CloudFormation ever does add boolean parameters values, you\u2019ll already be taking advantage.<\/li>\n\n\n\n<li>Reduce code complexity &#8211; Don\u2019t need so many if statements.<\/li>\n<\/ul>\n",
        "date": "2022-03-14 02:39:00",
        "slug": "true-and-false-for-cloudformation-parameters",
        "excerpt": "CloudFormation doesn\u2019t offer an official boolean type when dealing with parameters, but I\u2019ve found that the coercion of values works pretty well. Using this method helps to avoid a lot of unnecessary if statements in our templates. True \/ False parameters Although there are no true boolean parameters types, there are boolean properties that exist [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 346,
        "title": "Namespace for multi-stack CloudFormation Deployments",
        "content": "<!-- wp:paragraph -->\n<p>Naming on the best of days in any programming language can be one of the hardest things to do and increase technical debt by leaps and bounds. CloudFormation and AWS take naming to a new level with so many different layers of naming and potential naming collisions.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is our approach to this issue.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Namespace<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A namespace is simply a way to identify based on the name of the resource, property, or whatever else requires a name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We do this with 2 elements:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>App prefix - This is an abbreviated app identifier.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Environment prefix - Defines the environment we are deploying.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>With the combination of these two naming elements we can differentiate each deployment.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">App Prefix<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We use a 4 letter uppercase abbreviation of our app. This is hardcoded into the CloudFormation templates before each variable name.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We haven\u2019t done this for logical names since they are local to the template. We may need to do this at some point but currently this is not necessary and I can\u2019t think of a good reason we need would need to.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For our example we\u2019ll use the prefix:&nbsp;<code>MYAPP<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Environment Suffix<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This begins with a parameter:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-yaml\"} -->\n<pre class=\"wp-block-code lang-yaml\"><code>Parameters:\n  Environment:\n    Description: What is the environment is this deployment? This will be appended to all resources to identify their environment.\n    Type: String\n    Default: stg\n    AllowedValues:\n      - dev\n      - stg\n      - prd\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I have debated whether we should add the environment as a prefix as well but haven\u2019t decided it was better yet.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now we have access to that parameter that can be appended to any name we need.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-yaml\"} -->\n<pre class=\"wp-block-code lang-yaml\"><code>Resources:\n  MyVPC:\n    Type: \"AWS::EC2::VPC\"\n    Properties:\n      CidrBlock: !Ref VpcCidrBlock\n      Tags:\n        - Key: Name\n          Value: !Sub MYAPP-VPC-${Environment}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now we can deploy our app multiple times in the same account without naming collision. We would end up with the following VPCs based on the above example:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>MYAPP-VPC-dev<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>MYAPP-VPC-stg<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>MYAPP-VPC-prd<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Multiple Template Deployments<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our specific application is broken into multiple CloudFormation templates for a number of reasons. With this naming methodology, we only need to duplicate the environment parameter for each template.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By setting the environment we automatically are matching up the different resources. We can import values from the right deployment because we have specified the environment.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Naming on the best of days in any programming language can be one of the hardest things to do and increase technical debt by leaps and bounds. CloudFormation and AWS take naming to a new level with so many different layers of naming and potential naming collisions.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is our approach to this issue.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Namespace<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>A namespace is simply a way to identify based on the name of the resource, property, or whatever else requires a name.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We do this with 2 elements:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>App prefix - This is an abbreviated app identifier.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Environment prefix - Defines the environment we are deploying.<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>With the combination of these two naming elements we can differentiate each deployment.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">App Prefix<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We use a 4 letter uppercase abbreviation of our app. This is hardcoded into the CloudFormation templates before each variable name.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We haven\u2019t done this for logical names since they are local to the template. We may need to do this at some point but currently this is not necessary and I can\u2019t think of a good reason we need would need to.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For our example we\u2019ll use the prefix:&nbsp;<code>MYAPP<\/code><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Environment Suffix<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This begins with a parameter:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-yaml"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-yaml\"><code>Parameters:\n  Environment:\n    Description: What is the environment is this deployment? This will be appended to all resources to identify their environment.\n    Type: String\n    Default: stg\n    AllowedValues:\n      - dev\n      - stg\n      - prd\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I have debated whether we should add the environment as a prefix as well but haven\u2019t decided it was better yet.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we have access to that parameter that can be appended to any name we need.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-yaml"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-yaml\"><code>Resources:\n  MyVPC:\n    Type: \"AWS::EC2::VPC\"\n    Properties:\n      CidrBlock: !Ref VpcCidrBlock\n      Tags:\n        - Key: Name\n          Value: !Sub MYAPP-VPC-${Environment}\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we can deploy our app multiple times in the same account without naming collision. We would end up with the following VPCs based on the above example:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>MYAPP-VPC-dev<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>MYAPP-VPC-stg<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>MYAPP-VPC-prd<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Multiple Template Deployments<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Our specific application is broken into multiple CloudFormation templates for a number of reasons. With this naming methodology, we only need to duplicate the environment parameter for each template.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>By setting the environment we automatically are matching up the different resources. We can import values from the right deployment because we have specified the environment.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>Naming on the best of days in any programming language can be one of the hardest things to do and increase technical debt by leaps and bounds. CloudFormation and AWS take naming to a new level with so many different layers of naming and potential naming collisions.<\/p>\n\n\n\n<p>This is our approach to this issue.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Namespace<\/h2>\n\n\n\n<p>A namespace is simply a way to identify based on the name of the resource, property, or whatever else requires a name.<\/p>\n\n\n\n<p>We do this with 2 elements:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>App prefix &#8211; This is an abbreviated app identifier.<\/li>\n\n\n\n<li>Environment prefix &#8211; Defines the environment we are deploying.<\/li>\n<\/ul>\n\n\n\n<p>With the combination of these two naming elements we can differentiate each deployment.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">App Prefix<\/h2>\n\n\n\n<p>We use a 4 letter uppercase abbreviation of our app. This is hardcoded into the CloudFormation templates before each variable name.<\/p>\n\n\n\n<p>We haven\u2019t done this for logical names since they are local to the template. We may need to do this at some point but currently this is not necessary and I can\u2019t think of a good reason we need would need to.<\/p>\n\n\n\n<p>For our example we\u2019ll use the prefix:&nbsp;<code>MYAPP<\/code><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Environment Suffix<\/h2>\n\n\n\n<p>This begins with a parameter:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-yaml\"><code>Parameters:\n  Environment:\n    Description: What is the environment is this deployment? This will be appended to all resources to identify their environment.\n    Type: String\n    Default: stg\n    AllowedValues:\n      - dev\n      - stg\n      - prd\n<\/code><\/pre>\n\n\n\n<p>I have debated whether we should add the environment as a prefix as well but haven\u2019t decided it was better yet.<\/p>\n\n\n\n<p>Now we have access to that parameter that can be appended to any name we need.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-yaml\"><code>Resources:\n  MyVPC:\n    Type: \"AWS::EC2::VPC\"\n    Properties:\n      CidrBlock: !Ref VpcCidrBlock\n      Tags:\n        - Key: Name\n          Value: !Sub MYAPP-VPC-${Environment}\n<\/code><\/pre>\n\n\n\n<p>Now we can deploy our app multiple times in the same account without naming collision. We would end up with the following VPCs based on the above example:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>MYAPP-VPC-dev<\/li>\n\n\n\n<li>MYAPP-VPC-stg<\/li>\n\n\n\n<li>MYAPP-VPC-prd<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Multiple Template Deployments<\/h2>\n\n\n\n<p>Our specific application is broken into multiple CloudFormation templates for a number of reasons. With this naming methodology, we only need to duplicate the environment parameter for each template.<\/p>\n\n\n\n<p>By setting the environment we automatically are matching up the different resources. We can import values from the right deployment because we have specified the environment.<\/p>\n",
        "date": "2022-03-14 02:37:00",
        "slug": "namespace-for-multi-stack-cloudformation-deployments",
        "excerpt": "Naming on the best of days in any programming language can be one of the hardest things to do and increase technical debt by leaps and bounds. CloudFormation and AWS take naming to a new level with so many different layers of naming and potential naming collisions. This is our approach to this issue. Namespace [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 343,
        "title": "Scripting CloudFormation deployments",
        "content": "<!-- wp:paragraph -->\n<p>We try to use CloudFormation whenever we are building AWS infrastructure because of two main factors:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Repeatability<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Code history with Git<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>Using the AWS console to deploy can get tedious when you\u2019re working through issues with the deployment. I\u2019d love to say I can write perfect CloudFormation templates every time but that\u2019s just not true. And the only way to truly validate your code is to attempt to deploy it (hopefully in some kind of staging area!).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">AWS CLI<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>That\u2019s where the AWS CLI comes in. From the command line on my own machine I can deploy CloudFormation templates and have a quicker feedback loop.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But even the AWS CLI is limited in what it can do. I mean, I suppose I could write complex bash scripts to bend it to my will, but my bash skills are beginner at best.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">AWS Javascript SDK<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>My Javascript skills, however, are much more developed. This is where the AWS Javascript SDK comes in to play. Now we\u2019re able to deploy CloudFormation and use Javascript logic to deal with the inputs and outputs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">CMake<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>For whatever reason I didn\u2019t have CMake on my new Mac Mini. I don\u2019t remember installing it on my old laptop but alas, I guess I just need it. I try to use Homebrew for these kinds of needs.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>brew install cmake<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Configure AWS User<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You will still need the AWS CLI in order to save your user information so that you don\u2019t have to add it to every script.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>aws configure<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>This will ask you for your secret information from the IAM user that has the ability to deploy CloudFormation and any other necessary privileges.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Upload Templates<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In order to deploy CloudFormation templates we must first upload them to an S3 bucket. I usually make this it\u2019s own script so I can include it in however many other scripts need it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We need a couple pieces of information for this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>S3 Bucket name<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Path to folder with templates<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:paragraph -->\n<p>We end up with the following:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const { S3Client, PutObjectCommand } = require(\"@aws-sdk\/client-s3\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\nconst bucket = \"cf-templates-s3\";\n\nconst pathToFiles = path.resolve(__dirname + \"\/pathToTemplates\");\nconst files = fs.readdirSync(pathToFiles);\n\nconst s3Client = new S3Client();\n\nfiles.forEach(async (filename) =&gt; {\n  try {\n    const data = await s3Client.send(\n      new PutObjectCommand({\n        Bucket: bucket,\n        Key: path.basename(filename),\n        Body: fs.createReadStream(`${pathToFiles}\/${filename}`),\n      })\n    );\n    console.log(\"Success\", data);\n  } catch (err) {\n    console.log(\"Error\", err);\n  } finally {\n    console.log(\"Upload script finished\");\n  }\n});<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now we create a script in our package JSON so we can run it from the command line easily and add to other scripts.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>\"scripts\": {\n    \"upload-templates\": \"node .\/scripts\/uploadTemplates.js\"\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Deploy CloudFormation file<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So far I have created a separate Javascript file for each CloudFormation file I upload. This is due to the nature of our system. However, there wouldn\u2019t be anything from stopping one from passing the name of the template as a parameter and deploying that way.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We need the following information:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>What we want to call our changeset<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>The stack name we\u2019re updating (this is process is only for updating, we still create our stacks through the AWS console)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Path to the CloudFormation template file in our S3 bucket<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Create Changeset<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We always use changesets. It seems a bit like Russian-roulette to deploy without first confirming what is going to change.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const createChangeSet = await cf.send(\n  new CreateChangeSetCommand({\n    Capabilities: &#091;\"CAPABILITY_NAMED_IAM\"],\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n    TemplateURL: `https:\/\/s3.amazonaws.com\/${bucket}\/cfTemplate.yaml`,\n    Parameters: &#091;\n      { ParameterKey: \"parameter1\", UsePreviousValue: true },\n      { ParameterKey: \"parameter2\", UsePreviousValue: true },\n    ],\n  })\n);<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p><strong>Capabilities<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is only necessary if we are doing things like adding IAM roles. Normally you would have to check a box if doing it through the console. Here we can add the capabilities we need which is just another confirmation that we know the contents of this CloudFormation file and we known what we\u2019re doing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Parameters<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Since we\u2019re just updating our stack, we want to preserve all the parameter values we entered when we created the stack. We need to add a line for each parameter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Wait for Changeset to Complete<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Since the creation of the changeset is an asynchronous command, if we want to wait for the result, we need to use the&nbsp;<code>waitUntilChangeSetCreateComplete<\/code>&nbsp;function.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>try {\n  const done = await waitUntilChangeSetCreateComplete(\n    { client: cf, minDelay: 5, maxDelay: 10 },\n    { ChangeSetName: changeSetName, StackName: stackName }\n  );\n  console.log(\"done\", done);\n} catch (err) {\n  console.log(\"There was an error creating the change set.\", err);\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Once it\u2019s complete, we use&nbsp;<code>DescribeChangeSetCommand<\/code>&nbsp;to find out if it completed successfully or not. If it returns anything other than&nbsp;<code>CREATE_COMPLETE<\/code>, we exit our script with an error message.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const describeChangeSet = await cf.send(\n  new DescribeChangeSetCommand({\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n  })\n);\n\nif (describeChangeSet.Status !== \"CREATE_COMPLETE\") {\n  console.log(describeChangeSet.StatusReason);\n  return false;\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then we print out the results of the changeset to the console and ask the user if they want to execute the changeset.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const ok = await yesno({\n  question: \"Do you want to execute this changeset? &#091;y\/n] \",\n});\n\nif (!ok) return false;<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Executing Changeset<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const execute = await cf.send(\n  new ExecuteChangeSetCommand({\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n  })\n);<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Similar to how we had to check if the creation of the changeset was complete, we need to check if the stack update has completed with&nbsp;<code>waitUntilStackUpdateComplete<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const updateDone = await waitUntilStackUpdateComplete(\n  { client: cf, minDelay: 5, maxDelay: 10 },\n  { StackName: stackName }\n);\nconsole.log(\"update done\", updateDone);\n\n\/\/ If there was an error, don't go any further\nif (updateDone.state !== \"SUCCESS\") {\n  console.log(\"There was an error implementing the changestack.\");\n  return false;\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Update Package.json<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we can add another script to our package JSON that will first upload the templates and then deploy the CloudFormation template<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>\"scripts\": {\n    \"upload-templates\": \"node .\/scripts\/uploadTemplates.js\",\n    \"update-cf\": \"npm run upload-templates &amp;&amp; node .\/scripts\/update-cf.js\"\n  }<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now we can run&nbsp;<code>npm run update-cf<\/code>&nbsp;and start the feedback loop to speed up the debug process.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We try to use CloudFormation whenever we are building AWS infrastructure because of two main factors:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Repeatability<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Code history with Git<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n<\/ol>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Using the AWS console to deploy can get tedious when you\u2019re working through issues with the deployment. I\u2019d love to say I can write perfect CloudFormation templates every time but that\u2019s just not true. And the only way to truly validate your code is to attempt to deploy it (hopefully in some kind of staging area!).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">AWS CLI<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That\u2019s where the AWS CLI comes in. From the command line on my own machine I can deploy CloudFormation templates and have a quicker feedback loop.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>But even the AWS CLI is limited in what it can do. I mean, I suppose I could write complex bash scripts to bend it to my will, but my bash skills are beginner at best.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">AWS Javascript SDK<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>My Javascript skills, however, are much more developed. This is where the AWS Javascript SDK comes in to play. Now we\u2019re able to deploy CloudFormation and use Javascript logic to deal with the inputs and outputs.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">CMake<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For whatever reason I didn\u2019t have CMake on my new Mac Mini. I don\u2019t remember installing it on my old laptop but alas, I guess I just need it. I try to use Homebrew for these kinds of needs.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>brew install cmake<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Configure AWS User<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You will still need the AWS CLI in order to save your user information so that you don\u2019t have to add it to every script.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>aws configure<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This will ask you for your secret information from the IAM user that has the ability to deploy CloudFormation and any other necessary privileges.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Upload Templates<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In order to deploy CloudFormation templates we must first upload them to an S3 bucket. I usually make this it\u2019s own script so I can include it in however many other scripts need it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We need a couple pieces of information for this:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>S3 Bucket name<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Path to folder with templates<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n<\/ol>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We end up with the following:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const { S3Client, PutObjectCommand } = require(\"@aws-sdk\/client-s3\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\nconst bucket = \"cf-templates-s3\";\n\nconst pathToFiles = path.resolve(__dirname + \"\/pathToTemplates\");\nconst files = fs.readdirSync(pathToFiles);\n\nconst s3Client = new S3Client();\n\nfiles.forEach(async (filename) =&gt; {\n  try {\n    const data = await s3Client.send(\n      new PutObjectCommand({\n        Bucket: bucket,\n        Key: path.basename(filename),\n        Body: fs.createReadStream(`${pathToFiles}\/${filename}`),\n      })\n    );\n    console.log(\"Success\", data);\n  } catch (err) {\n    console.log(\"Error\", err);\n  } finally {\n    console.log(\"Upload script finished\");\n  }\n});<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we create a script in our package JSON so we can run it from the command line easily and add to other scripts.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>\"scripts\": {\n    \"upload-templates\": \"node .\/scripts\/uploadTemplates.js\"\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Deploy CloudFormation file<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>So far I have created a separate Javascript file for each CloudFormation file I upload. This is due to the nature of our system. However, there wouldn\u2019t be anything from stopping one from passing the name of the template as a parameter and deploying that way.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We need the following information:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>What we want to call our changeset<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>The stack name we\u2019re updating (this is process is only for updating, we still create our stacks through the AWS console)<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Path to the CloudFormation template file in our S3 bucket<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n\n\n<\/ol>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Create Changeset<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We always use changesets. It seems a bit like Russian-roulette to deploy without first confirming what is going to change.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const createChangeSet = await cf.send(\n  new CreateChangeSetCommand({\n    Capabilities: &#091;\"CAPABILITY_NAMED_IAM\"],\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n    TemplateURL: `https:\/\/s3.amazonaws.com\/${bucket}\/cfTemplate.yaml`,\n    Parameters: &#091;\n      { ParameterKey: \"parameter1\", UsePreviousValue: true },\n      { ParameterKey: \"parameter2\", UsePreviousValue: true },\n    ],\n  })\n);<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><strong>Capabilities<\/strong><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is only necessary if we are doing things like adding IAM roles. Normally you would have to check a box if doing it through the console. Here we can add the capabilities we need which is just another confirmation that we know the contents of this CloudFormation file and we known what we\u2019re doing.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><strong>Parameters<\/strong><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Since we\u2019re just updating our stack, we want to preserve all the parameter values we entered when we created the stack. We need to add a line for each parameter.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Wait for Changeset to Complete<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Since the creation of the changeset is an asynchronous command, if we want to wait for the result, we need to use the&nbsp;<code>waitUntilChangeSetCreateComplete<\/code>&nbsp;function.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>try {\n  const done = await waitUntilChangeSetCreateComplete(\n    { client: cf, minDelay: 5, maxDelay: 10 },\n    { ChangeSetName: changeSetName, StackName: stackName }\n  );\n  console.log(\"done\", done);\n} catch (err) {\n  console.log(\"There was an error creating the change set.\", err);\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Once it\u2019s complete, we use&nbsp;<code>DescribeChangeSetCommand<\/code>&nbsp;to find out if it completed successfully or not. If it returns anything other than&nbsp;<code>CREATE_COMPLETE<\/code>, we exit our script with an error message.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const describeChangeSet = await cf.send(\n  new DescribeChangeSetCommand({\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n  })\n);\n\nif (describeChangeSet.Status !== \"CREATE_COMPLETE\") {\n  console.log(describeChangeSet.StatusReason);\n  return false;\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then we print out the results of the changeset to the console and ask the user if they want to execute the changeset.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const ok = await yesno({\n  question: \"Do you want to execute this changeset? &#091;y\/n] \",\n});\n\nif (!ok) return false;<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Executing Changeset<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const execute = await cf.send(\n  new ExecuteChangeSetCommand({\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n  })\n);<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Similar to how we had to check if the creation of the changeset was complete, we need to check if the stack update has completed with&nbsp;<code>waitUntilStackUpdateComplete<\/code>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const updateDone = await waitUntilStackUpdateComplete(\n  { client: cf, minDelay: 5, maxDelay: 10 },\n  { StackName: stackName }\n);\nconsole.log(\"update done\", updateDone);\n\n\/\/ If there was an error, don't go any further\nif (updateDone.state !== \"SUCCESS\") {\n  console.log(\"There was an error implementing the changestack.\");\n  return false;\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Update Package.json<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we can add another script to our package JSON that will first upload the templates and then deploy the CloudFormation template<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>\"scripts\": {\n    \"upload-templates\": \"node .\/scripts\/uploadTemplates.js\",\n    \"update-cf\": \"npm run upload-templates &amp;&amp; node .\/scripts\/update-cf.js\"\n  }<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we can run&nbsp;<code>npm run update-cf<\/code>&nbsp;and start the feedback loop to speed up the debug process.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>We try to use CloudFormation whenever we are building AWS infrastructure because of two main factors:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Repeatability<\/li>\n\n\n\n<li>Code history with Git<\/li>\n<\/ol>\n\n\n\n<p>Using the AWS console to deploy can get tedious when you\u2019re working through issues with the deployment. I\u2019d love to say I can write perfect CloudFormation templates every time but that\u2019s just not true. And the only way to truly validate your code is to attempt to deploy it (hopefully in some kind of staging area!).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">AWS CLI<\/h2>\n\n\n\n<p>That\u2019s where the AWS CLI comes in. From the command line on my own machine I can deploy CloudFormation templates and have a quicker feedback loop.<\/p>\n\n\n\n<p>But even the AWS CLI is limited in what it can do. I mean, I suppose I could write complex bash scripts to bend it to my will, but my bash skills are beginner at best.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">AWS Javascript SDK<\/h2>\n\n\n\n<p>My Javascript skills, however, are much more developed. This is where the AWS Javascript SDK comes in to play. Now we\u2019re able to deploy CloudFormation and use Javascript logic to deal with the inputs and outputs.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">CMake<\/h3>\n\n\n\n<p>For whatever reason I didn\u2019t have CMake on my new Mac Mini. I don\u2019t remember installing it on my old laptop but alas, I guess I just need it. I try to use Homebrew for these kinds of needs.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>brew install cmake<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Configure AWS User<\/h3>\n\n\n\n<p>You will still need the AWS CLI in order to save your user information so that you don\u2019t have to add it to every script.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>aws configure<\/code><\/pre>\n\n\n\n<p>This will ask you for your secret information from the IAM user that has the ability to deploy CloudFormation and any other necessary privileges.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Upload Templates<\/h3>\n\n\n\n<p>In order to deploy CloudFormation templates we must first upload them to an S3 bucket. I usually make this it\u2019s own script so I can include it in however many other scripts need it.<\/p>\n\n\n\n<p>We need a couple pieces of information for this:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>S3 Bucket name<\/li>\n\n\n\n<li>Path to folder with templates<\/li>\n<\/ol>\n\n\n\n<p>We end up with the following:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const { S3Client, PutObjectCommand } = require(\"@aws-sdk\/client-s3\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\nconst bucket = \"cf-templates-s3\";\n\nconst pathToFiles = path.resolve(__dirname + \"\/pathToTemplates\");\nconst files = fs.readdirSync(pathToFiles);\n\nconst s3Client = new S3Client();\n\nfiles.forEach(async (filename) =&gt; {\n  try {\n    const data = await s3Client.send(\n      new PutObjectCommand({\n        Bucket: bucket,\n        Key: path.basename(filename),\n        Body: fs.createReadStream(`${pathToFiles}\/${filename}`),\n      })\n    );\n    console.log(\"Success\", data);\n  } catch (err) {\n    console.log(\"Error\", err);\n  } finally {\n    console.log(\"Upload script finished\");\n  }\n});<\/code><\/pre>\n\n\n\n<p>Now we create a script in our package JSON so we can run it from the command line easily and add to other scripts.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>\"scripts\": {\n    \"upload-templates\": \"node .\/scripts\/uploadTemplates.js\"\n}<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Deploy CloudFormation file<\/h3>\n\n\n\n<p>So far I have created a separate Javascript file for each CloudFormation file I upload. This is due to the nature of our system. However, there wouldn\u2019t be anything from stopping one from passing the name of the template as a parameter and deploying that way.<\/p>\n\n\n\n<p>We need the following information:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>What we want to call our changeset<\/li>\n\n\n\n<li>The stack name we\u2019re updating (this is process is only for updating, we still create our stacks through the AWS console)<\/li>\n\n\n\n<li>Path to the CloudFormation template file in our S3 bucket<\/li>\n<\/ol>\n\n\n\n<h3 class=\"wp-block-heading\">Create Changeset<\/h3>\n\n\n\n<p>We always use changesets. It seems a bit like Russian-roulette to deploy without first confirming what is going to change.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const createChangeSet = await cf.send(\n  new CreateChangeSetCommand({\n    Capabilities: &#091;\"CAPABILITY_NAMED_IAM\"],\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n    TemplateURL: `https:\/\/s3.amazonaws.com\/${bucket}\/cfTemplate.yaml`,\n    Parameters: &#091;\n      { ParameterKey: \"parameter1\", UsePreviousValue: true },\n      { ParameterKey: \"parameter2\", UsePreviousValue: true },\n    ],\n  })\n);<\/code><\/pre>\n\n\n\n<p><strong>Capabilities<\/strong><\/p>\n\n\n\n<p>This is only necessary if we are doing things like adding IAM roles. Normally you would have to check a box if doing it through the console. Here we can add the capabilities we need which is just another confirmation that we know the contents of this CloudFormation file and we known what we\u2019re doing.<\/p>\n\n\n\n<p><strong>Parameters<\/strong><\/p>\n\n\n\n<p>Since we\u2019re just updating our stack, we want to preserve all the parameter values we entered when we created the stack. We need to add a line for each parameter.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Wait for Changeset to Complete<\/h3>\n\n\n\n<p>Since the creation of the changeset is an asynchronous command, if we want to wait for the result, we need to use the&nbsp;<code>waitUntilChangeSetCreateComplete<\/code>&nbsp;function.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>try {\n  const done = await waitUntilChangeSetCreateComplete(\n    { client: cf, minDelay: 5, maxDelay: 10 },\n    { ChangeSetName: changeSetName, StackName: stackName }\n  );\n  console.log(\"done\", done);\n} catch (err) {\n  console.log(\"There was an error creating the change set.\", err);\n}<\/code><\/pre>\n\n\n\n<p>Once it\u2019s complete, we use&nbsp;<code>DescribeChangeSetCommand<\/code>&nbsp;to find out if it completed successfully or not. If it returns anything other than&nbsp;<code>CREATE_COMPLETE<\/code>, we exit our script with an error message.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const describeChangeSet = await cf.send(\n  new DescribeChangeSetCommand({\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n  })\n);\n\nif (describeChangeSet.Status !== \"CREATE_COMPLETE\") {\n  console.log(describeChangeSet.StatusReason);\n  return false;\n}<\/code><\/pre>\n\n\n\n<p>Then we print out the results of the changeset to the console and ask the user if they want to execute the changeset.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const ok = await yesno({\n  question: \"Do you want to execute this changeset? &#091;y\/n] \",\n});\n\nif (!ok) return false;<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Executing Changeset<\/h3>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const execute = await cf.send(\n  new ExecuteChangeSetCommand({\n    ChangeSetName: changeSetName,\n    StackName: stackName,\n  })\n);<\/code><\/pre>\n\n\n\n<p>Similar to how we had to check if the creation of the changeset was complete, we need to check if the stack update has completed with&nbsp;<code>waitUntilStackUpdateComplete<\/code>.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const updateDone = await waitUntilStackUpdateComplete(\n  { client: cf, minDelay: 5, maxDelay: 10 },\n  { StackName: stackName }\n);\nconsole.log(\"update done\", updateDone);\n\n\/\/ If there was an error, don't go any further\nif (updateDone.state !== \"SUCCESS\") {\n  console.log(\"There was an error implementing the changestack.\");\n  return false;\n}<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Update Package.json<\/h3>\n\n\n\n<p>Now we can add another script to our package JSON that will first upload the templates and then deploy the CloudFormation template<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>\"scripts\": {\n    \"upload-templates\": \"node .\/scripts\/uploadTemplates.js\",\n    \"update-cf\": \"npm run upload-templates &amp;&amp; node .\/scripts\/update-cf.js\"\n  }<\/code><\/pre>\n\n\n\n<p>Now we can run&nbsp;<code>npm run update-cf<\/code>&nbsp;and start the feedback loop to speed up the debug process.<\/p>\n",
        "date": "2022-03-02 02:32:00",
        "slug": "scripting-cloudformation-deployments",
        "excerpt": "We try to use CloudFormation whenever we are building AWS infrastructure because of two main factors: Using the AWS console to deploy can get tedious when you\u2019re working through issues with the deployment. I\u2019d love to say I can write perfect CloudFormation templates every time but that\u2019s just not true. And the only way to [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 340,
        "title": "My 5 Essential Visual Studio Code Extensions",
        "content": "<!-- wp:paragraph -->\n<p>I live in VS Code for most of my working hours of the day. VS Code's extension ecosystem is one of its biggest selling points. Here I've documented some of the extensions I can't live without and ultimately make me a better programmer.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=wesbos.theme-cobalt2\">Cobalt2 Theme Official<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I follow pretty much everything Wes Bos does because I identify with where he\u2019s coming from (and he\u2019s Canadian!). This one works for me though I have to admit I haven\u2019t done a whole lot of trying out of other themes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=adam-bender.commit-message-editor\">Commit Message Editor<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I try to follow the semantic release formula as much as possible so standardizing our commit messages is a must. Although now I\u2019ve pretty much memorized the formula, when first making the switch to semantic versioning this extension gives a form to automatically build the commit message from.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One note, when using a VS Code workspace file, for some reason the automatically built commit message always ends up in the commit field for the last repo. A simple cut and paste can move it to the right repo, but it\u2019s a minor annoyance that I hope they will eventually fix.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=vscode-icons-team.vscode-icons\">vscode-icons<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I like anything that helps me visualize complex data quicker. This extension adds icons to folders in your project based on their name. This allows for quick identification and differentiation of your folder structure without additional clutter.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=redhat.vscode-yaml\">YAML (by Red Hat)<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you have to do any YAML editing, this extension will give syntax highlighting and hints that keep you from going crazy.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=esbenp.prettier-vscode\">Prettier<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I no longer know how to format code and Prettier is the reason why. And I\u2019m totally fine with losing that skill because who wants to waste time with the tab key?<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=dbaeumer.vscode-eslint\">Eslint<\/a><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I\u2019ve learned to think of the little red squiggly line as my friend. Fix errors before they become errors.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I live in VS Code for most of my working hours of the day. VS Code's extension ecosystem is one of its biggest selling points. Here I've documented some of the extensions I can't live without and ultimately make me a better programmer.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=wesbos.theme-cobalt2\">Cobalt2 Theme Official<\/a><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I follow pretty much everything Wes Bos does because I identify with where he\u2019s coming from (and he\u2019s Canadian!). This one works for me though I have to admit I haven\u2019t done a whole lot of trying out of other themes.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=adam-bender.commit-message-editor\">Commit Message Editor<\/a><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I try to follow the semantic release formula as much as possible so standardizing our commit messages is a must. Although now I\u2019ve pretty much memorized the formula, when first making the switch to semantic versioning this extension gives a form to automatically build the commit message from.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One note, when using a VS Code workspace file, for some reason the automatically built commit message always ends up in the commit field for the last repo. A simple cut and paste can move it to the right repo, but it\u2019s a minor annoyance that I hope they will eventually fix.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=vscode-icons-team.vscode-icons\">vscode-icons<\/a><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I like anything that helps me visualize complex data quicker. This extension adds icons to folders in your project based on their name. This allows for quick identification and differentiation of your folder structure without additional clutter.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=redhat.vscode-yaml\">YAML (by Red Hat)<\/a><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you have to do any YAML editing, this extension will give syntax highlighting and hints that keep you from going crazy.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=esbenp.prettier-vscode\">Prettier<\/a><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I no longer know how to format code and Prettier is the reason why. And I\u2019m totally fine with losing that skill because who wants to waste time with the tab key?<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=dbaeumer.vscode-eslint\">Eslint<\/a><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ve learned to think of the little red squiggly line as my friend. Fix errors before they become errors.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I live in VS Code for most of my working hours of the day. VS Code&#8217;s extension ecosystem is one of its biggest selling points. Here I&#8217;ve documented some of the extensions I can&#8217;t live without and ultimately make me a better programmer.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=wesbos.theme-cobalt2\">Cobalt2 Theme Official<\/a><\/h2>\n\n\n\n<p>I follow pretty much everything Wes Bos does because I identify with where he\u2019s coming from (and he\u2019s Canadian!). This one works for me though I have to admit I haven\u2019t done a whole lot of trying out of other themes.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=adam-bender.commit-message-editor\">Commit Message Editor<\/a><\/h2>\n\n\n\n<p>I try to follow the semantic release formula as much as possible so standardizing our commit messages is a must. Although now I\u2019ve pretty much memorized the formula, when first making the switch to semantic versioning this extension gives a form to automatically build the commit message from.<\/p>\n\n\n\n<p>One note, when using a VS Code workspace file, for some reason the automatically built commit message always ends up in the commit field for the last repo. A simple cut and paste can move it to the right repo, but it\u2019s a minor annoyance that I hope they will eventually fix.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=vscode-icons-team.vscode-icons\">vscode-icons<\/a><\/h2>\n\n\n\n<p>I like anything that helps me visualize complex data quicker. This extension adds icons to folders in your project based on their name. This allows for quick identification and differentiation of your folder structure without additional clutter.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=redhat.vscode-yaml\">YAML (by Red Hat)<\/a><\/h2>\n\n\n\n<p>If you have to do any YAML editing, this extension will give syntax highlighting and hints that keep you from going crazy.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=esbenp.prettier-vscode\">Prettier<\/a><\/h2>\n\n\n\n<p>I no longer know how to format code and Prettier is the reason why. And I\u2019m totally fine with losing that skill because who wants to waste time with the tab key?<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><a href=\"https:\/\/marketplace.visualstudio.com\/items?itemName=dbaeumer.vscode-eslint\">Eslint<\/a><\/h2>\n\n\n\n<p>I\u2019ve learned to think of the little red squiggly line as my friend. Fix errors before they become errors.<\/p>\n",
        "date": "2022-02-25 02:30:00",
        "slug": "my-5-essential-visual-studio-code-extensions",
        "excerpt": "I live in VS Code for most of my working hours of the day. VS Code&#8217;s extension ecosystem is one of its biggest selling points. Here I&#8217;ve documented some of the extensions I can&#8217;t live without and ultimately make me a better programmer. Cobalt2 Theme Official I follow pretty much everything Wes Bos does because [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 337,
        "title": "How I listen to music at work",
        "content": "<!-- wp:paragraph -->\n<p>Working from home has opened up my listening possibilities as I don\u2019t have to worry about paying attention to close by co-workers or clients and don\u2019t have to wear Air-pods all day which can become quite uncomfortable.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have found myself using the following methods and stations to shake up my routine.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Amazon Music<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our family pays for an Amazon Prime subscription which includes the basic Amazon Music service (not to be confused with Amazon Music Unlimited which is more directly analogous to Apple Music or Spotify).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Saved Music<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I still buy CDs (discussed&nbsp;<a href=\"https:\/\/www.notion.so\/How-to-sync-Apple-Music-library-with-Plex-f33ea48b7f38455cb0886c028fc2cf58\">elsewhere in this blog<\/a>). Most of my purchases are from Amazon. Some titles include their AutoRip feature where it is automatically added to your Amazon Music app.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can also search for other albums and singles that are available and save them to My Library.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Random track listen<\/strong>&nbsp;- This will randomly pull songs from my library and play them. Great when I\u2019m not sure what to listen to. Often will trigger me putting on a specific album or artist.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Stations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Lo-fi Hip-hop<\/strong>&nbsp;- Great for times when I really need to focus. Mostly instrumental with a calm and grooving vibe.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Thievery Corporation<\/strong>&nbsp;- Another primarily instrumental station that works great for background music.<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li><strong>Vintage Chill Electronic<\/strong>&nbsp;- This one probably shows my age. Describes itself as&nbsp;<em>Mellow electronica classics<\/em>.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Plex<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is where I store my entire ripped CD collection for playback at home or saving to my device for remote playback.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Stations<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><strong>Random Album Radio<\/strong>&nbsp;- This has been my favorite lately. Instead of just pulling random tracks from my library, it will pull a random album and play the entire track list. Then automatically move on to the next. I\u2019m generally an album listener so this suits me well.<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Working from home has opened up my listening possibilities as I don\u2019t have to worry about paying attention to close by co-workers or clients and don\u2019t have to wear Air-pods all day which can become quite uncomfortable.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I have found myself using the following methods and stations to shake up my routine.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Amazon Music<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Our family pays for an Amazon Prime subscription which includes the basic Amazon Music service (not to be confused with Amazon Music Unlimited which is more directly analogous to Apple Music or Spotify).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Saved Music<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I still buy CDs (discussed&nbsp;<a href=\"https:\/\/www.notion.so\/How-to-sync-Apple-Music-library-with-Plex-f33ea48b7f38455cb0886c028fc2cf58\">elsewhere in this blog<\/a>). Most of my purchases are from Amazon. Some titles include their AutoRip feature where it is automatically added to your Amazon Music app.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You can also search for other albums and singles that are available and save them to My Library.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><strong>Random track listen<\/strong>&nbsp;- This will randomly pull songs from my library and play them. Great when I\u2019m not sure what to listen to. Often will trigger me putting on a specific album or artist.<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul><\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Stations<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><strong>Lo-fi Hip-hop<\/strong>&nbsp;- Great for times when I really need to focus. Mostly instrumental with a calm and grooving vibe.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><strong>Thievery Corporation<\/strong>&nbsp;- Another primarily instrumental station that works great for background music.<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><strong>Vintage Chill Electronic<\/strong>&nbsp;- This one probably shows my age. Describes itself as&nbsp;<em>Mellow electronica classics<\/em>.<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Plex<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is where I store my entire ripped CD collection for playback at home or saving to my device for remote playback.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Stations<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li><strong>Random Album Radio<\/strong>&nbsp;- This has been my favorite lately. Instead of just pulling random tracks from my library, it will pull a random album and play the entire track list. Then automatically move on to the next. I\u2019m generally an album listener so this suits me well.<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul><\/ul>\n"
            }
        ],
        "rendered_content": "\n<p>Working from home has opened up my listening possibilities as I don\u2019t have to worry about paying attention to close by co-workers or clients and don\u2019t have to wear Air-pods all day which can become quite uncomfortable.<\/p>\n\n\n\n<p>I have found myself using the following methods and stations to shake up my routine.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Amazon Music<\/h2>\n\n\n\n<p>Our family pays for an Amazon Prime subscription which includes the basic Amazon Music service (not to be confused with Amazon Music Unlimited which is more directly analogous to Apple Music or Spotify).<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Saved Music<\/h3>\n\n\n\n<p>I still buy CDs (discussed&nbsp;<a href=\"https:\/\/www.notion.so\/How-to-sync-Apple-Music-library-with-Plex-f33ea48b7f38455cb0886c028fc2cf58\">elsewhere in this blog<\/a>). Most of my purchases are from Amazon. Some titles include their AutoRip feature where it is automatically added to your Amazon Music app.<\/p>\n\n\n\n<p>You can also search for other albums and singles that are available and save them to My Library.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li><strong>Random track listen<\/strong>&nbsp;&#8211; This will randomly pull songs from my library and play them. Great when I\u2019m not sure what to listen to. Often will trigger me putting on a specific album or artist.<\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">Stations<\/h3>\n\n\n\n<ul class=\"wp-block-list\">\n<li><strong>Lo-fi Hip-hop<\/strong>&nbsp;&#8211; Great for times when I really need to focus. Mostly instrumental with a calm and grooving vibe.<\/li>\n\n\n\n<li><strong>Thievery Corporation<\/strong>&nbsp;&#8211; Another primarily instrumental station that works great for background music.<\/li>\n\n\n\n<li><strong>Vintage Chill Electronic<\/strong>&nbsp;&#8211; This one probably shows my age. Describes itself as&nbsp;<em>Mellow electronica classics<\/em>.<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Plex<\/h2>\n\n\n\n<p>This is where I store my entire ripped CD collection for playback at home or saving to my device for remote playback.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Stations<\/h3>\n\n\n\n<ul class=\"wp-block-list\">\n<li><strong>Random Album Radio<\/strong>&nbsp;&#8211; This has been my favorite lately. Instead of just pulling random tracks from my library, it will pull a random album and play the entire track list. Then automatically move on to the next. I\u2019m generally an album listener so this suits me well.<\/li>\n<\/ul>\n",
        "date": "2022-02-09 02:28:00",
        "slug": "how-i-listen-to-music-at-work",
        "excerpt": "Working from home has opened up my listening possibilities as I don\u2019t have to worry about paying attention to close by co-workers or clients and don\u2019t have to wear Air-pods all day which can become quite uncomfortable. I have found myself using the following methods and stations to shake up my routine. Amazon Music Our [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 334,
        "title": "Decrypt Private Key File",
        "content": "<!-- wp:paragraph -->\n<p>We recently ran into a situation where we needed to paste the private key file for a certificate into AWS Certificate Manager and realized that it would not accept an encrypted key file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To determine if a private key file is encrypted you can just look at the first line of the private key file contents:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>-----BEGIN ENCRYPTED PRIVATE KEY-----<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Decrypt Private Key file<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>After a bit of searching we found out how to decrypt the key file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The following command works on Mac\/Linux (still not sure how to do this on Windows...)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>openssl rsa -in privateKeyFilename.pem -out newFilename.pem<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>You will be asked for the passcode that is necessary to decrypt the file.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Result<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If completed successfully you will end up with a new file that has the following at the top:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>-----BEGIN RSA PRIVATE KEY-----<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now AWS Certificate Manager will accept this key.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We recently ran into a situation where we needed to paste the private key file for a certificate into AWS Certificate Manager and realized that it would not accept an encrypted key file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>To determine if a private key file is encrypted you can just look at the first line of the private key file contents:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>-----BEGIN ENCRYPTED PRIVATE KEY-----<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Decrypt Private Key file<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>After a bit of searching we found out how to decrypt the key file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The following command works on Mac\/Linux (still not sure how to do this on Windows...)<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>openssl rsa -in privateKeyFilename.pem -out newFilename.pem<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You will be asked for the passcode that is necessary to decrypt the file.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Result<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If completed successfully you will end up with a new file that has the following at the top:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>-----BEGIN RSA PRIVATE KEY-----<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now AWS Certificate Manager will accept this key.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>We recently ran into a situation where we needed to paste the private key file for a certificate into AWS Certificate Manager and realized that it would not accept an encrypted key file.<\/p>\n\n\n\n<p>To determine if a private key file is encrypted you can just look at the first line of the private key file contents:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>-----BEGIN ENCRYPTED PRIVATE KEY-----<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Decrypt Private Key file<\/h2>\n\n\n\n<p>After a bit of searching we found out how to decrypt the key file.<\/p>\n\n\n\n<p>The following command works on Mac\/Linux (still not sure how to do this on Windows&#8230;)<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>openssl rsa -in privateKeyFilename.pem -out newFilename.pem<\/code><\/pre>\n\n\n\n<p>You will be asked for the passcode that is necessary to decrypt the file.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Result<\/h2>\n\n\n\n<p>If completed successfully you will end up with a new file that has the following at the top:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>-----BEGIN RSA PRIVATE KEY-----<\/code><\/pre>\n\n\n\n<p>Now AWS Certificate Manager will accept this key.<\/p>\n",
        "date": "2022-02-02 02:25:00",
        "slug": "decrypt-private-key-file",
        "excerpt": "We recently ran into a situation where we needed to paste the private key file for a certificate into AWS Certificate Manager and realized that it would not accept an encrypted key file. To determine if a private key file is encrypted you can just look at the first line of the private key file [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 331,
        "title": "AWS API Gateway decodes url query string",
        "content": "<!-- wp:paragraph -->\n<p>We ran into on odd problem that was hard to track down due to it\u2019s odd nature.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For some reason when using a VPC Link with&nbsp;<em>Use Proxy Integration<\/em>&nbsp;enabled, API Gateway will decode the url string before sending it on to the integration server. That means when our node server received the request it would include invalid characters like spaces.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Custom Middleware<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Essentially we ended up having to write our own middleware that would re-encode the query string before it was being evaluated for action.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>function queryStringReEncode(req, res, next) {\n  if (req.originalUrl.match(\/\\?\/)) {\n    const queryString = Object.keys(req.query)\n      .map((key) =&gt; {\n        \/\/ take into account when the query contains an array object (getMany)\n        if (Array.isArray(req.query&#091;key])) {\n          const stringfiedArray = req.query&#091;key].join(`${key}=`);\n          return stringfiedArray;\n        }\n        return encodeURI(`${key}=${req.query&#091;key]}`);\n      })\n      .join(\"&amp;\");\n    const reEncodedUrl = req.originalUrl.split(\"?\")&#091;0] + `?${queryString}`;\n    req.originalUrl = reEncodedUrl;\n  }\n  console.log(`${req.method} from: ${req.originalUrl}`);\n  next();\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">AWS API Gateway solution<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I\u2019ve continued to search for a solution to this but apparently it is functioning the way it should. I\u2019ll have to add more data at a later date when I have to delve into it again. Been a while since I touched the code and did the testing.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We ran into on odd problem that was hard to track down due to it\u2019s odd nature.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For some reason when using a VPC Link with&nbsp;<em>Use Proxy Integration<\/em>&nbsp;enabled, API Gateway will decode the url string before sending it on to the integration server. That means when our node server received the request it would include invalid characters like spaces.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Custom Middleware<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Essentially we ended up having to write our own middleware that would re-encode the query string before it was being evaluated for action.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>function queryStringReEncode(req, res, next) {\n  if (req.originalUrl.match(\/\\?\/)) {\n    const queryString = Object.keys(req.query)\n      .map((key) =&gt; {\n        \/\/ take into account when the query contains an array object (getMany)\n        if (Array.isArray(req.query&#091;key])) {\n          const stringfiedArray = req.query&#091;key].join(`${key}=`);\n          return stringfiedArray;\n        }\n        return encodeURI(`${key}=${req.query&#091;key]}`);\n      })\n      .join(\"&amp;\");\n    const reEncodedUrl = req.originalUrl.split(\"?\")&#091;0] + `?${queryString}`;\n    req.originalUrl = reEncodedUrl;\n  }\n  console.log(`${req.method} from: ${req.originalUrl}`);\n  next();\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">AWS API Gateway solution<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ve continued to search for a solution to this but apparently it is functioning the way it should. I\u2019ll have to add more data at a later date when I have to delve into it again. Been a while since I touched the code and did the testing.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>We ran into on odd problem that was hard to track down due to it\u2019s odd nature.<\/p>\n\n\n\n<p>For some reason when using a VPC Link with&nbsp;<em>Use Proxy Integration<\/em>&nbsp;enabled, API Gateway will decode the url string before sending it on to the integration server. That means when our node server received the request it would include invalid characters like spaces.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Custom Middleware<\/h2>\n\n\n\n<p>Essentially we ended up having to write our own middleware that would re-encode the query string before it was being evaluated for action.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>function queryStringReEncode(req, res, next) {\n  if (req.originalUrl.match(\/\\?\/)) {\n    const queryString = Object.keys(req.query)\n      .map((key) =&gt; {\n        \/\/ take into account when the query contains an array object (getMany)\n        if (Array.isArray(req.query&#091;key])) {\n          const stringfiedArray = req.query&#091;key].join(`${key}=`);\n          return stringfiedArray;\n        }\n        return encodeURI(`${key}=${req.query&#091;key]}`);\n      })\n      .join(\"&amp;\");\n    const reEncodedUrl = req.originalUrl.split(\"?\")&#091;0] + `?${queryString}`;\n    req.originalUrl = reEncodedUrl;\n  }\n  console.log(`${req.method} from: ${req.originalUrl}`);\n  next();\n}<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">AWS API Gateway solution<\/h2>\n\n\n\n<p>I\u2019ve continued to search for a solution to this but apparently it is functioning the way it should. I\u2019ll have to add more data at a later date when I have to delve into it again. Been a while since I touched the code and did the testing.<\/p>\n",
        "date": "2022-02-02 02:23:00",
        "slug": "aws-api-gateway-decodes-url-query-string",
        "excerpt": "We ran into on odd problem that was hard to track down due to it\u2019s odd nature. For some reason when using a VPC Link with&nbsp;Use Proxy Integration&nbsp;enabled, API Gateway will decode the url string before sending it on to the integration server. That means when our node server received the request it would include [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 245,
        "title": "Samba file shares on Raspberry Pi",
        "content": "<!-- wp:paragraph -->\n<p>Most of the time I use SSH to interface with my Raspberry pis, including CyberDuck for moving files. However, there are certain operations that require an old fashion file share.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>Login to Raspberry Pi<\/strong><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>From your favorite terminal app, login with ssh<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Make sure you have Samba installed<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>sudo apt-get update\n\nsudo apt-get upgrade\n\nsudo apt-get install samba samba-common-bin<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Configure Samba<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We\u2019re going to add a share called <em>*Music*<\/em>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Edit the file <code>\/etc\/samba\/smb.conf<\/code><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the bottom of the file, add something like this:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>&#091;Music]\npath = \/mnt\/easystore\/Music\nwriteable=Yes\ncreate mask=0777\ndirectory mask=0777\npublic=no\nread only=no<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Create a samba user<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>sudo smbpasswd -a pi<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Restart Samba<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>sudo service smbd restart<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Connect to Samba share from macOS<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>From the Finder<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Go to <em>*Go &gt; Connect to Server*<\/em><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Enter the address with the smb prefix (eg. smb:\/\/192.168.1.x)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Click the + button to add it as a favorite (have to do this for it to ask for username and password for some reason...)<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Enter samba username and password you created earlier<\/li>\n<!-- \/wp:list-item --><\/ol>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><strong>Access from Terminal in macOS<\/strong><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You should now be able to access the share at<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>\/Volumes\/Music<\/code><\/pre>\n<!-- \/wp:code -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Most of the time I use SSH to interface with my Raspberry pis, including CyberDuck for moving files. However, there are certain operations that require an old fashion file share.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><strong>Login to Raspberry Pi<\/strong><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>From your favorite terminal app, login with ssh<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\"><strong>Make sure you have Samba installed<\/strong><\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>sudo apt-get update\n\nsudo apt-get upgrade\n\nsudo apt-get install samba samba-common-bin<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\"><strong>Configure Samba<\/strong><\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We\u2019re going to add a share called <em>*Music*<\/em>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Edit the file <code>\/etc\/samba\/smb.conf<\/code><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>At the bottom of the file, add something like this:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>&#091;Music]\npath = \/mnt\/easystore\/Music\nwriteable=Yes\ncreate mask=0777\ndirectory mask=0777\npublic=no\nread only=no<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Create a samba user<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>sudo smbpasswd -a pi<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Restart Samba<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>sudo service smbd restart<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\"><strong>Connect to Samba share from macOS<\/strong><\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>From the Finder<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": {
                    "ordered": true
                },
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Go to <em>*Go &gt; Connect to Server*<\/em><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Enter the address with the smb prefix (eg. smb:\/\/192.168.1.x)<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Click the + button to add it as a favorite (have to do this for it to ask for username and password for some reason...)<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Enter samba username and password you created earlier<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ol>\n\n\n\n\n\n<\/ol>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\"><strong>Access from Terminal in macOS<\/strong><\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You should now be able to access the share at<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>\/Volumes\/Music<\/code><\/pre>\n"
            }
        ],
        "rendered_content": "\n<p>Most of the time I use SSH to interface with my Raspberry pis, including CyberDuck for moving files. However, there are certain operations that require an old fashion file share.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Login to Raspberry Pi<\/strong><\/h2>\n\n\n\n<p>From your favorite terminal app, login with ssh<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Make sure you have Samba installed<\/strong><\/h3>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>sudo apt-get update\n\nsudo apt-get upgrade\n\nsudo apt-get install samba samba-common-bin<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Configure Samba<\/strong><\/h3>\n\n\n\n<p>We\u2019re going to add a share called <em>*Music*<\/em>.<\/p>\n\n\n\n<p>Edit the file <code>\/etc\/samba\/smb.conf<\/code><\/p>\n\n\n\n<p>At the bottom of the file, add something like this:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>&#091;Music]\npath = \/mnt\/easystore\/Music\nwriteable=Yes\ncreate mask=0777\ndirectory mask=0777\npublic=no\nread only=no<\/code><\/pre>\n\n\n\n<p>Create a samba user<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>sudo smbpasswd -a pi<\/code><\/pre>\n\n\n\n<p>Restart Samba<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>sudo service smbd restart<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Connect to Samba share from macOS<\/strong><\/h3>\n\n\n\n<p>From the Finder<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Go to <em>*Go &gt; Connect to Server*<\/em><\/li>\n\n\n\n<li>Enter the address with the smb prefix (eg. smb:\/\/192.168.1.x)<\/li>\n\n\n\n<li>Click the + button to add it as a favorite (have to do this for it to ask for username and password for some reason&#8230;)<\/li>\n\n\n\n<li>Enter samba username and password you created earlier<\/li>\n<\/ol>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Access from Terminal in macOS<\/strong><\/h3>\n\n\n\n<p>You should now be able to access the share at<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>\/Volumes\/Music<\/code><\/pre>\n",
        "date": "2022-01-31 04:29:00",
        "slug": "245",
        "excerpt": "Most of the time I use SSH to interface with my Raspberry pis, including CyberDuck for moving files. However, there are certain operations that require an old fashion file share.",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 328,
        "title": "Moving from Postman to Insomnia",
        "content": "<!-- wp:paragraph -->\n<p>Postman has been great and served many purposes over the last couple years of development. However, I heard about Insomnia just as I was going into another phase of needing to test HTTP requests again. I thought I would try it out.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Interface<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The interface is a lot cleaner than Postman. I found it simple to find what I need and the straightforward layout allowed me to get right into testing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The more advanced functionality while initially hidden was not hard to find. It was mostly intuitive to find or a quick search on Google got me the rest of the way.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Collection vs Document<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I was able to quickly create a new resource collection by importing our OpenAPI doc. I tried both as a document and as a collection. I can see the potential advantage of the document, immediately it highlighted a couple errors that had crept into our OpenAPI definition. But for now I think the collection will work fine for my purposes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Environment<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The environment is a clever way of being able to add advanced functionality, simply. You end up building a custom JSON object that acts as your environment. You can reference this data from many different locations adding versatility and adaptability to the product.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Plugins<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong><a href=\"https:\/\/insomnia.rest\/plugins\/insomnia-plugin-global-headers\">Global Headers<\/a><\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This plugin will allow us to apply headers to every request without having to manually modify every request. This is great for our situation where I haven\u2019t yet figured out how to have Insomnia get the auth token from Cognito automatically. This way I can just grab the token from our front end app and plug it into the environment variables so it will apply the header to every endpoint.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-json\"} -->\n<pre class=\"wp-block-code lang-json\"><code>{\n\t\"scheme\": &#091;\n\t\t\"http\"\n\t],\n\t\"base_path\": \"\/v1\",\n\t\"host\": \"localhost:3001\",\n\t\"GLOBAL_HEADERS\": {\n\t\t\"Authorization\": \"Bearer &lt;token&gt;\"\n\t}\n}<\/code><\/pre>\n<!-- \/wp:code -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Postman has been great and served many purposes over the last couple years of development. However, I heard about Insomnia just as I was going into another phase of needing to test HTTP requests again. I thought I would try it out.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Interface<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The interface is a lot cleaner than Postman. I found it simple to find what I need and the straightforward layout allowed me to get right into testing.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The more advanced functionality while initially hidden was not hard to find. It was mostly intuitive to find or a quick search on Google got me the rest of the way.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Collection vs Document<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I was able to quickly create a new resource collection by importing our OpenAPI doc. I tried both as a document and as a collection. I can see the potential advantage of the document, immediately it highlighted a couple errors that had crept into our OpenAPI definition. But for now I think the collection will work fine for my purposes.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Environment<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The environment is a clever way of being able to add advanced functionality, simply. You end up building a custom JSON object that acts as your environment. You can reference this data from many different locations adding versatility and adaptability to the product.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Plugins<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><strong><a href=\"https:\/\/insomnia.rest\/plugins\/insomnia-plugin-global-headers\">Global Headers<\/a><\/strong><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This plugin will allow us to apply headers to every request without having to manually modify every request. This is great for our situation where I haven\u2019t yet figured out how to have Insomnia get the auth token from Cognito automatically. This way I can just grab the token from our front end app and plug it into the environment variables so it will apply the header to every endpoint.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-json"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-json\"><code>{\n\t\"scheme\": &#091;\n\t\t\"http\"\n\t],\n\t\"base_path\": \"\/v1\",\n\t\"host\": \"localhost:3001\",\n\t\"GLOBAL_HEADERS\": {\n\t\t\"Authorization\": \"Bearer &lt;token&gt;\"\n\t}\n}<\/code><\/pre>\n"
            }
        ],
        "rendered_content": "\n<p>Postman has been great and served many purposes over the last couple years of development. However, I heard about Insomnia just as I was going into another phase of needing to test HTTP requests again. I thought I would try it out.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Interface<\/h2>\n\n\n\n<p>The interface is a lot cleaner than Postman. I found it simple to find what I need and the straightforward layout allowed me to get right into testing.<\/p>\n\n\n\n<p>The more advanced functionality while initially hidden was not hard to find. It was mostly intuitive to find or a quick search on Google got me the rest of the way.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Collection vs Document<\/h2>\n\n\n\n<p>I was able to quickly create a new resource collection by importing our OpenAPI doc. I tried both as a document and as a collection. I can see the potential advantage of the document, immediately it highlighted a couple errors that had crept into our OpenAPI definition. But for now I think the collection will work fine for my purposes.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Environment<\/h2>\n\n\n\n<p>The environment is a clever way of being able to add advanced functionality, simply. You end up building a custom JSON object that acts as your environment. You can reference this data from many different locations adding versatility and adaptability to the product.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Plugins<\/h2>\n\n\n\n<p><strong><a href=\"https:\/\/insomnia.rest\/plugins\/insomnia-plugin-global-headers\">Global Headers<\/a><\/strong><\/p>\n\n\n\n<p>This plugin will allow us to apply headers to every request without having to manually modify every request. This is great for our situation where I haven\u2019t yet figured out how to have Insomnia get the auth token from Cognito automatically. This way I can just grab the token from our front end app and plug it into the environment variables so it will apply the header to every endpoint.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-json\"><code>{\n\t\"scheme\": &#091;\n\t\t\"http\"\n\t],\n\t\"base_path\": \"\/v1\",\n\t\"host\": \"localhost:3001\",\n\t\"GLOBAL_HEADERS\": {\n\t\t\"Authorization\": \"Bearer &lt;token&gt;\"\n\t}\n}<\/code><\/pre>\n",
        "date": "2022-01-31 02:20:00",
        "slug": "moving-from-postman-to-insomnia",
        "excerpt": "Postman has been great and served many purposes over the last couple years of development. However, I heard about Insomnia just as I was going into another phase of needing to test HTTP requests again. I thought I would try it out. Interface The interface is a lot cleaner than Postman. I found it simple [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 325,
        "title": "How to sync Apple Music library with Plex",
        "content": "<!-- wp:paragraph -->\n<p>I still like to use Apple Music for ripping my CDs (yes I still prefer CDs as a master medium...) and for listening to my music on Apple devices.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, I would like to use Plex more so I'm not stuck in the Apple walled garden forever. I decided the simple answer for now was to attempt to sync my Apple music library with Plex and see how that works. So far it seems to be working fairly well.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Samba share<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Make sure you have the Samba share connected before running this. Find out how to do this in the blog&nbsp;<a href=\"https:\/\/jeremyrichardson.dev\/blog\/samba_file_shares_on_raspberry_pi\">Samba file shares on Raspberry Pi<\/a>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If this is setup properly you should be able to do an&nbsp;<code>ls<\/code>&nbsp;at the folder from the terminal:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>cd \/Volumes\/Music\nls<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Rsync<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I'm just using the classic rsync CLI command to sync the libraries over my local network:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><del>rsync --progress --partial -avz ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music<\/del><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Update<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I realized that it was still trying to copy everything each time with the above command. After doing a little digging I found a&nbsp;<a href=\"https:\/\/jeremyrichardson.dev\/https:\/\/unix.stackexchange.com\/\">StackExchange<\/a>&nbsp;post titled \"<a href=\"https:\/\/unix.stackexchange.com\/questions\/341413\/see-only-changes-when-running-rsync\">See only changes when running rsync<\/a>\" that helped me figure it out.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In short, the -a (archive) option isn't able to fully replicate the permissions due to the difference in partition types. Since -a is a shortened version of&nbsp;<code>-rlptgoD<\/code>, I first started with that. Then remove the&nbsp;<code>-pgo<\/code>&nbsp;which deals with the permissions that aren't supported.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then we added&nbsp;<code>-i<\/code>&nbsp;which only shows the files that have changed making it easier to spot what will get copied when we do the dry run.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then we end up with:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>\/\/ dry run\nrsync --progress --partial --dry-run -rltDvzi ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music\n\n\/\/ execute\nrsync --progress --partial -rltDvzi ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>~~<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Apple Music Tips<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Managing an Apple Music library can be a pain in the ass if you have multiple devices, users, servers, etc... I've tried a bunch of things and here is what I've found.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Don't Store Apple Music library file anywhere other than it's default location<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The issue is that macOS keeps that file open all the time so you can never eject the disk that it is on until you logout or shutdown the operating system. You can store the media on an external drive but don't store the music library file on an external drive.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Download iTunes purchased music so it syncs with Plex<\/h3>\n<!-- \/wp:heading -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I still like to use Apple Music for ripping my CDs (yes I still prefer CDs as a master medium...) and for listening to my music on Apple devices.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>However, I would like to use Plex more so I'm not stuck in the Apple walled garden forever. I decided the simple answer for now was to attempt to sync my Apple music library with Plex and see how that works. So far it seems to be working fairly well.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Samba share<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Make sure you have the Samba share connected before running this. Find out how to do this in the blog&nbsp;<a href=\"https:\/\/jeremyrichardson.dev\/blog\/samba_file_shares_on_raspberry_pi\">Samba file shares on Raspberry Pi<\/a>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If this is setup properly you should be able to do an&nbsp;<code>ls<\/code>&nbsp;at the folder from the terminal:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>cd \/Volumes\/Music\nls<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Rsync<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I'm just using the classic rsync CLI command to sync the libraries over my local network:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><del>rsync --progress --partial -avz ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music<\/del><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Update<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I realized that it was still trying to copy everything each time with the above command. After doing a little digging I found a&nbsp;<a href=\"https:\/\/jeremyrichardson.dev\/https:\/\/unix.stackexchange.com\/\">StackExchange<\/a>&nbsp;post titled \"<a href=\"https:\/\/unix.stackexchange.com\/questions\/341413\/see-only-changes-when-running-rsync\">See only changes when running rsync<\/a>\" that helped me figure it out.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In short, the -a (archive) option isn't able to fully replicate the permissions due to the difference in partition types. Since -a is a shortened version of&nbsp;<code>-rlptgoD<\/code>, I first started with that. Then remove the&nbsp;<code>-pgo<\/code>&nbsp;which deals with the permissions that aren't supported.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then we added&nbsp;<code>-i<\/code>&nbsp;which only shows the files that have changed making it easier to spot what will get copied when we do the dry run.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then we end up with:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>\/\/ dry run\nrsync --progress --partial --dry-run -rltDvzi ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music\n\n\/\/ execute\nrsync --progress --partial -rltDvzi ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>~~<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Apple Music Tips<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Managing an Apple Music library can be a pain in the ass if you have multiple devices, users, servers, etc... I've tried a bunch of things and here is what I've found.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Don't Store Apple Music library file anywhere other than it's default location<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The issue is that macOS keeps that file open all the time so you can never eject the disk that it is on until you logout or shutdown the operating system. You can store the media on an external drive but don't store the music library file on an external drive.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Download iTunes purchased music so it syncs with Plex<\/h3>\n"
            }
        ],
        "rendered_content": "\n<p>I still like to use Apple Music for ripping my CDs (yes I still prefer CDs as a master medium&#8230;) and for listening to my music on Apple devices.<\/p>\n\n\n\n<p>However, I would like to use Plex more so I&#8217;m not stuck in the Apple walled garden forever. I decided the simple answer for now was to attempt to sync my Apple music library with Plex and see how that works. So far it seems to be working fairly well.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Samba share<\/h2>\n\n\n\n<p>Make sure you have the Samba share connected before running this. Find out how to do this in the blog&nbsp;<a href=\"https:\/\/jeremyrichardson.dev\/blog\/samba_file_shares_on_raspberry_pi\">Samba file shares on Raspberry Pi<\/a>.<\/p>\n\n\n\n<p>If this is setup properly you should be able to do an&nbsp;<code>ls<\/code>&nbsp;at the folder from the terminal:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>cd \/Volumes\/Music\nls<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Rsync<\/h2>\n\n\n\n<p>I&#8217;m just using the classic rsync CLI command to sync the libraries over my local network:<\/p>\n\n\n\n<p><del>rsync &#8211;progress &#8211;partial -avz ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music<\/del><\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Update<\/h3>\n\n\n\n<p>I realized that it was still trying to copy everything each time with the above command. After doing a little digging I found a&nbsp;<a href=\"https:\/\/jeremyrichardson.dev\/https:\/\/unix.stackexchange.com\/\">StackExchange<\/a>&nbsp;post titled &#8220;<a href=\"https:\/\/unix.stackexchange.com\/questions\/341413\/see-only-changes-when-running-rsync\">See only changes when running rsync<\/a>&#8221; that helped me figure it out.<\/p>\n\n\n\n<p>In short, the -a (archive) option isn&#8217;t able to fully replicate the permissions due to the difference in partition types. Since -a is a shortened version of&nbsp;<code>-rlptgoD<\/code>, I first started with that. Then remove the&nbsp;<code>-pgo<\/code>&nbsp;which deals with the permissions that aren&#8217;t supported.<\/p>\n\n\n\n<p>Then we added&nbsp;<code>-i<\/code>&nbsp;which only shows the files that have changed making it easier to spot what will get copied when we do the dry run.<\/p>\n\n\n\n<p>Then we end up with:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>\/\/ dry run\nrsync --progress --partial --dry-run -rltDvzi ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music\n\n\/\/ execute\nrsync --progress --partial -rltDvzi ~\/Music\/Media.localized\/Music\/ \/Volumes\/Music<\/code><\/pre>\n\n\n\n<p>~~<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Apple Music Tips<\/h2>\n\n\n\n<p>Managing an Apple Music library can be a pain in the ass if you have multiple devices, users, servers, etc&#8230; I&#8217;ve tried a bunch of things and here is what I&#8217;ve found.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Don&#8217;t Store Apple Music library file anywhere other than it&#8217;s default location<\/h3>\n\n\n\n<p>The issue is that macOS keeps that file open all the time so you can never eject the disk that it is on until you logout or shutdown the operating system. You can store the media on an external drive but don&#8217;t store the music library file on an external drive.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Download iTunes purchased music so it syncs with Plex<\/h3>\n",
        "date": "2022-01-31 02:16:00",
        "slug": "how-to-sync-apple-music-library-with-plex",
        "excerpt": "I still like to use Apple Music for ripping my CDs (yes I still prefer CDs as a master medium&#8230;) and for listening to my music on Apple devices. However, I would like to use Plex more so I&#8217;m not stuck in the Apple walled garden forever. I decided the simple answer for now was [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 310,
        "title": "Power strips for under standing desk",
        "content": "<!-- wp:image {\"id\":314,\"width\":780,\"height\":438,\"sizeSlug\":\"full\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/02\/power-strips-1-edited.jpeg\" alt=\"\" class=\"wp-image-314\" width=\"780\" height=\"438\" \/><\/figure>\n<!-- \/wp:image -->\n\n<!-- wp:paragraph -->\n<p>Recently purchased a pair of 6 outlet power strips to mount under my desk to improve the cable management situation. It was instigated by getting a great Black Friday deal on an APC UPS battery backup.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Mounting<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I mounted them using some 3M command strips that were actually part of another kit I had hanging around. Used 4 strips for each powerbar to hopefully get a good hold. If they don\u2019t work I\u2019ll screw the power bars in but thought I\u2019d give it a try.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I mounted one offset on each side of the desk right at the deepest edge. This gives me wide access to power and versatility in how to manage the cables.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I used the same command hooks that the strips came from to hold the power cable up and out of the way. Not sure they will end up working great but maybe it will be a temporary solution until I find something better.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Desk setup<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I\u2019ll post some more photos and descriptions once I complete the setup. Waiting on a Mac Mini under desk mount that I\u2019m excited about to hide much of the cable madness. I like a clean desk.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Power strips<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/www.amazon.com\/gp\/product\/B07M62Z82T\/ref=as_li_tl?ie=UTF8&amp;tag=samtherobot-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B07M62Z82T&amp;linkId=5ab89d687f36ae3d0981b621cb30c489\">Power Strip with 6 Outlets 14AWG Cord Straight Plug for Commercial, Industrial, School and Home,15A 125V 1875W, ETL Approved and Listed<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key was getting power strips that don\u2019t have surge protection. I will be plugging these into an APC UPS power supply which specifically warns against plugging surge protectors into it. The tl;dr is that the surge protection can mask the load and give the UPS an incorrect reading which could lead to overloads.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/www.apc.com\/us\/en\/faqs\/FA158852\/#:~:text=Plugging%20a%20surge%20protector%20into,to%20inadvertently%20overload%20their%20UPS\">https:\/\/www.apc.com\/us\/en\/faqs\/FA158852\/#:~:text=Plugging a surge protector into,to inadvertently overload their UPS<\/a>.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/image",
                "attrs": {
                    "id": 314,
                    "width": 780,
                    "height": 438,
                    "sizeSlug": "full",
                    "linkDestination": "none"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-image size-full is-resized\"><img src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/02\/power-strips-1-edited.jpeg\" alt=\"\" class=\"wp-image-314\" width=\"780\" height=\"438\" \/><\/figure>\n",
                "mediaDetails": {
                    "width": 2560,
                    "height": 1440,
                    "file": "2023\/02\/power-strips-1-edited-scaled.jpeg",
                    "filesize": 418013,
                    "sizes": {
                        "medium": {
                            "file": "power-strips-1-edited-300x169.jpeg",
                            "width": 300,
                            "height": 169,
                            "mime-type": "image\/jpeg",
                            "filesize": 7204
                        },
                        "large": {
                            "file": "power-strips-1-edited-1024x576.jpeg",
                            "width": 1024,
                            "height": 576,
                            "mime-type": "image\/jpeg",
                            "filesize": 49331
                        },
                        "thumbnail": {
                            "file": "power-strips-1-edited-150x150.jpeg",
                            "width": 150,
                            "height": 150,
                            "mime-type": "image\/jpeg",
                            "filesize": 3712
                        },
                        "medium_large": {
                            "file": "power-strips-1-edited-768x432.jpeg",
                            "width": 768,
                            "height": 432,
                            "mime-type": "image\/jpeg",
                            "filesize": 29085
                        },
                        "1536x1536": {
                            "file": "power-strips-1-edited-1536x864.jpeg",
                            "width": 1536,
                            "height": 864,
                            "mime-type": "image\/jpeg",
                            "filesize": 123317
                        },
                        "2048x2048": {
                            "file": "power-strips-1-edited-2048x1152.jpeg",
                            "width": 2048,
                            "height": 1152,
                            "mime-type": "image\/jpeg",
                            "filesize": 249242
                        }
                    },
                    "image_meta": {
                        "aperture": "0",
                        "credit": "",
                        "camera": "",
                        "caption": "",
                        "created_timestamp": "0",
                        "copyright": "",
                        "focal_length": "0",
                        "iso": "0",
                        "shutter_speed": "0",
                        "title": "",
                        "orientation": "0",
                        "keywords": []
                    },
                    "original_image": "power-strips-1-edited.jpeg"
                }
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Recently purchased a pair of 6 outlet power strips to mount under my desk to improve the cable management situation. It was instigated by getting a great Black Friday deal on an APC UPS battery backup.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Mounting<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I mounted them using some 3M command strips that were actually part of another kit I had hanging around. Used 4 strips for each powerbar to hopefully get a good hold. If they don\u2019t work I\u2019ll screw the power bars in but thought I\u2019d give it a try.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I mounted one offset on each side of the desk right at the deepest edge. This gives me wide access to power and versatility in how to manage the cables.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I used the same command hooks that the strips came from to hold the power cable up and out of the way. Not sure they will end up working great but maybe it will be a temporary solution until I find something better.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Desk setup<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ll post some more photos and descriptions once I complete the setup. Waiting on a Mac Mini under desk mount that I\u2019m excited about to hide much of the cable madness. I like a clean desk.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Power strips<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/www.amazon.com\/gp\/product\/B07M62Z82T\/ref=as_li_tl?ie=UTF8&amp;tag=samtherobot-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B07M62Z82T&amp;linkId=5ab89d687f36ae3d0981b621cb30c489\">Power Strip with 6 Outlets 14AWG Cord Straight Plug for Commercial, Industrial, School and Home,15A 125V 1875W, ETL Approved and Listed<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The key was getting power strips that don\u2019t have surge protection. I will be plugging these into an APC UPS power supply which specifically warns against plugging surge protectors into it. The tl;dr is that the surge protection can mask the load and give the UPS an incorrect reading which could lead to overloads.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/www.apc.com\/us\/en\/faqs\/FA158852\/#:~:text=Plugging%20a%20surge%20protector%20into,to%20inadvertently%20overload%20their%20UPS\">https:\/\/www.apc.com\/us\/en\/faqs\/FA158852\/#:~:text=Plugging a surge protector into,to inadvertently overload their UPS<\/a>.<\/p>\n"
            }
        ],
        "rendered_content": "\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" decoding=\"async\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2023\/02\/power-strips-1-edited.jpeg\" alt=\"\" class=\"wp-image-314\" width=\"780\" height=\"438\" \/><\/figure>\n\n\n\n<p>Recently purchased a pair of 6 outlet power strips to mount under my desk to improve the cable management situation. It was instigated by getting a great Black Friday deal on an APC UPS battery backup.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Mounting<\/h2>\n\n\n\n<p>I mounted them using some 3M command strips that were actually part of another kit I had hanging around. Used 4 strips for each powerbar to hopefully get a good hold. If they don\u2019t work I\u2019ll screw the power bars in but thought I\u2019d give it a try.<\/p>\n\n\n\n<p>I mounted one offset on each side of the desk right at the deepest edge. This gives me wide access to power and versatility in how to manage the cables.<\/p>\n\n\n\n<p>I used the same command hooks that the strips came from to hold the power cable up and out of the way. Not sure they will end up working great but maybe it will be a temporary solution until I find something better.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Desk setup<\/h2>\n\n\n\n<p>I\u2019ll post some more photos and descriptions once I complete the setup. Waiting on a Mac Mini under desk mount that I\u2019m excited about to hide much of the cable madness. I like a clean desk.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Power strips<\/h2>\n\n\n\n<p><a href=\"https:\/\/www.amazon.com\/gp\/product\/B07M62Z82T\/ref=as_li_tl?ie=UTF8&amp;tag=samtherobot-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B07M62Z82T&amp;linkId=5ab89d687f36ae3d0981b621cb30c489\">Power Strip with 6 Outlets 14AWG Cord Straight Plug for Commercial, Industrial, School and Home,15A 125V 1875W, ETL Approved and Listed<\/a><\/p>\n\n\n\n<p>The key was getting power strips that don\u2019t have surge protection. I will be plugging these into an APC UPS power supply which specifically warns against plugging surge protectors into it. The tl;dr is that the surge protection can mask the load and give the UPS an incorrect reading which could lead to overloads.<\/p>\n\n\n\n<p><a href=\"https:\/\/www.apc.com\/us\/en\/faqs\/FA158852\/#:~:text=Plugging%20a%20surge%20protector%20into,to%20inadvertently%20overload%20their%20UPS\">https:\/\/www.apc.com\/us\/en\/faqs\/FA158852\/#:~:text=Plugging a surge protector into,to inadvertently overload their UPS<\/a>.<\/p>\n",
        "date": "2022-01-22 02:49:00",
        "slug": "power-strips-for-under-standing-desk",
        "excerpt": "Recently purchased a pair of 6 outlet power strips to mount under my desk to improve the cable management situation. It was instigated by getting a great Black Friday deal on an APC UPS battery backup. Mounting I mounted them using some 3M command strips that were actually part of another kit I had hanging [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2023\/02\/power-strips-1-scaled.jpeg"
    },
    {
        "id": 300,
        "title": "How to fix electric burners that always stay on",
        "content": "<!-- wp:paragraph {\"className\":\"alert alert-primary\"} -->\n<p class=\"alert alert-primary\">\ud83d\udca1 Note that I am not an electrician or licensed professional to do this. Please take every precaution and hire a professional if you don\u2019t feel comfortable. This is just an account of my personal experience.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Problem<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Our front left and back left burner on our GE stove top would only heat at the highest temperature. Didn\u2019t matter if we set it to low, the burner would stay on constantly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I did some searching and reading and found that most likely the issue has to do with the infinite switch. This switch turns on and off at specific intervals in order to regulate the temperature. When they go bad it can mean that it just stay open and your burner will stay on all the time no matter what setting.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Solution<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It was simply a matter of entering our stove model into the GE Appliance Parts &amp; Accessories website to get a list of replacement parts. You can find the infinite switch for the specific burner you need to fix.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph {\"className\":\"alert alert-primary\"} -->\n<p class=\"alert alert-primary\">\ud83d\udca1 Safety - make sure both the breaker is off and the stove is unplugged from the wall.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once I had the part, I pulled off the knobs on the front of the stove panel to reveal two screws. Unscrewing these released the infinite switches that I was going to replace.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then unscrewed the protective panel on the back of the control panel to reveal the infinite switches and their associated wires.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Replace<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I first took photos of the existing switches, specifically showing how the wires connect. Always good to have a reference in case something gets mixed up.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Then I replaced the wires one by one. Remove one wire from the old switch and attach it to the correct place on the new switch. This way it is unlikely that wires will get mixed up.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Close up and test<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once the wires are in place, screw the switches back on the panel, replace the rear panel, and put the knobs on the new switch.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I grabbed a pot of water and place it on one of the burners with new infinite switches. I set the knob to 3\u2014a setting that previously would have boiled the water fairly quickly.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It works! Water gets warmed slowly and never comes to a boil. I can hear the click of the infinite switch as it turns the burner on and off to regulate the temperature. I can also watch the burner itself light up for only a brief period of time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Just to have a technician come diagnose the problem would have costed more than the parts. It\u2019s fun to feel like you have a little power in repairing things in this day and age. So often we\u2019re told just to replace things but I find that a little wasteful for my tastes. If I can repair it, I definitely will try.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now we have a working stove again<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reference<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Here is the primary video I used for reference, although there are a bunch by\u00a0<a href=\"https:\/\/www.youtube.com\/c\/AmreSupplyCanada\/search?query=infinite\">AMRE Supply<\/a>\u00a0that are great as well.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:embed {\"url\":\"https:\/\/www.youtube.com\/embed\/Unc9Q2zSPWA\",\"type\":\"rich\",\"providerNameSlug\":\"embed-handler\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps:\/\/www.youtube.com\/embed\/Unc9Q2zSPWA\n<\/div><\/figure>\n<!-- \/wp:embed -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": {
                    "className": "alert alert-primary"
                },
                "innerBlocks": [],
                "innerHTML": "\n<p class=\"alert alert-primary\">\ud83d\udca1 Note that I am not an electrician or licensed professional to do this. Please take every precaution and hire a professional if you don\u2019t feel comfortable. This is just an account of my personal experience.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The Problem<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Our front left and back left burner on our GE stove top would only heat at the highest temperature. Didn\u2019t matter if we set it to low, the burner would stay on constantly.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I did some searching and reading and found that most likely the issue has to do with the infinite switch. This switch turns on and off at specific intervals in order to regulate the temperature. When they go bad it can mean that it just stay open and your burner will stay on all the time no matter what setting.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">The Solution<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It was simply a matter of entering our stove model into the GE Appliance Parts &amp; Accessories website to get a list of replacement parts. You can find the infinite switch for the specific burner you need to fix.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": {
                    "className": "alert alert-primary"
                },
                "innerBlocks": [],
                "innerHTML": "\n<p class=\"alert alert-primary\">\ud83d\udca1 Safety - make sure both the breaker is off and the stove is unplugged from the wall.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Once I had the part, I pulled off the knobs on the front of the stove panel to reveal two screws. Unscrewing these released the infinite switches that I was going to replace.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then unscrewed the protective panel on the back of the control panel to reveal the infinite switches and their associated wires.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Replace<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I first took photos of the existing switches, specifically showing how the wires connect. Always good to have a reference in case something gets mixed up.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then I replaced the wires one by one. Remove one wire from the old switch and attach it to the correct place on the new switch. This way it is unlikely that wires will get mixed up.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Close up and test<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Once the wires are in place, screw the switches back on the panel, replace the rear panel, and put the knobs on the new switch.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I grabbed a pot of water and place it on one of the burners with new infinite switches. I set the knob to 3\u2014a setting that previously would have boiled the water fairly quickly.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>It works! Water gets warmed slowly and never comes to a boil. I can hear the click of the infinite switch as it turns the burner on and off to regulate the temperature. I can also watch the burner itself light up for only a brief period of time.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Just to have a technician come diagnose the problem would have costed more than the parts. It\u2019s fun to feel like you have a little power in repairing things in this day and age. So often we\u2019re told just to replace things but I find that a little wasteful for my tastes. If I can repair it, I definitely will try.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we have a working stove again<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Reference<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here is the primary video I used for reference, although there are a bunch by\u00a0<a href=\"https:\/\/www.youtube.com\/c\/AmreSupplyCanada\/search?query=infinite\">AMRE Supply<\/a>\u00a0that are great as well.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/embed",
                "attrs": {
                    "url": "https:\/\/www.youtube.com\/embed\/Unc9Q2zSPWA",
                    "type": "rich",
                    "providerNameSlug": "embed-handler",
                    "responsive": true,
                    "className": "wp-embed-aspect-16-9 wp-has-aspect-ratio"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps:\/\/www.youtube.com\/embed\/Unc9Q2zSPWA\n<\/div><\/figure>\n"
            }
        ],
        "rendered_content": "\n<p class=\"alert alert-primary\">\ud83d\udca1 Note that I am not an electrician or licensed professional to do this. Please take every precaution and hire a professional if you don\u2019t feel comfortable. This is just an account of my personal experience.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The Problem<\/h2>\n\n\n\n<p>Our front left and back left burner on our GE stove top would only heat at the highest temperature. Didn\u2019t matter if we set it to low, the burner would stay on constantly.<\/p>\n\n\n\n<p>I did some searching and reading and found that most likely the issue has to do with the infinite switch. This switch turns on and off at specific intervals in order to regulate the temperature. When they go bad it can mean that it just stay open and your burner will stay on all the time no matter what setting.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The Solution<\/h2>\n\n\n\n<p>It was simply a matter of entering our stove model into the GE Appliance Parts &amp; Accessories website to get a list of replacement parts. You can find the infinite switch for the specific burner you need to fix.<\/p>\n\n\n\n<p class=\"alert alert-primary\">\ud83d\udca1 Safety &#8211; make sure both the breaker is off and the stove is unplugged from the wall.<\/p>\n\n\n\n<p>Once I had the part, I pulled off the knobs on the front of the stove panel to reveal two screws. Unscrewing these released the infinite switches that I was going to replace.<\/p>\n\n\n\n<p>Then unscrewed the protective panel on the back of the control panel to reveal the infinite switches and their associated wires.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Replace<\/h3>\n\n\n\n<p>I first took photos of the existing switches, specifically showing how the wires connect. Always good to have a reference in case something gets mixed up.<\/p>\n\n\n\n<p>Then I replaced the wires one by one. Remove one wire from the old switch and attach it to the correct place on the new switch. This way it is unlikely that wires will get mixed up.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Close up and test<\/h3>\n\n\n\n<p>Once the wires are in place, screw the switches back on the panel, replace the rear panel, and put the knobs on the new switch.<\/p>\n\n\n\n<p>I grabbed a pot of water and place it on one of the burners with new infinite switches. I set the knob to 3\u2014a setting that previously would have boiled the water fairly quickly.<\/p>\n\n\n\n<p>It works! Water gets warmed slowly and never comes to a boil. I can hear the click of the infinite switch as it turns the burner on and off to regulate the temperature. I can also watch the burner itself light up for only a brief period of time.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n\n\n\n<p>Just to have a technician come diagnose the problem would have costed more than the parts. It\u2019s fun to feel like you have a little power in repairing things in this day and age. So often we\u2019re told just to replace things but I find that a little wasteful for my tastes. If I can repair it, I definitely will try.<\/p>\n\n\n\n<p>Now we have a working stove again<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Reference<\/h2>\n\n\n\n<p>Here is the primary video I used for reference, although there are a bunch by\u00a0<a href=\"https:\/\/www.youtube.com\/c\/AmreSupplyCanada\/search?query=infinite\">AMRE Supply<\/a>\u00a0that are great as well.<\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"Surface Element Stays On - Troubleshooting | Repair &amp; Replace\" width=\"500\" height=\"281\" src=\"https:\/\/www.youtube.com\/embed\/Unc9Q2zSPWA?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n<\/div><\/figure>\n",
        "date": "2022-01-22 02:37:00",
        "slug": "how-to-fix-electric-burners-that-always-stay-on",
        "excerpt": "Our front left and back left burner on our GE stove top would only heat at the highest temperature. Didn\u2019t matter if we set it to low, the burner would stay on constantly. Here's what I did to fix it.",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 295,
        "title": "Editing Global State in react-admin",
        "content": "<!-- wp:paragraph -->\n<p>I recently came across a question on&nbsp;<a href=\"https:\/\/stackoverflow.com\/questions\/70706331\/how-can-i-update-redux-store-in-react-admin\/70725193#70725193\">StackOverflow<\/a>&nbsp;of someone who was asking how to change the global state of a resource. I answered the question as it was asked, but then gave an explanation of why that is a bad idea.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Answer<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Access Redux Store<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You can access the redux store using the useSelector hook made available by the react-redux module.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>import { useSelector } from \"react-redux\";\n\nfunction myComponent() {\n  const myReduxData = useSelector(path.to.your.redux.key);\n\n  return &lt;p&gt;myReduxData&lt;\/p&gt;;\n}<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Modify Redux Store<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To modify data in the redux store you would write a custom reducer. You can hook into many of the actions that are fired automatically by react-admin.&nbsp;<a href=\"https:\/\/marmelab.com\/react-admin\/Admin.html#customreducers\">https:\/\/marmelab.com\/react-admin\/Admin.html#customreducers<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\"><strong>Redux is an implementation detail<\/strong><\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Although I gave direction with the above, I would highly recommend not going about it this way. React-admin views redux as an implementation detail (see the bottom of this blog&nbsp;<a href=\"https:\/\/marmelab.com\/blog\/2020\/04\/27\/react-admin-tutorials-custom-forms-related-records.html\">https:\/\/marmelab.com\/blog\/2020\/04\/27\/react-admin-tutorials-custom-forms-related-records.html<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That means you should never update redux directly. A future version of react-admin could realistically replace redux with something else which would break your app. I believe they are waiting for react to release single feature that would make react context versatile enough to replace redux.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>What's the Problem You're Trying to Solve?<\/strong><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In most cases there is a better, more blessed way to update the global state. Don\u2019t try and update anything to do with the inner workings of react-admin such as resources. You might as well build your own framework as you\u2019re bypassing everything that makes react-admin great.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I recently came across a question on&nbsp;<a href=\"https:\/\/stackoverflow.com\/questions\/70706331\/how-can-i-update-redux-store-in-react-admin\/70725193#70725193\">StackOverflow<\/a>&nbsp;of someone who was asking how to change the global state of a resource. I answered the question as it was asked, but then gave an explanation of why that is a bad idea.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Answer<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Access Redux Store<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>You can access the redux store using the useSelector hook made available by the react-redux module.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>import { useSelector } from \"react-redux\";\n\nfunction myComponent() {\n  const myReduxData = useSelector(path.to.your.redux.key);\n\n  return &lt;p&gt;myReduxData&lt;\/p&gt;;\n}<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Modify Redux Store<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>To modify data in the redux store you would write a custom reducer. You can hook into many of the actions that are fired automatically by react-admin.&nbsp;<a href=\"https:\/\/marmelab.com\/react-admin\/Admin.html#customreducers\">https:\/\/marmelab.com\/react-admin\/Admin.html#customreducers<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\"><strong>Redux is an implementation detail<\/strong><\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Although I gave direction with the above, I would highly recommend not going about it this way. React-admin views redux as an implementation detail (see the bottom of this blog&nbsp;<a href=\"https:\/\/marmelab.com\/blog\/2020\/04\/27\/react-admin-tutorials-custom-forms-related-records.html\">https:\/\/marmelab.com\/blog\/2020\/04\/27\/react-admin-tutorials-custom-forms-related-records.html<\/a>)<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That means you should never update redux directly. A future version of react-admin could realistically replace redux with something else which would break your app. I believe they are waiting for react to release single feature that would make react context versatile enough to replace redux.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><strong>What's the Problem You're Trying to Solve?<\/strong><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In most cases there is a better, more blessed way to update the global state. Don\u2019t try and update anything to do with the inner workings of react-admin such as resources. You might as well build your own framework as you\u2019re bypassing everything that makes react-admin great.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I recently came across a question on&nbsp;<a href=\"https:\/\/stackoverflow.com\/questions\/70706331\/how-can-i-update-redux-store-in-react-admin\/70725193#70725193\">StackOverflow<\/a>&nbsp;of someone who was asking how to change the global state of a resource. I answered the question as it was asked, but then gave an explanation of why that is a bad idea.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Answer<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Access Redux Store<\/h3>\n\n\n\n<p>You can access the redux store using the useSelector hook made available by the react-redux module.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>import { useSelector } from \"react-redux\";\n\nfunction myComponent() {\n  const myReduxData = useSelector(path.to.your.redux.key);\n\n  return &lt;p&gt;myReduxData&lt;\/p&gt;;\n}<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Modify Redux Store<\/h3>\n\n\n\n<p>To modify data in the redux store you would write a custom reducer. You can hook into many of the actions that are fired automatically by react-admin.&nbsp;<a href=\"https:\/\/marmelab.com\/react-admin\/Admin.html#customreducers\">https:\/\/marmelab.com\/react-admin\/Admin.html#customreducers<\/a><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Redux is an implementation detail<\/strong><\/h2>\n\n\n\n<p>Although I gave direction with the above, I would highly recommend not going about it this way. React-admin views redux as an implementation detail (see the bottom of this blog&nbsp;<a href=\"https:\/\/marmelab.com\/blog\/2020\/04\/27\/react-admin-tutorials-custom-forms-related-records.html\">https:\/\/marmelab.com\/blog\/2020\/04\/27\/react-admin-tutorials-custom-forms-related-records.html<\/a>)<\/p>\n\n\n\n<p>That means you should never update redux directly. A future version of react-admin could realistically replace redux with something else which would break your app. I believe they are waiting for react to release single feature that would make react context versatile enough to replace redux.<\/p>\n\n\n\n<p><strong>What&#8217;s the Problem You&#8217;re Trying to Solve?<\/strong><\/p>\n\n\n\n<p>In most cases there is a better, more blessed way to update the global state. Don\u2019t try and update anything to do with the inner workings of react-admin such as resources. You might as well build your own framework as you\u2019re bypassing everything that makes react-admin great.<\/p>\n",
        "date": "2022-01-15 02:25:00",
        "slug": "editing-global-state-in-react-admin",
        "excerpt": "I recently came across a question on <a href=\"https:\/\/stackoverflow.com\/questions\/70706331\/how-can-i-update-redux-store-in-react-admin\/70725193#70725193\">StackOverflow<\/a> of someone who was asking how to change the global state of a resource. I answered the question as it was asked, but then gave an explanation of why that is a bad idea.",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 290,
        "title": "Merging MKV video files",
        "content": "<!-- wp:paragraph -->\n<p>I\u2019ve been working on backing up all my DVDs to Plex. I finally found a system that was the right level of precision to satisfy the video nerd in me without going overboard.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In most cases I use MakeMKV to copy all the video files off the disc in their native format (so long as it\u2019s mpeg2 or h264).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Extras<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The need for merging comes from wanting to preserve all the extras on a disc without ending up with a million individual video files to click through. Plex does a nice job on a few platforms of presenting extras but it tends to break down if there are too many videos. The interface just gets cluttered.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Play All<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some titles give the great option of&nbsp;<em>Play All<\/em>. This results in a single file coming off the disc with all clips included. Then just delete all the little individual clips.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Merge<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>One of the great things about MKV is that it\u2019s a wrapper file format. That means you can manipulate things with quite a bit of flexibility. In most cases you can do a lot without ever having to re-encode, losing a quality generation and a lot of compute time.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">mkvtoolnix<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I found this utility that helps manipulate MKV files. I installed it with Homebrew as I do with most utilities like this.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/formulae.brew.sh\/cask\/mkvtoolnix#default<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">mkvmerge<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>mkvmerge -o full.mkv file1.mkv + file2.mkv<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I found so far this seems to work. If I want to merge a number of short clips into one that with play with Plex, this is it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here are more detailed docs as well for the multitude of options.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html<\/a><\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I\u2019ve been working on backing up all my DVDs to Plex. I finally found a system that was the right level of precision to satisfy the video nerd in me without going overboard.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In most cases I use MakeMKV to copy all the video files off the disc in their native format (so long as it\u2019s mpeg2 or h264).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Extras<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The need for merging comes from wanting to preserve all the extras on a disc without ending up with a million individual video files to click through. Plex does a nice job on a few platforms of presenting extras but it tends to break down if there are too many videos. The interface just gets cluttered.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Play All<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Some titles give the great option of&nbsp;<em>Play All<\/em>. This results in a single file coming off the disc with all clips included. Then just delete all the little individual clips.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Merge<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One of the great things about MKV is that it\u2019s a wrapper file format. That means you can manipulate things with quite a bit of flexibility. In most cases you can do a lot without ever having to re-encode, losing a quality generation and a lot of compute time.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">mkvtoolnix<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I found this utility that helps manipulate MKV files. I installed it with Homebrew as I do with most utilities like this.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/formulae.brew.sh\/cask\/mkvtoolnix#default<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">mkvmerge<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>mkvmerge -o full.mkv file1.mkv + file2.mkv<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I found so far this seems to work. If I want to merge a number of short clips into one that with play with Plex, this is it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here are more detailed docs as well for the multitude of options.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html<\/a><\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I\u2019ve been working on backing up all my DVDs to Plex. I finally found a system that was the right level of precision to satisfy the video nerd in me without going overboard.<\/p>\n\n\n\n<p>In most cases I use MakeMKV to copy all the video files off the disc in their native format (so long as it\u2019s mpeg2 or h264).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Extras<\/h2>\n\n\n\n<p>The need for merging comes from wanting to preserve all the extras on a disc without ending up with a million individual video files to click through. Plex does a nice job on a few platforms of presenting extras but it tends to break down if there are too many videos. The interface just gets cluttered.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Play All<\/h2>\n\n\n\n<p>Some titles give the great option of&nbsp;<em>Play All<\/em>. This results in a single file coming off the disc with all clips included. Then just delete all the little individual clips.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Merge<\/h2>\n\n\n\n<p>One of the great things about MKV is that it\u2019s a wrapper file format. That means you can manipulate things with quite a bit of flexibility. In most cases you can do a lot without ever having to re-encode, losing a quality generation and a lot of compute time.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">mkvtoolnix<\/h3>\n\n\n\n<p>I found this utility that helps manipulate MKV files. I installed it with Homebrew as I do with most utilities like this.<\/p>\n\n\n\n<p>https:\/\/formulae.brew.sh\/cask\/mkvtoolnix#default<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">mkvmerge<\/h3>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>mkvmerge -o full.mkv file1.mkv + file2.mkv<\/code><\/pre>\n\n\n\n<p>I found so far this seems to work. If I want to merge a number of short clips into one that with play with Plex, this is it.<\/p>\n\n\n\n<p>Here are more detailed docs as well for the multitude of options.<\/p>\n\n\n\n<p><a href=\"https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/mkvtoolnix.download\/doc\/mkvmerge.html<\/a><\/p>\n",
        "date": "2022-01-14 02:11:00",
        "slug": "merging-mkv-video-files",
        "excerpt": "I\u2019ve been working on backing up all my DVDs to Plex. I finally found a system that was the right level of precision to satisfy the video nerd in me without going overboard. Merging some files is essential with titles that have lots of short clips.",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 285,
        "title": "Fran\u00e7ois Zaninotto at API Platform Conference 2021",
        "content": "<!-- wp:paragraph -->\n<p>I just watch a video by Marmelab founder and CEO Fran\u00e7ois Zaninotto at the API Platform Conference 2021. In it he detailed out some of the great benefits and features inherent in react-admin. I often like watching conference talks like this as they don\u2019t tend to be beginner level topics but cover real world problems that I am dealing with.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:embed {\"url\":\"https:\/\/www.youtube.com\/embed\/3m5An-s0r-k\",\"type\":\"rich\",\"providerNameSlug\":\"embed-handler\",\"responsive\":true,\"className\":\"wp-embed-aspect-16-9 wp-has-aspect-ratio\"} -->\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps:\/\/www.youtube.com\/embed\/3m5An-s0r-k\n<\/div><\/figure>\n<!-- \/wp:embed -->\n\n<!-- wp:paragraph -->\n<p>I thought to highlight some of my favorite points both for my own second brain and for anyone who wants a taste of what he covered.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pro Tip #2: Learn react-admin with the demos<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This has definitely been my experience. Make sure you check out the demo sites they have built that detail with full open-source code some of the more advanced and recommended methods.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/marmelab.com\/react-admin-demo\/#\/login\">Posters Galore<\/a>&nbsp;- an e-commerce style poster shop (<a href=\"https:\/\/github.com\/marmelab\/react-admin\/tree\/master\/examples\/demo\">source code<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/marmelab.com\/react-admin-crm\/\">CRM<\/a>&nbsp;- a customer relationship management system (<a href=\"https:\/\/github.com\/marmelab\/react-admin\/tree\/master\/examples\/crm\">source code<\/a>)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pro Tip #3: Know you context<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Context was a hard one to wrap my head around but finally with some of the more recent features of react-admin, I think I get it. In his talk, Fran\u00e7ois has a great way of comparing context and redux, both of which are used extensively in react-admin.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One of the key use cases that brought it together for me was with the useRecordContext hook. With this hook your could grab information about the current record.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this example we\u2019re using the record context for a tasks widget on the dashboard.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const ItemInfo = () =&gt; {\n  const record = useRecordContext();\n\n  const currentYear = new Date().getFullYear();\n  const taskYear = new Date(`${record.date_end} 00:00`).getFullYear();\n  const dateOptions = { month: \"short\", day: \"numeric\" };\n  if (taskYear !== currentYear) dateOptions.year = \"numeric\";\n\n  return (\n    &lt;Grid container direction=\"column\" justifyContent=\"flex-start\"&gt;\n      &lt;Grid item&gt;\n        &lt;Grid container direction=\"row\" justifyContent=\"space-between\"&gt;\n          &lt;Grid item&gt;\n            &lt;TextField\n              source=\"name\"\n              variant=\"body1\"\n              component=\"span\"\n              color=\"textPrimary\"\n            \/&gt;\n          &lt;\/Grid&gt;\n          &lt;Grid item&gt;\n            &lt;DateField\n              source=\"date_end\"\n              variant=\"body2\"\n              options={dateOptions}\n              component=\"p\"\n              color=\"textSecondary\"\n            \/&gt;\n          &lt;\/Grid&gt;\n        &lt;\/Grid&gt;\n      &lt;\/Grid&gt;\n      &lt;Grid\n        item\n        xs={12}\n        style={{\n          whiteSpace: \"nowrap\",\n          textOverflow: \"ellipsis\",\n          overflow: \"hidden\",\n        }}\n      &gt;\n        &lt;ReferenceField\n          label=\"Project\"\n          source=\"project_id\"\n          reference=\"projects\"\n          basePath=\"projects\"\n          link={false}\n        &gt;\n          &lt;FunctionField\n            style={{\n              textOverflow: \"ellipsis\",\n              overflow: \"hidden\",\n            }}\n            render={(record) =&gt; `${record.num} - ${record.name}`}\n            variant=\"caption\"\n            component=\"p\"\n            color=\"textSecondary\"\n          \/&gt;\n        &lt;\/ReferenceField&gt;\n      &lt;\/Grid&gt;\n    &lt;\/Grid&gt;\n  );\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>What makes the above example interesting is that we\u2019re also creating our own record context that is different from the one loaded by the page, since of course the dashboard doesn\u2019t actually have a record context.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const SimpleTaskList = () =&gt; {\n  const { data, ids, refetch } = useListContext();\n  const records = ids.map((id) =&gt; data&#091;id]);\n  const theme = useTheme();\n  const classes = useStyles(theme);\n\n  return (\n    &lt;MuiList&gt;\n      {records.map((record) =&gt; (\n        &lt;RecordContextProvider key={record.id} value={record}&gt;\n          &lt;ListItem\n            button\n            component={Link}\n            to={`\/tasks\/${record.id}`}\n            alignItems=\"flex-start\"\n          &gt;\n            &lt;ListItemAvatar&gt;\n              {taskIcons&#091;record.name] ? (\n                createElement(taskIcons&#091;record.name])\n              ) : (\n                &lt;CheckCircle \/&gt;\n              )}\n            &lt;\/ListItemAvatar&gt;\n            &lt;ListItemText\n              disableTypography\n              primary={&lt;ItemInfo \/&gt;}\n              className={classes.listItemText}\n            \/&gt;\n            &lt;ListItemSecondaryAction&gt;\n              &lt;TaskStatusToggleButton\n                record={record}\n                variant=\"iconButton\"\n                forceReloadFn={refetch}\n              \/&gt;\n            &lt;\/ListItemSecondaryAction&gt;\n          &lt;\/ListItem&gt;\n        &lt;\/RecordContextProvider&gt;\n      ))}\n    &lt;\/MuiList&gt;\n  );\n};\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Here we loop over a list of records we fetched and create a record context for each with&nbsp;<code>RecordContextProvider<\/code>.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The magic behind that is then you can use all the react-admin fields like we\u2019re using in the&nbsp;<code>&lt;ItemInfo \/&gt;<\/code>&nbsp;component. No need to pass numerous props down the chain, all the record data is just available.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pro Tip #9: Add custom dataProvider methods<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>At all times we try to adhere to REST methodology when building our API. However, since we are adapting a legacy system, there is just some functionality that doesn\u2019t quite fit.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For these cases we created a dataProvider method called&nbsp;<code>rpc<\/code>&nbsp;that allows us to make non-standard REST calls using our own methodology. Again, this is a temporary solution that we hope to rectify as we have the ability to change the backend. But for now this proved useful.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>rpc: (resource, params) =&gt; {\n      console.log(resource, params);\n      const url = getResourceURL(resource, \"rpc\", params);\n      const data = params.data;\n      return httpClient\n        .post(apiName, url, {\n          ...httpClientInit,\n          body: data || {},\n        })\n        .then((item) =&gt; {\n          return {\n            data: { ...item.data },\n          };\n        })\n        .catch(handleError);\n    },\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pro Tip #21: Use Material-UI Datagrid<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is one I still have to look into but it sounds promising. I\u2019m always into using the dependencies I already have and the fact the Material-UI datagrid now does more is great.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>import { Datagrid } from \"ra-datagrid\";<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Keep in mind you need to define the columns in Javascript instead of with the react-admin field components. A different flavor but could be worth it for the extra features.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Pro Tip #35: Use react-final-form<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Definitely have had experience with this one. I\u2019ll probably need to write an entire blog post on this one because there was so much to it and it\u2019s not at the top of my brain right now.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I just watch a video by Marmelab founder and CEO Fran\u00e7ois Zaninotto at the API Platform Conference 2021. In it he detailed out some of the great benefits and features inherent in react-admin. I often like watching conference talks like this as they don\u2019t tend to be beginner level topics but cover real world problems that I am dealing with.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/embed",
                "attrs": {
                    "url": "https:\/\/www.youtube.com\/embed\/3m5An-s0r-k",
                    "type": "rich",
                    "providerNameSlug": "embed-handler",
                    "responsive": true,
                    "className": "wp-embed-aspect-16-9 wp-has-aspect-ratio"
                },
                "innerBlocks": [],
                "innerHTML": "\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\nhttps:\/\/www.youtube.com\/embed\/3m5An-s0r-k\n<\/div><\/figure>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I thought to highlight some of my favorite points both for my own second brain and for anyone who wants a taste of what he covered.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Pro Tip #2: Learn react-admin with the demos<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This has definitely been my experience. Make sure you check out the demo sites they have built that detail with full open-source code some of the more advanced and recommended methods.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/marmelab.com\/react-admin-demo\/#\/login\">Posters Galore<\/a>&nbsp;- an e-commerce style poster shop (<a href=\"https:\/\/github.com\/marmelab\/react-admin\/tree\/master\/examples\/demo\">source code<\/a>)<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/marmelab.com\/react-admin-crm\/\">CRM<\/a>&nbsp;- a customer relationship management system (<a href=\"https:\/\/github.com\/marmelab\/react-admin\/tree\/master\/examples\/crm\">source code<\/a>)<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Pro Tip #3: Know you context<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Context was a hard one to wrap my head around but finally with some of the more recent features of react-admin, I think I get it. In his talk, Fran\u00e7ois has a great way of comparing context and redux, both of which are used extensively in react-admin.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>One of the key use cases that brought it together for me was with the useRecordContext hook. With this hook your could grab information about the current record.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In this example we\u2019re using the record context for a tasks widget on the dashboard.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const ItemInfo = () =&gt; {\n  const record = useRecordContext();\n\n  const currentYear = new Date().getFullYear();\n  const taskYear = new Date(`${record.date_end} 00:00`).getFullYear();\n  const dateOptions = { month: \"short\", day: \"numeric\" };\n  if (taskYear !== currentYear) dateOptions.year = \"numeric\";\n\n  return (\n    &lt;Grid container direction=\"column\" justifyContent=\"flex-start\"&gt;\n      &lt;Grid item&gt;\n        &lt;Grid container direction=\"row\" justifyContent=\"space-between\"&gt;\n          &lt;Grid item&gt;\n            &lt;TextField\n              source=\"name\"\n              variant=\"body1\"\n              component=\"span\"\n              color=\"textPrimary\"\n            \/&gt;\n          &lt;\/Grid&gt;\n          &lt;Grid item&gt;\n            &lt;DateField\n              source=\"date_end\"\n              variant=\"body2\"\n              options={dateOptions}\n              component=\"p\"\n              color=\"textSecondary\"\n            \/&gt;\n          &lt;\/Grid&gt;\n        &lt;\/Grid&gt;\n      &lt;\/Grid&gt;\n      &lt;Grid\n        item\n        xs={12}\n        style={{\n          whiteSpace: \"nowrap\",\n          textOverflow: \"ellipsis\",\n          overflow: \"hidden\",\n        }}\n      &gt;\n        &lt;ReferenceField\n          label=\"Project\"\n          source=\"project_id\"\n          reference=\"projects\"\n          basePath=\"projects\"\n          link={false}\n        &gt;\n          &lt;FunctionField\n            style={{\n              textOverflow: \"ellipsis\",\n              overflow: \"hidden\",\n            }}\n            render={(record) =&gt; `${record.num} - ${record.name}`}\n            variant=\"caption\"\n            component=\"p\"\n            color=\"textSecondary\"\n          \/&gt;\n        &lt;\/ReferenceField&gt;\n      &lt;\/Grid&gt;\n    &lt;\/Grid&gt;\n  );\n};\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>What makes the above example interesting is that we\u2019re also creating our own record context that is different from the one loaded by the page, since of course the dashboard doesn\u2019t actually have a record context.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const SimpleTaskList = () =&gt; {\n  const { data, ids, refetch } = useListContext();\n  const records = ids.map((id) =&gt; data&#091;id]);\n  const theme = useTheme();\n  const classes = useStyles(theme);\n\n  return (\n    &lt;MuiList&gt;\n      {records.map((record) =&gt; (\n        &lt;RecordContextProvider key={record.id} value={record}&gt;\n          &lt;ListItem\n            button\n            component={Link}\n            to={`\/tasks\/${record.id}`}\n            alignItems=\"flex-start\"\n          &gt;\n            &lt;ListItemAvatar&gt;\n              {taskIcons&#091;record.name] ? (\n                createElement(taskIcons&#091;record.name])\n              ) : (\n                &lt;CheckCircle \/&gt;\n              )}\n            &lt;\/ListItemAvatar&gt;\n            &lt;ListItemText\n              disableTypography\n              primary={&lt;ItemInfo \/&gt;}\n              className={classes.listItemText}\n            \/&gt;\n            &lt;ListItemSecondaryAction&gt;\n              &lt;TaskStatusToggleButton\n                record={record}\n                variant=\"iconButton\"\n                forceReloadFn={refetch}\n              \/&gt;\n            &lt;\/ListItemSecondaryAction&gt;\n          &lt;\/ListItem&gt;\n        &lt;\/RecordContextProvider&gt;\n      ))}\n    &lt;\/MuiList&gt;\n  );\n};\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Here we loop over a list of records we fetched and create a record context for each with&nbsp;<code>RecordContextProvider<\/code>.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The magic behind that is then you can use all the react-admin fields like we\u2019re using in the&nbsp;<code>&lt;ItemInfo \/&gt;<\/code>&nbsp;component. No need to pass numerous props down the chain, all the record data is just available.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Pro Tip #9: Add custom dataProvider methods<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>At all times we try to adhere to REST methodology when building our API. However, since we are adapting a legacy system, there is just some functionality that doesn\u2019t quite fit.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>For these cases we created a dataProvider method called&nbsp;<code>rpc<\/code>&nbsp;that allows us to make non-standard REST calls using our own methodology. Again, this is a temporary solution that we hope to rectify as we have the ability to change the backend. But for now this proved useful.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>rpc: (resource, params) =&gt; {\n      console.log(resource, params);\n      const url = getResourceURL(resource, \"rpc\", params);\n      const data = params.data;\n      return httpClient\n        .post(apiName, url, {\n          ...httpClientInit,\n          body: data || {},\n        })\n        .then((item) =&gt; {\n          return {\n            data: { ...item.data },\n          };\n        })\n        .catch(handleError);\n    },\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Pro Tip #21: Use Material-UI Datagrid<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is one I still have to look into but it sounds promising. I\u2019m always into using the dependencies I already have and the fact the Material-UI datagrid now does more is great.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>import { Datagrid } from \"ra-datagrid\";<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Keep in mind you need to define the columns in Javascript instead of with the react-admin field components. A different flavor but could be worth it for the extra features.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Pro Tip #35: Use react-final-form<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Definitely have had experience with this one. I\u2019ll probably need to write an entire blog post on this one because there was so much to it and it\u2019s not at the top of my brain right now.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>I just watch a video by Marmelab founder and CEO Fran\u00e7ois Zaninotto at the API Platform Conference 2021. In it he detailed out some of the great benefits and features inherent in react-admin. I often like watching conference talks like this as they don\u2019t tend to be beginner level topics but cover real world problems that I am dealing with.<\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-embed-handler wp-block-embed-embed-handler wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"API Platform Conference 2021 - Fran\u00e7ois Zaninotto - How To Become A React-admin Grandmaster\" width=\"500\" height=\"281\" src=\"https:\/\/www.youtube.com\/embed\/3m5An-s0r-k?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen><\/iframe>\n<\/div><\/figure>\n\n\n\n<p>I thought to highlight some of my favorite points both for my own second brain and for anyone who wants a taste of what he covered.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Pro Tip #2: Learn react-admin with the demos<\/h2>\n\n\n\n<p>This has definitely been my experience. Make sure you check out the demo sites they have built that detail with full open-source code some of the more advanced and recommended methods.<\/p>\n\n\n\n<p><a href=\"https:\/\/marmelab.com\/react-admin-demo\/#\/login\">Posters Galore<\/a>&nbsp;&#8211; an e-commerce style poster shop (<a href=\"https:\/\/github.com\/marmelab\/react-admin\/tree\/master\/examples\/demo\">source code<\/a>)<\/p>\n\n\n\n<p><a href=\"https:\/\/marmelab.com\/react-admin-crm\/\">CRM<\/a>&nbsp;&#8211; a customer relationship management system (<a href=\"https:\/\/github.com\/marmelab\/react-admin\/tree\/master\/examples\/crm\">source code<\/a>)<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Pro Tip #3: Know you context<\/h2>\n\n\n\n<p>Context was a hard one to wrap my head around but finally with some of the more recent features of react-admin, I think I get it. In his talk, Fran\u00e7ois has a great way of comparing context and redux, both of which are used extensively in react-admin.<\/p>\n\n\n\n<p>One of the key use cases that brought it together for me was with the useRecordContext hook. With this hook your could grab information about the current record.<\/p>\n\n\n\n<p>In this example we\u2019re using the record context for a tasks widget on the dashboard.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const ItemInfo = () =&gt; {\n  const record = useRecordContext();\n\n  const currentYear = new Date().getFullYear();\n  const taskYear = new Date(`${record.date_end} 00:00`).getFullYear();\n  const dateOptions = { month: \"short\", day: \"numeric\" };\n  if (taskYear !== currentYear) dateOptions.year = \"numeric\";\n\n  return (\n    &lt;Grid container direction=\"column\" justifyContent=\"flex-start\"&gt;\n      &lt;Grid item&gt;\n        &lt;Grid container direction=\"row\" justifyContent=\"space-between\"&gt;\n          &lt;Grid item&gt;\n            &lt;TextField\n              source=\"name\"\n              variant=\"body1\"\n              component=\"span\"\n              color=\"textPrimary\"\n            \/&gt;\n          &lt;\/Grid&gt;\n          &lt;Grid item&gt;\n            &lt;DateField\n              source=\"date_end\"\n              variant=\"body2\"\n              options={dateOptions}\n              component=\"p\"\n              color=\"textSecondary\"\n            \/&gt;\n          &lt;\/Grid&gt;\n        &lt;\/Grid&gt;\n      &lt;\/Grid&gt;\n      &lt;Grid\n        item\n        xs={12}\n        style={{\n          whiteSpace: \"nowrap\",\n          textOverflow: \"ellipsis\",\n          overflow: \"hidden\",\n        }}\n      &gt;\n        &lt;ReferenceField\n          label=\"Project\"\n          source=\"project_id\"\n          reference=\"projects\"\n          basePath=\"projects\"\n          link={false}\n        &gt;\n          &lt;FunctionField\n            style={{\n              textOverflow: \"ellipsis\",\n              overflow: \"hidden\",\n            }}\n            render={(record) =&gt; `${record.num} - ${record.name}`}\n            variant=\"caption\"\n            component=\"p\"\n            color=\"textSecondary\"\n          \/&gt;\n        &lt;\/ReferenceField&gt;\n      &lt;\/Grid&gt;\n    &lt;\/Grid&gt;\n  );\n};\n<\/code><\/pre>\n\n\n\n<p>What makes the above example interesting is that we\u2019re also creating our own record context that is different from the one loaded by the page, since of course the dashboard doesn\u2019t actually have a record context.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const SimpleTaskList = () =&gt; {\n  const { data, ids, refetch } = useListContext();\n  const records = ids.map((id) =&gt; data&#091;id]);\n  const theme = useTheme();\n  const classes = useStyles(theme);\n\n  return (\n    &lt;MuiList&gt;\n      {records.map((record) =&gt; (\n        &lt;RecordContextProvider key={record.id} value={record}&gt;\n          &lt;ListItem\n            button\n            component={Link}\n            to={`\/tasks\/${record.id}`}\n            alignItems=\"flex-start\"\n          &gt;\n            &lt;ListItemAvatar&gt;\n              {taskIcons&#091;record.name] ? (\n                createElement(taskIcons&#091;record.name])\n              ) : (\n                &lt;CheckCircle \/&gt;\n              )}\n            &lt;\/ListItemAvatar&gt;\n            &lt;ListItemText\n              disableTypography\n              primary={&lt;ItemInfo \/&gt;}\n              className={classes.listItemText}\n            \/&gt;\n            &lt;ListItemSecondaryAction&gt;\n              &lt;TaskStatusToggleButton\n                record={record}\n                variant=\"iconButton\"\n                forceReloadFn={refetch}\n              \/&gt;\n            &lt;\/ListItemSecondaryAction&gt;\n          &lt;\/ListItem&gt;\n        &lt;\/RecordContextProvider&gt;\n      ))}\n    &lt;\/MuiList&gt;\n  );\n};\n<\/code><\/pre>\n\n\n\n<p>Here we loop over a list of records we fetched and create a record context for each with&nbsp;<code>RecordContextProvider<\/code>.<\/p>\n\n\n\n<p>The magic behind that is then you can use all the react-admin fields like we\u2019re using in the&nbsp;<code>&lt;ItemInfo \/&gt;<\/code>&nbsp;component. No need to pass numerous props down the chain, all the record data is just available.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Pro Tip #9: Add custom dataProvider methods<\/h2>\n\n\n\n<p>At all times we try to adhere to REST methodology when building our API. However, since we are adapting a legacy system, there is just some functionality that doesn\u2019t quite fit.<\/p>\n\n\n\n<p>For these cases we created a dataProvider method called&nbsp;<code>rpc<\/code>&nbsp;that allows us to make non-standard REST calls using our own methodology. Again, this is a temporary solution that we hope to rectify as we have the ability to change the backend. But for now this proved useful.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>rpc: (resource, params) =&gt; {\n      console.log(resource, params);\n      const url = getResourceURL(resource, \"rpc\", params);\n      const data = params.data;\n      return httpClient\n        .post(apiName, url, {\n          ...httpClientInit,\n          body: data || {},\n        })\n        .then((item) =&gt; {\n          return {\n            data: { ...item.data },\n          };\n        })\n        .catch(handleError);\n    },\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Pro Tip #21: Use Material-UI Datagrid<\/h2>\n\n\n\n<p>This is one I still have to look into but it sounds promising. I\u2019m always into using the dependencies I already have and the fact the Material-UI datagrid now does more is great.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>import { Datagrid } from \"ra-datagrid\";<\/code><\/pre>\n\n\n\n<p>Keep in mind you need to define the columns in Javascript instead of with the react-admin field components. A different flavor but could be worth it for the extra features.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Pro Tip #35: Use react-final-form<\/h2>\n\n\n\n<p>Definitely have had experience with this one. I\u2019ll probably need to write an entire blog post on this one because there was so much to it and it\u2019s not at the top of my brain right now.<\/p>\n",
        "date": "2022-01-10 03:49:00",
        "slug": "francois-zaninotto-at-api-platform-conference-2021",
        "excerpt": "I just watch a video by Marmelab founder and CEO Fran\u00e7ois Zaninotto at the API Platform Conference 2021. In it he detailed out some of the great benefits and features inherent in react-admin. I often like watching conference talks like this as they don\u2019t tend to be beginner level topics but cover real world problems that I am dealing with.",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 276,
        "title": "Abstracting a FileMaker database",
        "content": "<!-- wp:paragraph -->\n<p>Lately I have been working on a method for abstracting a FileMaker database into another custom API. I was brought on board to help move a legacy FileMaker application into a more web based platform. It would be too much of a risk to try to rebuild the database from scratch in another technology, as well as the fact that FileMaker gives relatively good access to the data through the FileMaker data API.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Tables<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>FileMaker has its own flavor of database methodology that cannot be translated 1:1 into a new environment. The first issue was deciding how to present the data through the API since FileMaker does not give you direct access to the tables.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We decided to keep things as simple as possible we would represent the FileMaker tables in table layouts that adhered closely to the underlying table structure.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That means we ended up with REST_<em>tablename<\/em>&nbsp;layouts that were exposed through the API that we could consume with our service.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Models<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We then built a model system that represented these FileMaker tables using a standardized CRUD methodology. Our backed is a node express app.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I based some of the basic methodology on the&nbsp;<a href=\"https:\/\/sequelize.org\/\">Sequalize<\/a>&nbsp;project, but far simplified.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>\/\/ Parent class for all other services to extend\nclass Model {\n  constructor() {\n    this.data = {};\n  }\n\n  static client;\n\n  static build(data) {\n    \/\/...builds the model\n  }\n\n  static async get(id) {\n    \/\/...gets a single record\n  }\n\n  static async getByRecordId(recordId) {\n    \/\/...certain FileMaker functionality only returns a recordId\n  }\n\n  static async find(query = {}) {\n    \/\/...find record(s) based on a query\n  }\n\n  static async create(data) {\n    \/\/...creates a new record\n  }\n\n  static async update(id, data) {\n    \/\/...updates a record\n  }\n  static async delete(id) {\n    \/\/...deletes a record\n  }\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now we can extend this model for any of the FileMaker table\/layouts that we have created. Under the hood for each of those methods we\u2019re using the&nbsp;<a href=\"https:\/\/github.com\/Luidog\/fms-api-client\">fms-api-client<\/a>&nbsp;project by&nbsp;<a href=\"https:\/\/github.com\/Luidog\">Luidog<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Record Id<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The FileMaker uses the concept of a recordId which is kind of like a primary key. The odd thing is I believe it\u2019s completely hidden within FileMaker itself and only exposed to the API. That means we already had primary keys for each table.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We standardized by using our primary key for all id fields. If there are specific FileMaker functions (like update or delete) that require a record id, we abstract that away in the method. Therefore you only need to worry about our own id and not the record id.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const updatedProject = ProjectModel.update(primaryKey, data);<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>The update method actually has to get the record based on the primary key so that it has the record id in order to make the update.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Transformations<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The FileMaker application I was abstracting was close to 20 years old meaning there had been various field naming conventions that had come and gone leaving field names almost meaningless.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In creating a new api we had the opportunity to correct the issue and rename all fields with a single standard format that makes sense now.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Record Classes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I decided to create a class that would represent a single record. I have one class that represents a FileMaker record and one that represents an API record. It includes the schema for that record based on the model type so that we know what transformations to make.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const data = new RecordFm(this.schema, dataFromFileMakerApi).toApi();<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Field Classes<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Did a similar thing that represents either a FileMaker field or an API field. This includes the schema for the field so we know what transformations to make.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>const fmFieldValue = new FieldApi(schema.id, id).toFm();<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Transformation Methods<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Then we would have a&nbsp;<em>toFm<\/em>&nbsp;method and&nbsp;<em>toApi<\/em>&nbsp;method that would convert the appropriate direction. Within each class are private methods that make the various transformations necessary (field types, field formats, value transformations)<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These were based loosely on the OpenAPI schema definition that we had built for the API. I intend to replace that later with our own JSON Schema for each class but at this point it is serving its purpose.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>class FieldFm {\n  constructor(fieldSchema, value) {\n    this.value = value;\n    this.newValue = value;\n    Object.assign(this, fieldSchema);\n  }\n\n  static #returnSeparated = \"\\r\";\n  static #commaSeparated = \",\";\n\n  toApi() {\n    this.#transformTypeToApi();\n    this.#transformFormatToApi();\n    this.#transformContentToApi();\n    return this.newValue;\n  }\n\n  #transformTypeToApi() {\n    \/\/...transform to Javascript type since FileMaker mostly returns strings\n  }\n\n  #transformFormatToApi() {\n    \/\/...mostly based on the idea of OpenAPI formats, most times used to specify more details beyond a string.\n  }\n\n  #transformContentToApi() {\n    \/\/...some content needs to be transformed, like some FileMaker ids have spaces which doesn't work in our frontend\n  }\n\n  #typeToApi = {\n    integer: (value) =&gt; parseInt(value) || 0,\n    boolean: (value) =&gt; (value ? true : false),\n    object: (value) =&gt; value,\n    string: (value) =&gt; value,\n    array: (value) =&gt; this.#arrayTypeToApi&#091;this&#091;\"x-array-type\"]](value),\n  };\n\n  #arrayTypeToApi = {\n    returnSeparated: (value) =&gt; {\n      if (!value) return &#091;];\n\n      return value.split(this.constructor.#returnSeparated).map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n    commaSeparated: (value) =&gt; {\n      if (!value) return &#091;];\n\n      return value.split(this.constructor.#commaSeparated).map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n    repetitionArray: (value) =&gt; {\n      return value.map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n  };\n\n  #formatToApi = {\n    date: (value) =&gt;\n      value ? dateFormat(new Date(`${value} 00:00`), \"yyyy-MM-dd\") : null,\n    \"date-time\": (value) =&gt; (value ? apiDatetimeFormat(value) : null),\n    time: (value) =&gt; value || null,\n    \"partial-time\": (value) =&gt; value || null,\n    int32: (value) =&gt; value,\n  };\n\n  #contentToApi = {\n    dashesForSpaces: (value) =&gt; value.replace(\/ \/g, \"-\"),\n  };\n}<\/code><\/pre>\n<!-- \/wp:code -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Lately I have been working on a method for abstracting a FileMaker database into another custom API. I was brought on board to help move a legacy FileMaker application into a more web based platform. It would be too much of a risk to try to rebuild the database from scratch in another technology, as well as the fact that FileMaker gives relatively good access to the data through the FileMaker data API.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Tables<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>FileMaker has its own flavor of database methodology that cannot be translated 1:1 into a new environment. The first issue was deciding how to present the data through the API since FileMaker does not give you direct access to the tables.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We decided to keep things as simple as possible we would represent the FileMaker tables in table layouts that adhered closely to the underlying table structure.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>That means we ended up with REST_<em>tablename<\/em>&nbsp;layouts that were exposed through the API that we could consume with our service.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Models<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We then built a model system that represented these FileMaker tables using a standardized CRUD methodology. Our backed is a node express app.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I based some of the basic methodology on the&nbsp;<a href=\"https:\/\/sequelize.org\/\">Sequalize<\/a>&nbsp;project, but far simplified.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>\/\/ Parent class for all other services to extend\nclass Model {\n  constructor() {\n    this.data = {};\n  }\n\n  static client;\n\n  static build(data) {\n    \/\/...builds the model\n  }\n\n  static async get(id) {\n    \/\/...gets a single record\n  }\n\n  static async getByRecordId(recordId) {\n    \/\/...certain FileMaker functionality only returns a recordId\n  }\n\n  static async find(query = {}) {\n    \/\/...find record(s) based on a query\n  }\n\n  static async create(data) {\n    \/\/...creates a new record\n  }\n\n  static async update(id, data) {\n    \/\/...updates a record\n  }\n  static async delete(id) {\n    \/\/...deletes a record\n  }\n}\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Now we can extend this model for any of the FileMaker table\/layouts that we have created. Under the hood for each of those methods we\u2019re using the&nbsp;<a href=\"https:\/\/github.com\/Luidog\/fms-api-client\">fms-api-client<\/a>&nbsp;project by&nbsp;<a href=\"https:\/\/github.com\/Luidog\">Luidog<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Record Id<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The FileMaker uses the concept of a recordId which is kind of like a primary key. The odd thing is I believe it\u2019s completely hidden within FileMaker itself and only exposed to the API. That means we already had primary keys for each table.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We standardized by using our primary key for all id fields. If there are specific FileMaker functions (like update or delete) that require a record id, we abstract that away in the method. Therefore you only need to worry about our own id and not the record id.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const updatedProject = ProjectModel.update(primaryKey, data);<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The update method actually has to get the record based on the primary key so that it has the record id in order to make the update.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Transformations<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The FileMaker application I was abstracting was close to 20 years old meaning there had been various field naming conventions that had come and gone leaving field names almost meaningless.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In creating a new api we had the opportunity to correct the issue and rename all fields with a single standard format that makes sense now.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Record Classes<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I decided to create a class that would represent a single record. I have one class that represents a FileMaker record and one that represents an API record. It includes the schema for that record based on the model type so that we know what transformations to make.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const data = new RecordFm(this.schema, dataFromFileMakerApi).toApi();<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Field Classes<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Did a similar thing that represents either a FileMaker field or an API field. This includes the schema for the field so we know what transformations to make.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>const fmFieldValue = new FieldApi(schema.id, id).toFm();<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Transformation Methods<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Then we would have a&nbsp;<em>toFm<\/em>&nbsp;method and&nbsp;<em>toApi<\/em>&nbsp;method that would convert the appropriate direction. Within each class are private methods that make the various transformations necessary (field types, field formats, value transformations)<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>These were based loosely on the OpenAPI schema definition that we had built for the API. I intend to replace that later with our own JSON Schema for each class but at this point it is serving its purpose.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>class FieldFm {\n  constructor(fieldSchema, value) {\n    this.value = value;\n    this.newValue = value;\n    Object.assign(this, fieldSchema);\n  }\n\n  static #returnSeparated = \"\\r\";\n  static #commaSeparated = \",\";\n\n  toApi() {\n    this.#transformTypeToApi();\n    this.#transformFormatToApi();\n    this.#transformContentToApi();\n    return this.newValue;\n  }\n\n  #transformTypeToApi() {\n    \/\/...transform to Javascript type since FileMaker mostly returns strings\n  }\n\n  #transformFormatToApi() {\n    \/\/...mostly based on the idea of OpenAPI formats, most times used to specify more details beyond a string.\n  }\n\n  #transformContentToApi() {\n    \/\/...some content needs to be transformed, like some FileMaker ids have spaces which doesn't work in our frontend\n  }\n\n  #typeToApi = {\n    integer: (value) =&gt; parseInt(value) || 0,\n    boolean: (value) =&gt; (value ? true : false),\n    object: (value) =&gt; value,\n    string: (value) =&gt; value,\n    array: (value) =&gt; this.#arrayTypeToApi&#091;this&#091;\"x-array-type\"]](value),\n  };\n\n  #arrayTypeToApi = {\n    returnSeparated: (value) =&gt; {\n      if (!value) return &#091;];\n\n      return value.split(this.constructor.#returnSeparated).map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n    commaSeparated: (value) =&gt; {\n      if (!value) return &#091;];\n\n      return value.split(this.constructor.#commaSeparated).map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n    repetitionArray: (value) =&gt; {\n      return value.map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n  };\n\n  #formatToApi = {\n    date: (value) =&gt;\n      value ? dateFormat(new Date(`${value} 00:00`), \"yyyy-MM-dd\") : null,\n    \"date-time\": (value) =&gt; (value ? apiDatetimeFormat(value) : null),\n    time: (value) =&gt; value || null,\n    \"partial-time\": (value) =&gt; value || null,\n    int32: (value) =&gt; value,\n  };\n\n  #contentToApi = {\n    dashesForSpaces: (value) =&gt; value.replace(\/ \/g, \"-\"),\n  };\n}<\/code><\/pre>\n"
            }
        ],
        "rendered_content": "\n<p>Lately I have been working on a method for abstracting a FileMaker database into another custom API. I was brought on board to help move a legacy FileMaker application into a more web based platform. It would be too much of a risk to try to rebuild the database from scratch in another technology, as well as the fact that FileMaker gives relatively good access to the data through the FileMaker data API.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Tables<\/h2>\n\n\n\n<p>FileMaker has its own flavor of database methodology that cannot be translated 1:1 into a new environment. The first issue was deciding how to present the data through the API since FileMaker does not give you direct access to the tables.<\/p>\n\n\n\n<p>We decided to keep things as simple as possible we would represent the FileMaker tables in table layouts that adhered closely to the underlying table structure.<\/p>\n\n\n\n<p>That means we ended up with REST_<em>tablename<\/em>&nbsp;layouts that were exposed through the API that we could consume with our service.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Models<\/h2>\n\n\n\n<p>We then built a model system that represented these FileMaker tables using a standardized CRUD methodology. Our backed is a node express app.<\/p>\n\n\n\n<p>I based some of the basic methodology on the&nbsp;<a href=\"https:\/\/sequelize.org\/\">Sequalize<\/a>&nbsp;project, but far simplified.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>\/\/ Parent class for all other services to extend\nclass Model {\n  constructor() {\n    this.data = {};\n  }\n\n  static client;\n\n  static build(data) {\n    \/\/...builds the model\n  }\n\n  static async get(id) {\n    \/\/...gets a single record\n  }\n\n  static async getByRecordId(recordId) {\n    \/\/...certain FileMaker functionality only returns a recordId\n  }\n\n  static async find(query = {}) {\n    \/\/...find record(s) based on a query\n  }\n\n  static async create(data) {\n    \/\/...creates a new record\n  }\n\n  static async update(id, data) {\n    \/\/...updates a record\n  }\n  static async delete(id) {\n    \/\/...deletes a record\n  }\n}\n<\/code><\/pre>\n\n\n\n<p>Now we can extend this model for any of the FileMaker table\/layouts that we have created. Under the hood for each of those methods we\u2019re using the&nbsp;<a href=\"https:\/\/github.com\/Luidog\/fms-api-client\">fms-api-client<\/a>&nbsp;project by&nbsp;<a href=\"https:\/\/github.com\/Luidog\">Luidog<\/a><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Record Id<\/h2>\n\n\n\n<p>The FileMaker uses the concept of a recordId which is kind of like a primary key. The odd thing is I believe it\u2019s completely hidden within FileMaker itself and only exposed to the API. That means we already had primary keys for each table.<\/p>\n\n\n\n<p>We standardized by using our primary key for all id fields. If there are specific FileMaker functions (like update or delete) that require a record id, we abstract that away in the method. Therefore you only need to worry about our own id and not the record id.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const updatedProject = ProjectModel.update(primaryKey, data);<\/code><\/pre>\n\n\n\n<p>The update method actually has to get the record based on the primary key so that it has the record id in order to make the update.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Transformations<\/h2>\n\n\n\n<p>The FileMaker application I was abstracting was close to 20 years old meaning there had been various field naming conventions that had come and gone leaving field names almost meaningless.<\/p>\n\n\n\n<p>In creating a new api we had the opportunity to correct the issue and rename all fields with a single standard format that makes sense now.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Record Classes<\/h3>\n\n\n\n<p>I decided to create a class that would represent a single record. I have one class that represents a FileMaker record and one that represents an API record. It includes the schema for that record based on the model type so that we know what transformations to make.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const data = new RecordFm(this.schema, dataFromFileMakerApi).toApi();<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Field Classes<\/h3>\n\n\n\n<p>Did a similar thing that represents either a FileMaker field or an API field. This includes the schema for the field so we know what transformations to make.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>const fmFieldValue = new FieldApi(schema.id, id).toFm();<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Transformation Methods<\/h3>\n\n\n\n<p>Then we would have a&nbsp;<em>toFm<\/em>&nbsp;method and&nbsp;<em>toApi<\/em>&nbsp;method that would convert the appropriate direction. Within each class are private methods that make the various transformations necessary (field types, field formats, value transformations)<\/p>\n\n\n\n<p>These were based loosely on the OpenAPI schema definition that we had built for the API. I intend to replace that later with our own JSON Schema for each class but at this point it is serving its purpose.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>class FieldFm {\n  constructor(fieldSchema, value) {\n    this.value = value;\n    this.newValue = value;\n    Object.assign(this, fieldSchema);\n  }\n\n  static #returnSeparated = \"\\r\";\n  static #commaSeparated = \",\";\n\n  toApi() {\n    this.#transformTypeToApi();\n    this.#transformFormatToApi();\n    this.#transformContentToApi();\n    return this.newValue;\n  }\n\n  #transformTypeToApi() {\n    \/\/...transform to Javascript type since FileMaker mostly returns strings\n  }\n\n  #transformFormatToApi() {\n    \/\/...mostly based on the idea of OpenAPI formats, most times used to specify more details beyond a string.\n  }\n\n  #transformContentToApi() {\n    \/\/...some content needs to be transformed, like some FileMaker ids have spaces which doesn't work in our frontend\n  }\n\n  #typeToApi = {\n    integer: (value) =&gt; parseInt(value) || 0,\n    boolean: (value) =&gt; (value ? true : false),\n    object: (value) =&gt; value,\n    string: (value) =&gt; value,\n    array: (value) =&gt; this.#arrayTypeToApi&#091;this&#091;\"x-array-type\"]](value),\n  };\n\n  #arrayTypeToApi = {\n    returnSeparated: (value) =&gt; {\n      if (!value) return &#091;];\n\n      return value.split(this.constructor.#returnSeparated).map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n    commaSeparated: (value) =&gt; {\n      if (!value) return &#091;];\n\n      return value.split(this.constructor.#commaSeparated).map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n    repetitionArray: (value) =&gt; {\n      return value.map((value) =&gt; {\n        return new SchemaFieldFm(this.items, value).toApi();\n      });\n    },\n  };\n\n  #formatToApi = {\n    date: (value) =&gt;\n      value ? dateFormat(new Date(`${value} 00:00`), \"yyyy-MM-dd\") : null,\n    \"date-time\": (value) =&gt; (value ? apiDatetimeFormat(value) : null),\n    time: (value) =&gt; value || null,\n    \"partial-time\": (value) =&gt; value || null,\n    int32: (value) =&gt; value,\n  };\n\n  #contentToApi = {\n    dashesForSpaces: (value) =&gt; value.replace(\/ \/g, \"-\"),\n  };\n}<\/code><\/pre>\n",
        "date": "2022-01-08 03:38:00",
        "slug": "abstracting-a-filemaker-database",
        "excerpt": "Been working on a project that requires the transformation of data from a FileMaker database into an api. Here are some of the methods we're using to do this without rewriting everything from the ground up.",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 272,
        "title": "New Mac setup after hard drive upgrade",
        "content": "<!-- wp:paragraph -->\n<p>I started this page as a log of all the changes I made to my Mac after I upgraded the internal hard drive. I like starting with a fresh install but even though I don't customize a lot, there are a lot of settings to get right in order for it to function the way I like.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I started to refine this this after moving from my laptop to a new Mac Mini. This is more for my own reference but it may have some helpful hints for those just starting out or even something you might not have thought of before. I'm always looking for better ways to do things so this is ending up being a living document and constantly changing.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Command Line Apps to Install<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">XCode command line tools<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you try to run a command that requires it, macOS will ask if you want to install them. Try to install nvm or HomeBrew and it will prompt you.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">HomeBrew<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I try to use HomeBrew when possible as it makes updating in the future a lot easier.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><del>AWS SAM<\/del><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/docs.aws.amazon.com\/serverless-application-model\/latest\/developerguide\/serverless-sam-cli-install-mac.html<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Don't use SAM at the moment so no need to install.<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">AWS CLI<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/install-cliv2-mac.html<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Used for running CloudFormation update scripts. Haven't used for much else other than a couple scripts that perform global tasks on AWS (like deleting all default VPCs in all regions).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Node.js<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use nvm to install so you can manage different versions easily.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Git<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I keep going back and forth between using Apple default git that comes with XCode command line tools and git from HomeBrew. Latest install just using Apple git.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">nvm<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is to install node easily, as well as give the option to run multiple versions if I need to.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>NOTE: make sure ~\/.zshrc file exists before installing. Default macOS install doesn't automatically create this file. Just do<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>touch ~\/.zshrc<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">oh my zsh!<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I don't totally know why I install this but a lot of people seem to really like it. I might try not using it for a while so that I appreciate what it gives me when I install it.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Well, installing Wes Bos' Cobalt2 theme for zsh is the reason to use it<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">ssh<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I normally follow the Bitbucket instructions for setting up an SSH key (<a href=\"https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/set-up-an-ssh-key\/\">https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/set-up-an-ssh-key\/<\/a>). I noticed this last time with macOS Monterey that the -K command of ssh-add no longer works and my password was not saving for the ssh key. Turns out they changed the flag and it's now:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>ssh-add --apple-use-keychain ~\/.ssh\/id_rsa<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Node.js<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I try to avoid installing dependencies globally if at all possible. Otherwise projects that are shared will not have the dependencies necessary to build or work on. For clis that are not bound to a single project I will install globally.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><del>Yarn<\/del><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><del>Mainly switched to Yarn due to Create React App defaulting to Yarn. Not sure of its longevity as npm gets better so just need to watch the trends.<\/del><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">NPM<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Switched back to npm. Mainly due to npm catching up in most areas Yarn was ahead and how different Yarn2 ended up being.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Gatsby<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is necessary for initializing Gatsby websites.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">iTerm2<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>No particular reason to use this terminal other than I've heard good things about it. I assume some day I'll get into its deeper features but for now just use it pretty plain.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Theme<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I use Wes Bos's Cobalt 2 theme for iTerm2. I know it's a bit outdated now but it's really my first foray into advanced terminal stuff.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/github.com\/wesbos\/Cobalt2-iterm<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Powerline fonts<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><del>Using HomeBrew to install these is a little tricker but in the end I think it's cleaner. Only unclean thing is having to install svn with brew as well...<\/del><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>~~brew install $( brew search powerline | grep -i \"\\-powerline\" | tr '\\n' ' ' )~~<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>Decided against the HomeBrew route as it seemed convoluted. Going with plain cloning the git repo and running the install command as shown in the Github repo.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/github.com\/powerline\/fonts<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">macOS tweaks<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Disable swipe between pages<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This seemingly helpful feature ends up being super annoying as I find myself unintentionally moving to previous or next pages when browsing the web in any browser. Disabling this brings back sanity.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>System Preferences &gt; Trackpad &gt; More Gestures &gt; uncheck \"Swipe between pages\"<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Remove listing of tags in finder<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I just don't use these on files so they just clutter things up. If anyone has a killer use case I'd love to find a use for these but right now it just seems like more work with little gain.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Finder &gt; Preferences &gt; Sidebar &gt; uncheck Recent Tags<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Turn off Automatic opening of safe download files<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Audio files would automatically open in Music when downloaded from Safari which is annoying.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Safari &gt; Preferences &gt; General &gt; Uncheck \"Open safe files after downloading\"<\/em><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\"><del>BetterDummy<\/del><\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p><del>Need this app for my 1440p monitor. Apple for some reason disables the ability to do HiDPI with anything less than 4K so it was either too small or pixelated.<\/del><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ended up deciding against this. It was too finicky and wasn't worth the hassle for what I needed. Since my 1440p screen is vertical and mostly for email, chat, and terminal, it ends up not being a problem. Hopefully someday Apple will fix this...<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/github.com\/waydabber\/BetterDummy<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":1} -->\n<h1 class=\"wp-block-heading\">Apps<\/h1>\n<!-- \/wp:heading -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Google Drive File Stream<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is for sync'ing to Google Docs. Don't use personally but for corporate stuff.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>https:\/\/support.google.com\/drive\/answer\/7329379#zippy=%2Cdownload-install-drive-file-stream<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">OneDrive<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I used this to sync all my personal documents and files. Great for sharing between my wife and I as well as multiple devices.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Microsoft Office<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Still a necessary evil in my life and line of work. I installed through the App Store this last go around just to try and keep it simple where things come from and to keep updates regular. Not sure if it makes a difference vs downloading directly from Microsoft.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Excel<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>OneNote<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>PowerPoint<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Word<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Teams - install through website, not currently on App Store<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Microsoft Remote Desktop<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Use this a lot with AWS to remote into EC2 machines running Windows.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Visual Studio Code<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This one is obvious for coding.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Code from command line<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To enable using the&nbsp;<code>code<\/code>&nbsp;keyword from the command line to run VS Code:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-bash\"} -->\n<pre class=\"wp-block-code lang-bash\"><code>CMD+SHIFT+P\nshell command\nInstall code command in path<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">.vscode folder settings<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>NOTE that this won't work if you open the parent folder using&nbsp;<em>File &gt; Open Folder...<\/em><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Instead open a single project folder and then do&nbsp;<em>File &gt; Add Folder to Workspace...<\/em>&nbsp;and then save the Workspace<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Fonts<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>use Victor Mono (<a href=\"https:\/\/rubjo.github.io\/victor-mono\/\">https:\/\/rubjo.github.io\/victor-mono\/<\/a>)<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>use the OTF version to install into macOS<\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>created a&nbsp;<em>Coding<\/em>&nbsp;font collection in case I want to turn them on or off, etc...<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item -->\n\n<!-- wp:list-item -->\n<li>turn on ligatures (<em>Preferences &gt; Settings &gt; Text Editor &gt; Font &gt; Font Ligature)<\/em><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">Extensions<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>open in browser - for customizing which browser to open files in<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Hot<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This is a great tiny app that shows the temperature of the various processors and how much your CPU is being throttled.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/xs-labs.com\/en\/apps\/hot\/overview\/\">XS-Labs - Apps - Hot - Overview<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Chrome<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Hold CMD-Q to quit - turn this feature off<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>From the Chrome top menu, uncheck Warn before quitting<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list --><\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3 class=\"wp-block-heading\">MakeMKV<\/h3>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I use this to rip my DVDs and Blu-rays so that I can play them through my Plex server.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">VLC<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The most versatile video player.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Blu-ray discs - in order to play Blu-ray disks, there is a setting in the preferences of MakeMKV under Integrations to enable blu-ray disc playback in VLC<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">WhatsApp Desktop<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I still communicate with a number of people and groups on WhatsApp and it's really nice to use a full keyboard sometimes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1Password<\/h2>\n<!-- \/wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Gotta have a password manager.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Security preferences - uncheck all the auto-lock options<\/li>\n<!-- \/wp:list-item --><\/ul>\n<!-- \/wp:list -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I started this page as a log of all the changes I made to my Mac after I upgraded the internal hard drive. I like starting with a fresh install but even though I don't customize a lot, there are a lot of settings to get right in order for it to function the way I like.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I started to refine this this after moving from my laptop to a new Mac Mini. This is more for my own reference but it may have some helpful hints for those just starting out or even something you might not have thought of before. I'm always looking for better ways to do things so this is ending up being a living document and constantly changing.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Command Line Apps to Install<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">XCode command line tools<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>If you try to run a command that requires it, macOS will ask if you want to install them. Try to install nvm or HomeBrew and it will prompt you.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">HomeBrew<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I try to use HomeBrew when possible as it makes updating in the future a lot easier.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\"><del>AWS SAM<\/del><\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/docs.aws.amazon.com\/serverless-application-model\/latest\/developerguide\/serverless-sam-cli-install-mac.html<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>Don't use SAM at the moment so no need to install.<\/em><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">AWS CLI<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/install-cliv2-mac.html<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Used for running CloudFormation update scripts. Haven't used for much else other than a couple scripts that perform global tasks on AWS (like deleting all default VPCs in all regions).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Node.js<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Use nvm to install so you can manage different versions easily.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Git<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I keep going back and forth between using Apple default git that comes with XCode command line tools and git from HomeBrew. Latest install just using Apple git.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">nvm<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is to install node easily, as well as give the option to run multiple versions if I need to.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>NOTE: make sure ~\/.zshrc file exists before installing. Default macOS install doesn't automatically create this file. Just do<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>touch ~\/.zshrc<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">oh my zsh!<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I don't totally know why I install this but a lot of people seem to really like it. I might try not using it for a while so that I appreciate what it gives me when I install it.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Well, installing Wes Bos' Cobalt2 theme for zsh is the reason to use it<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul><\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">ssh<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I normally follow the Bitbucket instructions for setting up an SSH key (<a href=\"https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/set-up-an-ssh-key\/\">https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/set-up-an-ssh-key\/<\/a>). I noticed this last time with macOS Monterey that the -K command of ssh-add no longer works and my password was not saving for the ssh key. Turns out they changed the flag and it's now:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>ssh-add --apple-use-keychain ~\/.ssh\/id_rsa<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Node.js<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I try to avoid installing dependencies globally if at all possible. Otherwise projects that are shared will not have the dependencies necessary to build or work on. For clis that are not bound to a single project I will install globally.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\"><del>Yarn<\/del><\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><del>Mainly switched to Yarn due to Create React App defaulting to Yarn. Not sure of its longevity as npm gets better so just need to watch the trends.<\/del><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">NPM<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Switched back to npm. Mainly due to npm catching up in most areas Yarn was ahead and how different Yarn2 ended up being.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Gatsby<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is necessary for initializing Gatsby websites.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 1
                },
                "innerBlocks": [],
                "innerHTML": "\n<h1 class=\"wp-block-heading\">iTerm2<\/h1>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>No particular reason to use this terminal other than I've heard good things about it. I assume some day I'll get into its deeper features but for now just use it pretty plain.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Theme<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I use Wes Bos's Cobalt 2 theme for iTerm2. I know it's a bit outdated now but it's really my first foray into advanced terminal stuff.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/github.com\/wesbos\/Cobalt2-iterm<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Powerline fonts<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><del>Using HomeBrew to install these is a little tricker but in the end I think it's cleaner. Only unclean thing is having to install svn with brew as well...<\/del><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>~~brew install $( brew search powerline | grep -i \"\\-powerline\" | tr '\\n' ' ' )~~<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Decided against the HomeBrew route as it seemed convoluted. Going with plain cloning the git repo and running the install command as shown in the Github repo.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/github.com\/powerline\/fonts<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 1
                },
                "innerBlocks": [],
                "innerHTML": "\n<h1 class=\"wp-block-heading\">macOS tweaks<\/h1>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Disable swipe between pages<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This seemingly helpful feature ends up being super annoying as I find myself unintentionally moving to previous or next pages when browsing the web in any browser. Disabling this brings back sanity.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>System Preferences &gt; Trackpad &gt; More Gestures &gt; uncheck \"Swipe between pages\"<\/em><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Remove listing of tags in finder<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I just don't use these on files so they just clutter things up. If anyone has a killer use case I'd love to find a use for these but right now it just seems like more work with little gain.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>Finder &gt; Preferences &gt; Sidebar &gt; uncheck Recent Tags<\/em><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Turn off Automatic opening of safe download files<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Audio files would automatically open in Music when downloaded from Safari which is annoying.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><em>Safari &gt; Preferences &gt; General &gt; Uncheck \"Open safe files after downloading\"<\/em><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\"><del>BetterDummy<\/del><\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><del>Need this app for my 1440p monitor. Apple for some reason disables the ability to do HiDPI with anything less than 4K so it was either too small or pixelated.<\/del><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Ended up deciding against this. It was too finicky and wasn't worth the hassle for what I needed. Since my 1440p screen is vertical and mostly for email, chat, and terminal, it ends up not being a problem. Hopefully someday Apple will fix this...<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/github.com\/waydabber\/BetterDummy<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 1
                },
                "innerBlocks": [],
                "innerHTML": "\n<h1 class=\"wp-block-heading\">Apps<\/h1>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Google Drive File Stream<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is for sync'ing to Google Docs. Don't use personally but for corporate stuff.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>https:\/\/support.google.com\/drive\/answer\/7329379#zippy=%2Cdownload-install-drive-file-stream<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">OneDrive<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I used this to sync all my personal documents and files. Great for sharing between my wife and I as well as multiple devices.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Microsoft Office<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Still a necessary evil in my life and line of work. I installed through the App Store this last go around just to try and keep it simple where things come from and to keep updates regular. Not sure if it makes a difference vs downloading directly from Microsoft.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Excel<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>OneNote<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>PowerPoint<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Word<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Teams - install through website, not currently on App Store<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n\n\n\n\n\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Microsoft Remote Desktop<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Use this a lot with AWS to remote into EC2 machines running Windows.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Visual Studio Code<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This one is obvious for coding.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Code from command line<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>To enable using the&nbsp;<code>code<\/code>&nbsp;keyword from the command line to run VS Code:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-bash"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-bash\"><code>CMD+SHIFT+P\nshell command\nInstall code command in path<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">.vscode folder settings<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>NOTE that this won't work if you open the parent folder using&nbsp;<em>File &gt; Open Folder...<\/em><\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Instead open a single project folder and then do&nbsp;<em>File &gt; Add Folder to Workspace...<\/em>&nbsp;and then save the Workspace<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Fonts<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [
                            {
                                "blockName": "core\/list",
                                "attrs": [],
                                "innerBlocks": [
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>use the OTF version to install into macOS<\/li>\n"
                                    },
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>created a&nbsp;<em>Coding<\/em>&nbsp;font collection in case I want to turn them on or off, etc...<\/li>\n"
                                    }
                                ],
                                "innerHTML": "\n<ul>\n\n<\/ul>\n"
                            }
                        ],
                        "innerHTML": "\n<li>use Victor Mono (<a href=\"https:\/\/rubjo.github.io\/victor-mono\/\">https:\/\/rubjo.github.io\/victor-mono\/<\/a>)<\/li>\n"
                    },
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>turn on ligatures (<em>Preferences &gt; Settings &gt; Text Editor &gt; Font &gt; Font Ligature)<\/em><\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul>\n\n<\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">Extensions<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>open in browser - for customizing which browser to open files in<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul><\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Hot<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>This is a great tiny app that shows the temperature of the various processors and how much your CPU is being throttled.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/xs-labs.com\/en\/apps\/hot\/overview\/\">XS-Labs - Apps - Hot - Overview<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">Chrome<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [
                            {
                                "blockName": "core\/list",
                                "attrs": [],
                                "innerBlocks": [
                                    {
                                        "blockName": "core\/list-item",
                                        "attrs": [],
                                        "innerBlocks": [],
                                        "innerHTML": "\n<li>From the Chrome top menu, uncheck Warn before quitting<\/li>\n"
                                    }
                                ],
                                "innerHTML": "\n<ul><\/ul>\n"
                            }
                        ],
                        "innerHTML": "\n<li>Hold CMD-Q to quit - turn this feature off<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul><\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": {
                    "level": 3
                },
                "innerBlocks": [],
                "innerHTML": "\n<h3 class=\"wp-block-heading\">MakeMKV<\/h3>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I use this to rip my DVDs and Blu-rays so that I can play them through my Plex server.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">VLC<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The most versatile video player.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Blu-ray discs - in order to play Blu-ray disks, there is a setting in the preferences of MakeMKV under Integrations to enable blu-ray disc playback in VLC<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul><\/ul>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">WhatsApp Desktop<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I still communicate with a number of people and groups on WhatsApp and it's really nice to use a full keyboard sometimes.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/heading",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<h2 class=\"wp-block-heading\">1Password<\/h2>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Gotta have a password manager.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/list",
                "attrs": [],
                "innerBlocks": [
                    {
                        "blockName": "core\/list-item",
                        "attrs": [],
                        "innerBlocks": [],
                        "innerHTML": "\n<li>Security preferences - uncheck all the auto-lock options<\/li>\n"
                    }
                ],
                "innerHTML": "\n<ul><\/ul>\n"
            }
        ],
        "rendered_content": "\n<p>I started this page as a log of all the changes I made to my Mac after I upgraded the internal hard drive. I like starting with a fresh install but even though I don&#8217;t customize a lot, there are a lot of settings to get right in order for it to function the way I like.<\/p>\n\n\n\n<p>I started to refine this this after moving from my laptop to a new Mac Mini. This is more for my own reference but it may have some helpful hints for those just starting out or even something you might not have thought of before. I&#8217;m always looking for better ways to do things so this is ending up being a living document and constantly changing.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Command Line Apps to Install<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">XCode command line tools<\/h3>\n\n\n\n<p>If you try to run a command that requires it, macOS will ask if you want to install them. Try to install nvm or HomeBrew and it will prompt you.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">HomeBrew<\/h3>\n\n\n\n<p>I try to use HomeBrew when possible as it makes updating in the future a lot easier.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><del>AWS SAM<\/del><\/h3>\n\n\n\n<p>https:\/\/docs.aws.amazon.com\/serverless-application-model\/latest\/developerguide\/serverless-sam-cli-install-mac.html<\/p>\n\n\n\n<p><em>Don&#8217;t use SAM at the moment so no need to install.<\/em><\/p>\n\n\n\n<h3 class=\"wp-block-heading\">AWS CLI<\/h3>\n\n\n\n<p>https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/install-cliv2-mac.html<\/p>\n\n\n\n<p>Used for running CloudFormation update scripts. Haven&#8217;t used for much else other than a couple scripts that perform global tasks on AWS (like deleting all default VPCs in all regions).<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Node.js<\/h3>\n\n\n\n<p>Use nvm to install so you can manage different versions easily.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Git<\/h3>\n\n\n\n<p>I keep going back and forth between using Apple default git that comes with XCode command line tools and git from HomeBrew. Latest install just using Apple git.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">nvm<\/h3>\n\n\n\n<p>This is to install node easily, as well as give the option to run multiple versions if I need to.<\/p>\n\n\n\n<p>NOTE: make sure ~\/.zshrc file exists before installing. Default macOS install doesn&#8217;t automatically create this file. Just do<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>touch ~\/.zshrc<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">oh my zsh!<\/h3>\n\n\n\n<p>I don&#8217;t totally know why I install this but a lot of people seem to really like it. I might try not using it for a while so that I appreciate what it gives me when I install it.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Well, installing Wes Bos&#8217; Cobalt2 theme for zsh is the reason to use it<\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">ssh<\/h3>\n\n\n\n<p>I normally follow the Bitbucket instructions for setting up an SSH key (<a href=\"https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/set-up-an-ssh-key\/\">https:\/\/support.atlassian.com\/bitbucket-cloud\/docs\/set-up-an-ssh-key\/<\/a>). I noticed this last time with macOS Monterey that the -K command of ssh-add no longer works and my password was not saving for the ssh key. Turns out they changed the flag and it&#8217;s now:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>ssh-add --apple-use-keychain ~\/.ssh\/id_rsa<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Node.js<\/h2>\n\n\n\n<p>I try to avoid installing dependencies globally if at all possible. Otherwise projects that are shared will not have the dependencies necessary to build or work on. For clis that are not bound to a single project I will install globally.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><del>Yarn<\/del><\/h3>\n\n\n\n<p><del>Mainly switched to Yarn due to Create React App defaulting to Yarn. Not sure of its longevity as npm gets better so just need to watch the trends.<\/del><\/p>\n\n\n\n<h3 class=\"wp-block-heading\">NPM<\/h3>\n\n\n\n<p>Switched back to npm. Mainly due to npm catching up in most areas Yarn was ahead and how different Yarn2 ended up being.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Gatsby<\/h3>\n\n\n\n<p>This is necessary for initializing Gatsby websites.<\/p>\n\n\n\n<h1 class=\"wp-block-heading\">iTerm2<\/h1>\n\n\n\n<p>No particular reason to use this terminal other than I&#8217;ve heard good things about it. I assume some day I&#8217;ll get into its deeper features but for now just use it pretty plain.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Theme<\/h3>\n\n\n\n<p>I use Wes Bos&#8217;s Cobalt 2 theme for iTerm2. I know it&#8217;s a bit outdated now but it&#8217;s really my first foray into advanced terminal stuff.<\/p>\n\n\n\n<p>https:\/\/github.com\/wesbos\/Cobalt2-iterm<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Powerline fonts<\/h3>\n\n\n\n<p><del>Using HomeBrew to install these is a little tricker but in the end I think it&#8217;s cleaner. Only unclean thing is having to install svn with brew as well&#8230;<\/del><\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>~~brew install $( brew search powerline | grep -i \"\\-powerline\" | tr '\\n' ' ' )~~<\/code><\/pre>\n\n\n\n<p>Decided against the HomeBrew route as it seemed convoluted. Going with plain cloning the git repo and running the install command as shown in the Github repo.<\/p>\n\n\n\n<p>https:\/\/github.com\/powerline\/fonts<\/p>\n\n\n\n<h1 class=\"wp-block-heading\">macOS tweaks<\/h1>\n\n\n\n<h2 class=\"wp-block-heading\">Disable swipe between pages<\/h2>\n\n\n\n<p>This seemingly helpful feature ends up being super annoying as I find myself unintentionally moving to previous or next pages when browsing the web in any browser. Disabling this brings back sanity.<\/p>\n\n\n\n<p><em>System Preferences &gt; Trackpad &gt; More Gestures &gt; uncheck &#8220;Swipe between pages&#8221;<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Remove listing of tags in finder<\/h2>\n\n\n\n<p>I just don&#8217;t use these on files so they just clutter things up. If anyone has a killer use case I&#8217;d love to find a use for these but right now it just seems like more work with little gain.<\/p>\n\n\n\n<p><em>Finder &gt; Preferences &gt; Sidebar &gt; uncheck Recent Tags<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Turn off Automatic opening of safe download files<\/h2>\n\n\n\n<p>Audio files would automatically open in Music when downloaded from Safari which is annoying.<\/p>\n\n\n\n<p><em>Safari &gt; Preferences &gt; General &gt; Uncheck &#8220;Open safe files after downloading&#8221;<\/em><\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><del>BetterDummy<\/del><\/h3>\n\n\n\n<p><del>Need this app for my 1440p monitor. Apple for some reason disables the ability to do HiDPI with anything less than 4K so it was either too small or pixelated.<\/del><\/p>\n\n\n\n<p>Ended up deciding against this. It was too finicky and wasn&#8217;t worth the hassle for what I needed. Since my 1440p screen is vertical and mostly for email, chat, and terminal, it ends up not being a problem. Hopefully someday Apple will fix this&#8230;<\/p>\n\n\n\n<p>https:\/\/github.com\/waydabber\/BetterDummy<\/p>\n\n\n\n<h1 class=\"wp-block-heading\">Apps<\/h1>\n\n\n\n<h2 class=\"wp-block-heading\">Google Drive File Stream<\/h2>\n\n\n\n<p>This is for sync&#8217;ing to Google Docs. Don&#8217;t use personally but for corporate stuff.<\/p>\n\n\n\n<p>https:\/\/support.google.com\/drive\/answer\/7329379#zippy=%2Cdownload-install-drive-file-stream<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">OneDrive<\/h2>\n\n\n\n<p>I used this to sync all my personal documents and files. Great for sharing between my wife and I as well as multiple devices.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Microsoft Office<\/h2>\n\n\n\n<p>Still a necessary evil in my life and line of work. I installed through the App Store this last go around just to try and keep it simple where things come from and to keep updates regular. Not sure if it makes a difference vs downloading directly from Microsoft.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Excel<\/li>\n\n\n\n<li>OneNote<\/li>\n\n\n\n<li>PowerPoint<\/li>\n\n\n\n<li>Word<\/li>\n\n\n\n<li>Teams &#8211; install through website, not currently on App Store<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Microsoft Remote Desktop<\/h2>\n\n\n\n<p>Use this a lot with AWS to remote into EC2 machines running Windows.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Visual Studio Code<\/h2>\n\n\n\n<p>This one is obvious for coding.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Code from command line<\/h3>\n\n\n\n<p>To enable using the&nbsp;<code>code<\/code>&nbsp;keyword from the command line to run VS Code:<\/p>\n\n\n\n<pre class=\"wp-block-code lang-bash\"><code>CMD+SHIFT+P\nshell command\nInstall code command in path<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">.vscode folder settings<\/h3>\n\n\n\n<ul class=\"wp-block-list\">\n<li>NOTE that this won&#8217;t work if you open the parent folder using&nbsp;<em>File &gt; Open Folder&#8230;<\/em><\/li>\n\n\n\n<li>Instead open a single project folder and then do&nbsp;<em>File &gt; Add Folder to Workspace&#8230;<\/em>&nbsp;and then save the Workspace<\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">Fonts<\/h3>\n\n\n\n<ul class=\"wp-block-list\">\n<li>use Victor Mono (<a href=\"https:\/\/rubjo.github.io\/victor-mono\/\">https:\/\/rubjo.github.io\/victor-mono\/<\/a>)\n<ul class=\"wp-block-list\">\n<li>use the OTF version to install into macOS<\/li>\n\n\n\n<li>created a&nbsp;<em>Coding<\/em>&nbsp;font collection in case I want to turn them on or off, etc&#8230;<\/li>\n<\/ul>\n<\/li>\n\n\n\n<li>turn on ligatures (<em>Preferences &gt; Settings &gt; Text Editor &gt; Font &gt; Font Ligature)<\/em><\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">Extensions<\/h3>\n\n\n\n<ul class=\"wp-block-list\">\n<li>open in browser &#8211; for customizing which browser to open files in<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Hot<\/h2>\n\n\n\n<p>This is a great tiny app that shows the temperature of the various processors and how much your CPU is being throttled.<\/p>\n\n\n\n<p><a href=\"https:\/\/xs-labs.com\/en\/apps\/hot\/overview\/\">XS-Labs &#8211; Apps &#8211; Hot &#8211; Overview<\/a><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Chrome<\/h2>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Hold CMD-Q to quit &#8211; turn this feature off\n<ul class=\"wp-block-list\">\n<li>From the Chrome top menu, uncheck Warn before quitting<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">MakeMKV<\/h3>\n\n\n\n<p>I use this to rip my DVDs and Blu-rays so that I can play them through my Plex server.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">VLC<\/h2>\n\n\n\n<p>The most versatile video player.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Blu-ray discs &#8211; in order to play Blu-ray disks, there is a setting in the preferences of MakeMKV under Integrations to enable blu-ray disc playback in VLC<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">WhatsApp Desktop<\/h2>\n\n\n\n<p>I still communicate with a number of people and groups on WhatsApp and it&#8217;s really nice to use a full keyboard sometimes.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">1Password<\/h2>\n\n\n\n<p>Gotta have a password manager.<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Security preferences &#8211; uncheck all the auto-lock options<\/li>\n<\/ul>\n",
        "date": "2021-11-21 03:33:00",
        "slug": "new-mac-setup-after-hard-drive-upgrade",
        "excerpt": "Recently purchased a new Mac and wanted to document the setup process so next time I have a map and don't have to think up the entire process again.",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 255,
        "title": "Multiple Audio Tracks in Chrome Video Player",
        "content": "<!-- wp:paragraph -->\n<p>In order to access multiple audio tracks embedded into an MP4 you must first enable the audioTracks capability (see caniuse for how).<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you change audioTracks with Javascript in Chrome, the audio continues but the video pauses for a number of seconds before resuming rendering it out of sync.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The workaround is to use the&nbsp;<code>currentTime<\/code>&nbsp;property on your video element right after you change the audio track. I ended up just setting it to itself so the video would continue right from where the audio track change was made.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this example I'm using a select dropdown to list the audio track that can be selected.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:code {\"className\":\"lang-javascript\"} -->\n<pre class=\"wp-block-code lang-javascript\"><code>function handleAudioTrackChange(e) {\n  const videoPlayer = document.getElementById(\"video-player\");\n\n  for (var i = 0; i &lt; videoPlayer.audioTracks.length; i += 1) {\n    videoPlayer.audioTracks&#091;i].enabled = false;\n  }\n  videoPlayer.audioTracks&#091;e.currentTarget.value].enabled = true;\n\n  \/\/ This is to fix a Chrome bug where the audio and video goes out of sync\n  \/\/ eslint-disable-next-line no-self-assign\n  videoPlayer.currentTime = videoPlayer.currentTime;\n}\n<\/code><\/pre>\n<!-- \/wp:code -->\n\n<!-- wp:paragraph -->\n<p>I just expanded on the idea on the bug report for Chromium:<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=1034436&amp;q=audioTracks&amp;can=2\" target=\"_blank\" rel=\"noreferrer noopener\">1034436 - chromium - An open-source project to help move the web forward. - Monorail<\/a><\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The same should apply to any Chromium based browser.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Still hoping to get the mixing of multiple audio tracks at some point. Right now it's just one at a time, not all mixed together.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In order to access multiple audio tracks embedded into an MP4 you must first enable the audioTracks capability (see caniuse for how).<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>When you change audioTracks with Javascript in Chrome, the audio continues but the video pauses for a number of seconds before resuming rendering it out of sync.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The workaround is to use the&nbsp;<code>currentTime<\/code>&nbsp;property on your video element right after you change the audio track. I ended up just setting it to itself so the video would continue right from where the audio track change was made.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>In this example I'm using a select dropdown to list the audio track that can be selected.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/code",
                "attrs": {
                    "className": "lang-javascript"
                },
                "innerBlocks": [],
                "innerHTML": "\n<pre class=\"wp-block-code lang-javascript\"><code>function handleAudioTrackChange(e) {\n  const videoPlayer = document.getElementById(\"video-player\");\n\n  for (var i = 0; i &lt; videoPlayer.audioTracks.length; i += 1) {\n    videoPlayer.audioTracks&#091;i].enabled = false;\n  }\n  videoPlayer.audioTracks&#091;e.currentTarget.value].enabled = true;\n\n  \/\/ This is to fix a Chrome bug where the audio and video goes out of sync\n  \/\/ eslint-disable-next-line no-self-assign\n  videoPlayer.currentTime = videoPlayer.currentTime;\n}\n<\/code><\/pre>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>I just expanded on the idea on the bug report for Chromium:<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p><a href=\"https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=1034436&amp;q=audioTracks&amp;can=2\" target=\"_blank\" rel=\"noreferrer noopener\">1034436 - chromium - An open-source project to help move the web forward. - Monorail<\/a><\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>The same should apply to any Chromium based browser.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Still hoping to get the mixing of multiple audio tracks at some point. Right now it's just one at a time, not all mixed together.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>In order to access multiple audio tracks embedded into an MP4 you must first enable the audioTracks capability (see caniuse for how).<\/p>\n\n\n\n<p>When you change audioTracks with Javascript in Chrome, the audio continues but the video pauses for a number of seconds before resuming rendering it out of sync.<\/p>\n\n\n\n<p>The workaround is to use the&nbsp;<code>currentTime<\/code>&nbsp;property on your video element right after you change the audio track. I ended up just setting it to itself so the video would continue right from where the audio track change was made.<\/p>\n\n\n\n<p>In this example I&#8217;m using a select dropdown to list the audio track that can be selected.<\/p>\n\n\n\n<pre class=\"wp-block-code lang-javascript\"><code>function handleAudioTrackChange(e) {\n  const videoPlayer = document.getElementById(\"video-player\");\n\n  for (var i = 0; i &lt; videoPlayer.audioTracks.length; i += 1) {\n    videoPlayer.audioTracks&#091;i].enabled = false;\n  }\n  videoPlayer.audioTracks&#091;e.currentTarget.value].enabled = true;\n\n  \/\/ This is to fix a Chrome bug where the audio and video goes out of sync\n  \/\/ eslint-disable-next-line no-self-assign\n  videoPlayer.currentTime = videoPlayer.currentTime;\n}\n<\/code><\/pre>\n\n\n\n<p>I just expanded on the idea on the bug report for Chromium:<\/p>\n\n\n\n<p><a href=\"https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=1034436&amp;q=audioTracks&amp;can=2\" target=\"_blank\" rel=\"noreferrer noopener\">1034436 &#8211; chromium &#8211; An open-source project to help move the web forward. &#8211; Monorail<\/a><\/p>\n\n\n\n<p>The same should apply to any Chromium based browser.<\/p>\n\n\n\n<p>Still hoping to get the mixing of multiple audio tracks at some point. Right now it&#8217;s just one at a time, not all mixed together.<\/p>\n",
        "date": "2021-11-15 18:54:00",
        "slug": "multiple-audio-tracks-in-chrome-video-player",
        "excerpt": "In order to access multiple audio tracks embedded into an MP4 you must first enable the audioTracks capability (see caniuse for how). When you change audioTracks with Javascript in Chrome, the audio continues but the video pauses for a number of seconds before resuming rendering it out of sync. The workaround is to use the&nbsp;currentTime&nbsp;property [&hellip;]",
        "author": "admin",
        "featured_image": false
    },
    {
        "id": 233,
        "title": "Gatsby Powered by Wordpress.com",
        "content": "<!-- wp:paragraph -->\n<p>As I'm in the midst of retooling my personal website it may seem that I have devolved into a NoCode blog assembler. This is not the case but instead just the interim step to moving to an exciting new platform.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gatsby can use Wordpress as the content manager while using modern technologies for presenting it to the user. Hence the migration to Wordpress.com for content management purposes.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Soon I hope to have the full Gatsby theme up and running with this same content, only in a flashy new interface that is powered by modern web technologies and lightning fast.<\/p>\n<!-- \/wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We'll see how much time I have over these next few weeks juggling full time job, 2 kids, and winter.<\/p>\n<!-- \/wp:paragraph -->",
        "parsed_content": [
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>As I'm in the midst of retooling my personal website it may seem that I have devolved into a NoCode blog assembler. This is not the case but instead just the interim step to moving to an exciting new platform.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Gatsby can use Wordpress as the content manager while using modern technologies for presenting it to the user. Hence the migration to Wordpress.com for content management purposes.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>Soon I hope to have the full Gatsby theme up and running with this same content, only in a flashy new interface that is powered by modern web technologies and lightning fast.<\/p>\n"
            },
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n\n",
                "textContent": ""
            },
            {
                "blockName": "core\/paragraph",
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "\n<p>We'll see how much time I have over these next few weeks juggling full time job, 2 kids, and winter.<\/p>\n"
            }
        ],
        "rendered_content": "\n<p>As I&#8217;m in the midst of retooling my personal website it may seem that I have devolved into a NoCode blog assembler. This is not the case but instead just the interim step to moving to an exciting new platform.<\/p>\n\n\n\n<p>Gatsby can use WordPress as the content manager while using modern technologies for presenting it to the user. Hence the migration to WordPress.com for content management purposes.<\/p>\n\n\n\n<p>Soon I hope to have the full Gatsby theme up and running with this same content, only in a flashy new interface that is powered by modern web technologies and lightning fast.<\/p>\n\n\n\n<p>We&#8217;ll see how much time I have over these next few weeks juggling full time job, 2 kids, and winter.<\/p>\n",
        "date": "2020-01-11 05:00:42",
        "slug": "gatsby-powered-by-wordpress-com",
        "excerpt": "As I&#8217;m in the midst of retooling my personal website it may seem that I have devolved into a NoCode blog assembler. This is not the case but instead just the interim step to moving to an exciting new platform. Gatsby can use WordPress as the content manager while using modern technologies for presenting it [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2020\/01\/wordpress-gatsby.jpeg"
    },
    {
        "id": 148,
        "title": "Amazon Smile - Never Forget to Use Again",
        "content": "I really loved the idea of all my Amazon purchases raising money for a charity I select by donating 0.5% of every dollar I spend. Their Amazon Smile program was perfect for someone like me who orders almost everything on Amazon. For anyone who uses Amazon and hasn't enrolled in this program, just visit smile.amazon.com and it will ask you what charity wish to have donations be made to.\n<blockquote>The problem has been that I often forget to use the special url, smile.amazon.com which means my purchases don't generate any income for my favorite charity.<\/blockquote>\nThis is where browser extensions become super useful. I have found extensions that will automatically redirect you to smile.amazon.com even if you only type in amazon.com. Then every purchase will generate income for your chosen charity without you having to think about it every time.\n\n<img class=\"aligncenter size-full wp-image-150\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/7a4fa-screen-shot-2018-01-22-at-1.56.53-pm.png\" alt=\"\" width=\"971\" height=\"143\" \/>\n\nSince I use Safari as my everyday browser, I found an extension called SmileAllDay that performs this automatic redirect. The process has become simpler for installing this extension as it's now available in the <a href=\"https:\/\/itunes.apple.com\/us\/app\/smileallday\/id1180442868?mt=12\">Mac App Store<\/a>.\n\nI can't vouch for them but you can also find extensions available for Chrome and Firefox. I couldn't find one for Microsoft Edge but let me know in the comments if you know of one.\n\n<a href=\"https:\/\/chrome.google.com\/webstore\/detail\/smile-always\/jgpmhnmjbhgkhpbgelalfpplebgfjmbf?hl=en\" target=\"_blank\" rel=\"noopener\">Smile Always<\/a> for Chrome\n<a href=\"https:\/\/addons.mozilla.org\/en-US\/firefox\/addon\/amazon-smile\/\" target=\"_blank\" rel=\"noopener\">Amazon SMILE!<\/a> for Firefox\n<a href=\"https:\/\/itunes.apple.com\/us\/app\/smileallday\/id1180442868?mt=12\" target=\"_blank\" rel=\"noopener\">SmileAllDay<\/a> for Safari",
        "parsed_content": [
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "I really loved the idea of all my Amazon purchases raising money for a charity I select by donating 0.5% of every dollar I spend. Their Amazon Smile program was perfect for someone like me who orders almost everything on Amazon. For anyone who uses Amazon and hasn't enrolled in this program, just visit smile.amazon.com and it will ask you what charity wish to have donations be made to.\n<blockquote>The problem has been that I often forget to use the special url, smile.amazon.com which means my purchases don't generate any income for my favorite charity.<\/blockquote>\nThis is where browser extensions become super useful. I have found extensions that will automatically redirect you to smile.amazon.com even if you only type in amazon.com. Then every purchase will generate income for your chosen charity without you having to think about it every time.\n\n<img class=\"aligncenter size-full wp-image-150\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/7a4fa-screen-shot-2018-01-22-at-1.56.53-pm.png\" alt=\"\" width=\"971\" height=\"143\" \/>\n\nSince I use Safari as my everyday browser, I found an extension called SmileAllDay that performs this automatic redirect. The process has become simpler for installing this extension as it's now available in the <a href=\"https:\/\/itunes.apple.com\/us\/app\/smileallday\/id1180442868?mt=12\">Mac App Store<\/a>.\n\nI can't vouch for them but you can also find extensions available for Chrome and Firefox. I couldn't find one for Microsoft Edge but let me know in the comments if you know of one.\n\n<a href=\"https:\/\/chrome.google.com\/webstore\/detail\/smile-always\/jgpmhnmjbhgkhpbgelalfpplebgfjmbf?hl=en\" target=\"_blank\" rel=\"noopener\">Smile Always<\/a> for Chrome\n<a href=\"https:\/\/addons.mozilla.org\/en-US\/firefox\/addon\/amazon-smile\/\" target=\"_blank\" rel=\"noopener\">Amazon SMILE!<\/a> for Firefox\n<a href=\"https:\/\/itunes.apple.com\/us\/app\/smileallday\/id1180442868?mt=12\" target=\"_blank\" rel=\"noopener\">SmileAllDay<\/a> for Safari",
                "textContent": "I really loved the idea of all my Amazon purchases raising money for a charity I select by donating 0.5% of every dollar I spend. Their Amazon Smile program was perfect for someone like me who orders almost everything on Amazon. For anyone who uses Amazon and hasn't enrolled in this program, just visit smile.amazon.com and it will ask you what charity wish to have donations be made to.\nThe problem has been that I often forget to use the special url, smile.amazon.com which means my purchases don't generate any income for my favorite charity.\nThis is where browser extensions become super useful. I have found extensions that will automatically redirect you to smile.amazon.com even if you only type in amazon.com. Then every purchase will generate income for your chosen charity without you having to think about it every time.\n\n\n\nSince I use Safari as my everyday browser, I found an extension called SmileAllDay that performs this automatic redirect. The process has become simpler for installing this extension as it's now available in the Mac App Store.\n\nI can't vouch for them but you can also find extensions available for Chrome and Firefox. I couldn't find one for Microsoft Edge but let me know in the comments if you know of one.\n\nSmile Always for Chrome\nAmazon SMILE! for Firefox\nSmileAllDay for Safari"
            }
        ],
        "rendered_content": "<p>I really loved the idea of all my Amazon purchases raising money for a charity I select by donating 0.5% of every dollar I spend. Their Amazon Smile program was perfect for someone like me who orders almost everything on Amazon. For anyone who uses Amazon and hasn&#8217;t enrolled in this program, just visit smile.amazon.com and it will ask you what charity wish to have donations be made to.<\/p>\n<blockquote><p>The problem has been that I often forget to use the special url, smile.amazon.com which means my purchases don&#8217;t generate any income for my favorite charity.<\/p><\/blockquote>\n<p>This is where browser extensions become super useful. I have found extensions that will automatically redirect you to smile.amazon.com even if you only type in amazon.com. Then every purchase will generate income for your chosen charity without you having to think about it every time.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-150\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/7a4fa-screen-shot-2018-01-22-at-1.56.53-pm.png\" alt=\"\" width=\"971\" height=\"143\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/7a4fa-screen-shot-2018-01-22-at-1.56.53-pm.png 971w, http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/7a4fa-screen-shot-2018-01-22-at-1.56.53-pm-300x44.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/7a4fa-screen-shot-2018-01-22-at-1.56.53-pm-768x113.png 768w\" sizes=\"(max-width: 971px) 100vw, 971px\" \/><\/p>\n<p>Since I use Safari as my everyday browser, I found an extension called SmileAllDay that performs this automatic redirect. The process has become simpler for installing this extension as it&#8217;s now available in the <a href=\"https:\/\/itunes.apple.com\/us\/app\/smileallday\/id1180442868?mt=12\">Mac App Store<\/a>.<\/p>\n<p>I can&#8217;t vouch for them but you can also find extensions available for Chrome and Firefox. I couldn&#8217;t find one for Microsoft Edge but let me know in the comments if you know of one.<\/p>\n<p><a href=\"https:\/\/chrome.google.com\/webstore\/detail\/smile-always\/jgpmhnmjbhgkhpbgelalfpplebgfjmbf?hl=en\" target=\"_blank\" rel=\"noopener\">Smile Always<\/a> for Chrome<br \/>\n<a href=\"https:\/\/addons.mozilla.org\/en-US\/firefox\/addon\/amazon-smile\/\" target=\"_blank\" rel=\"noopener\">Amazon SMILE!<\/a> for Firefox<br \/>\n<a href=\"https:\/\/itunes.apple.com\/us\/app\/smileallday\/id1180442868?mt=12\" target=\"_blank\" rel=\"noopener\">SmileAllDay<\/a> for Safari<\/p>\n",
        "date": "2018-01-22 20:01:34",
        "slug": "amazon-smile-never-forget-to-use-again",
        "excerpt": "I really loved the idea of all my Amazon purchases raising money for a charity I select by donating 0.5% of every dollar I spend. Their Amazon Smile program was perfect for someone like me who orders almost everything on Amazon. For anyone who uses Amazon and hasn&#8217;t enrolled in this program, just visit smile.amazon.com [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/29f92-untitled-design.png"
    },
    {
        "id": 142,
        "title": "Why We Still Need Paper",
        "content": "I'm not sure if it's just me, but as I've attempted to close down the year financially, it seems as if every technology solution I've needed has failed. It has prompted me to write this blog on how it is still essential to have your own copies of essential documents.\n<blockquote>Digital copies are good, but paper is still the most reliable.<\/blockquote>\nThe first outlet that failed me was our insurance company's website. Normally I'm able to look up EOB (Explanation of Benefits) documents going all the way back to when I first became a customer, but this time I was not able to. Without that reference it made it exceedingly hard to complete our FSA (Flexible Spending Account) claims. It was like a game of dominos with one falling and knocking over everything.\n\nTo make matters worse, we tried to contact the insurance company through their online contact form but were informed that we didn't have a valid email address on file. So, I went through the steps to add an email address with the website telling me the changes were saved. It didn't look like the email address was added but I gave it the benefit of the doubt and tried the contact form again to no avail. It still said I didn't have an email address on file.\n\nThis resulted in a call into the insurance company to find out what was going on. The agent who answered the phone gave us the scripted answers at first before admitting they were having issues with the website. We were then transferred to another company that takes care of the website. This person told us he couldn't do anything about it but would add it as a ticket to be looked at by the developers with no indication of how long that would take.\n<blockquote>Having worked as a web developer myself I understand the non-commital response, but as a customer it is quite disheartening when you're trying to complete financial tasks that have deadlines.<\/blockquote>\nThen literally the next week I'm trying to pay our car insurance bill and their website is down. I have tried multiple browsers and from different locations but it seems as if their web server is just not working. With the payment due today I'm reduced to the option of phoning in our credit card number to avoid late charges. Now paper copies of the bill may not have solved this, but the paper copy reminded me of the due date, provided account numbers and the phone number to call. The online solution failed me.\n\nWe're being pushed towards paperless options more and more, but if you're relying completely on technology you run the risk of running into dead ends when you need it the most. I recommend at the very least saving a digital copy of important documents so that you're not relying on a third party service. It's even better to print them out and file in case your own hard drive crashed wiping out those copies.\n<blockquote>The convenience of online solutions is amazing, don't get me wrong, but they are prone to failure. If you want to be sure that your destiny is in your own hands and not that of a machine, you still need paper.<\/blockquote>",
        "parsed_content": [
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "I'm not sure if it's just me, but as I've attempted to close down the year financially, it seems as if every technology solution I've needed has failed. It has prompted me to write this blog on how it is still essential to have your own copies of essential documents.\n<blockquote>Digital copies are good, but paper is still the most reliable.<\/blockquote>\nThe first outlet that failed me was our insurance company's website. Normally I'm able to look up EOB (Explanation of Benefits) documents going all the way back to when I first became a customer, but this time I was not able to. Without that reference it made it exceedingly hard to complete our FSA (Flexible Spending Account) claims. It was like a game of dominos with one falling and knocking over everything.\n\nTo make matters worse, we tried to contact the insurance company through their online contact form but were informed that we didn't have a valid email address on file. So, I went through the steps to add an email address with the website telling me the changes were saved. It didn't look like the email address was added but I gave it the benefit of the doubt and tried the contact form again to no avail. It still said I didn't have an email address on file.\n\nThis resulted in a call into the insurance company to find out what was going on. The agent who answered the phone gave us the scripted answers at first before admitting they were having issues with the website. We were then transferred to another company that takes care of the website. This person told us he couldn't do anything about it but would add it as a ticket to be looked at by the developers with no indication of how long that would take.\n<blockquote>Having worked as a web developer myself I understand the non-commital response, but as a customer it is quite disheartening when you're trying to complete financial tasks that have deadlines.<\/blockquote>\nThen literally the next week I'm trying to pay our car insurance bill and their website is down. I have tried multiple browsers and from different locations but it seems as if their web server is just not working. With the payment due today I'm reduced to the option of phoning in our credit card number to avoid late charges. Now paper copies of the bill may not have solved this, but the paper copy reminded me of the due date, provided account numbers and the phone number to call. The online solution failed me.\n\nWe're being pushed towards paperless options more and more, but if you're relying completely on technology you run the risk of running into dead ends when you need it the most. I recommend at the very least saving a digital copy of important documents so that you're not relying on a third party service. It's even better to print them out and file in case your own hard drive crashed wiping out those copies.\n<blockquote>The convenience of online solutions is amazing, don't get me wrong, but they are prone to failure. If you want to be sure that your destiny is in your own hands and not that of a machine, you still need paper.<\/blockquote>",
                "textContent": "I'm not sure if it's just me, but as I've attempted to close down the year financially, it seems as if every technology solution I've needed has failed. It has prompted me to write this blog on how it is still essential to have your own copies of essential documents.\nDigital copies are good, but paper is still the most reliable.\nThe first outlet that failed me was our insurance company's website. Normally I'm able to look up EOB (Explanation of Benefits) documents going all the way back to when I first became a customer, but this time I was not able to. Without that reference it made it exceedingly hard to complete our FSA (Flexible Spending Account) claims. It was like a game of dominos with one falling and knocking over everything.\n\nTo make matters worse, we tried to contact the insurance company through their online contact form but were informed that we didn't have a valid email address on file. So, I went through the steps to add an email address with the website telling me the changes were saved. It didn't look like the email address was added but I gave it the benefit of the doubt and tried the contact form again to no avail. It still said I didn't have an email address on file.\n\nThis resulted in a call into the insurance company to find out what was going on. The agent who answered the phone gave us the scripted answers at first before admitting they were having issues with the website. We were then transferred to another company that takes care of the website. This person told us he couldn't do anything about it but would add it as a ticket to be looked at by the developers with no indication of how long that would take.\nHaving worked as a web developer myself I understand the non-commital response, but as a customer it is quite disheartening when you're trying to complete financial tasks that have deadlines.\nThen literally the next week I'm trying to pay our car insurance bill and their website is down. I have tried multiple browsers and from different locations but it seems as if their web server is just not working. With the payment due today I'm reduced to the option of phoning in our credit card number to avoid late charges. Now paper copies of the bill may not have solved this, but the paper copy reminded me of the due date, provided account numbers and the phone number to call. The online solution failed me.\n\nWe're being pushed towards paperless options more and more, but if you're relying completely on technology you run the risk of running into dead ends when you need it the most. I recommend at the very least saving a digital copy of important documents so that you're not relying on a third party service. It's even better to print them out and file in case your own hard drive crashed wiping out those copies.\nThe convenience of online solutions is amazing, don't get me wrong, but they are prone to failure. If you want to be sure that your destiny is in your own hands and not that of a machine, you still need paper."
            }
        ],
        "rendered_content": "<p>I&#8217;m not sure if it&#8217;s just me, but as I&#8217;ve attempted to close down the year financially, it seems as if every technology solution I&#8217;ve needed has failed. It has prompted me to write this blog on how it is still essential to have your own copies of essential documents.<\/p>\n<blockquote><p>Digital copies are good, but paper is still the most reliable.<\/p><\/blockquote>\n<p>The first outlet that failed me was our insurance company&#8217;s website. Normally I&#8217;m able to look up EOB (Explanation of Benefits) documents going all the way back to when I first became a customer, but this time I was not able to. Without that reference it made it exceedingly hard to complete our FSA (Flexible Spending Account) claims. It was like a game of dominos with one falling and knocking over everything.<\/p>\n<p>To make matters worse, we tried to contact the insurance company through their online contact form but were informed that we didn&#8217;t have a valid email address on file. So, I went through the steps to add an email address with the website telling me the changes were saved. It didn&#8217;t look like the email address was added but I gave it the benefit of the doubt and tried the contact form again to no avail. It still said I didn&#8217;t have an email address on file.<\/p>\n<p>This resulted in a call into the insurance company to find out what was going on. The agent who answered the phone gave us the scripted answers at first before admitting they were having issues with the website. We were then transferred to another company that takes care of the website. This person told us he couldn&#8217;t do anything about it but would add it as a ticket to be looked at by the developers with no indication of how long that would take.<\/p>\n<blockquote><p>Having worked as a web developer myself I understand the non-commital response, but as a customer it is quite disheartening when you&#8217;re trying to complete financial tasks that have deadlines.<\/p><\/blockquote>\n<p>Then literally the next week I&#8217;m trying to pay our car insurance bill and their website is down. I have tried multiple browsers and from different locations but it seems as if their web server is just not working. With the payment due today I&#8217;m reduced to the option of phoning in our credit card number to avoid late charges. Now paper copies of the bill may not have solved this, but the paper copy reminded me of the due date, provided account numbers and the phone number to call. The online solution failed me.<\/p>\n<p>We&#8217;re being pushed towards paperless options more and more, but if you&#8217;re relying completely on technology you run the risk of running into dead ends when you need it the most. I recommend at the very least saving a digital copy of important documents so that you&#8217;re not relying on a third party service. It&#8217;s even better to print them out and file in case your own hard drive crashed wiping out those copies.<\/p>\n<blockquote><p>The convenience of online solutions is amazing, don&#8217;t get me wrong, but they are prone to failure. If you want to be sure that your destiny is in your own hands and not that of a machine, you still need paper.<\/p><\/blockquote>\n",
        "date": "2018-01-16 16:19:37",
        "slug": "why-we-still-need-paper",
        "excerpt": "I&#8217;m not sure if it&#8217;s just me, but as I&#8217;ve attempted to close down the year financially, it seems as if every technology solution I&#8217;ve needed has failed. It has prompted me to write this blog on how it is still essential to have your own copies of essential documents. Digital copies are good, but [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2018\/01\/54319-img_4403-scaled.jpg"
    },
    {
        "id": 124,
        "title": "One Setting that Fixed Apple Airplay with my Airport Extreme",
        "content": "AirPlay is one of my favorite features about owning Apple products. To be able to simply send music from my Macbook or iPhone to my stereo has been the Holy Grail of music playback since I ripped my first CD to MP3s. But at some point through a software update of my Airport Extreme, Apple TV, Macbook, or iPhone, AirPlay has been spotty at best and frustrated me to screaming bouts with my devices.\n<h2>The Problem<\/h2>\nFor months I'd been having issues playing music from my computer through my Apple TV. It would play for a minute or two before losing connection and I'd have to start the process all over. It would act like it couldn't find the Apple TV and then all of a sudden it would start working again.\n\nI finally found someone who was having the same problem AND had a solution (there were lots of reports of this problem with no solution). It came down the Airport Extreme confusing IPv6 and IPv4 messages.\n<h2>The Solution<\/h2>\nSteven Sande at <a href=\"https:\/\/www.appleworld.today\/blog\/2015\/12\/18\/how-changing-one-setting-on-an-apple-airport-extreme-fixed-all-of-my-network-problems\" target=\"_blank\" rel=\"noopener\">Appleworld.today<\/a> gave the easiest instructions on how to solve this problem. Basically from your Airport Utility app,\u00a0tap Edit &gt; Advanced &gt; IPv6 and then disable\u00a0Share IPv6 Connection button to disable IPv6 sharing.\n\nI'm still watching with baited breath to make sure the problem doesn't rear it's head again, but for the time being it seems to have been fixed.\n\n<img class=\"aligncenter size-full wp-image-126\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/42b5d-1450453104241.png\" alt=\"\" width=\"800\" height=\"459\" \/>",
        "parsed_content": [
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "AirPlay is one of my favorite features about owning Apple products. To be able to simply send music from my Macbook or iPhone to my stereo has been the Holy Grail of music playback since I ripped my first CD to MP3s. But at some point through a software update of my Airport Extreme, Apple TV, Macbook, or iPhone, AirPlay has been spotty at best and frustrated me to screaming bouts with my devices.\n<h2>The Problem<\/h2>\nFor months I'd been having issues playing music from my computer through my Apple TV. It would play for a minute or two before losing connection and I'd have to start the process all over. It would act like it couldn't find the Apple TV and then all of a sudden it would start working again.\n\nI finally found someone who was having the same problem AND had a solution (there were lots of reports of this problem with no solution). It came down the Airport Extreme confusing IPv6 and IPv4 messages.\n<h2>The Solution<\/h2>\nSteven Sande at <a href=\"https:\/\/www.appleworld.today\/blog\/2015\/12\/18\/how-changing-one-setting-on-an-apple-airport-extreme-fixed-all-of-my-network-problems\" target=\"_blank\" rel=\"noopener\">Appleworld.today<\/a> gave the easiest instructions on how to solve this problem. Basically from your Airport Utility app,\u00a0tap Edit &gt; Advanced &gt; IPv6 and then disable\u00a0Share IPv6 Connection button to disable IPv6 sharing.\n\nI'm still watching with baited breath to make sure the problem doesn't rear it's head again, but for the time being it seems to have been fixed.\n\n<img class=\"aligncenter size-full wp-image-126\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/42b5d-1450453104241.png\" alt=\"\" width=\"800\" height=\"459\" \/>",
                "textContent": "AirPlay is one of my favorite features about owning Apple products. To be able to simply send music from my Macbook or iPhone to my stereo has been the Holy Grail of music playback since I ripped my first CD to MP3s. But at some point through a software update of my Airport Extreme, Apple TV, Macbook, or iPhone, AirPlay has been spotty at best and frustrated me to screaming bouts with my devices.\nThe Problem\nFor months I'd been having issues playing music from my computer through my Apple TV. It would play for a minute or two before losing connection and I'd have to start the process all over. It would act like it couldn't find the Apple TV and then all of a sudden it would start working again.\n\nI finally found someone who was having the same problem AND had a solution (there were lots of reports of this problem with no solution). It came down the Airport Extreme confusing IPv6 and IPv4 messages.\nThe Solution\nSteven Sande at Appleworld.today gave the easiest instructions on how to solve this problem. Basically from your Airport Utility app,\u00a0tap Edit &gt; Advanced &gt; IPv6 and then disable\u00a0Share IPv6 Connection button to disable IPv6 sharing.\n\nI'm still watching with baited breath to make sure the problem doesn't rear it's head again, but for the time being it seems to have been fixed."
            }
        ],
        "rendered_content": "<p>AirPlay is one of my favorite features about owning Apple products. To be able to simply send music from my Macbook or iPhone to my stereo has been the Holy Grail of music playback since I ripped my first CD to MP3s. But at some point through a software update of my Airport Extreme, Apple TV, Macbook, or iPhone, AirPlay has been spotty at best and frustrated me to screaming bouts with my devices.<\/p>\n<h2>The Problem<\/h2>\n<p>For months I&#8217;d been having issues playing music from my computer through my Apple TV. It would play for a minute or two before losing connection and I&#8217;d have to start the process all over. It would act like it couldn&#8217;t find the Apple TV and then all of a sudden it would start working again.<\/p>\n<p>I finally found someone who was having the same problem AND had a solution (there were lots of reports of this problem with no solution). It came down the Airport Extreme confusing IPv6 and IPv4 messages.<\/p>\n<h2>The Solution<\/h2>\n<p>Steven Sande at <a href=\"https:\/\/www.appleworld.today\/blog\/2015\/12\/18\/how-changing-one-setting-on-an-apple-airport-extreme-fixed-all-of-my-network-problems\" target=\"_blank\" rel=\"noopener\">Appleworld.today<\/a> gave the easiest instructions on how to solve this problem. Basically from your Airport Utility app,\u00a0tap Edit &gt; Advanced &gt; IPv6 and then disable\u00a0Share IPv6 Connection button to disable IPv6 sharing.<\/p>\n<p>I&#8217;m still watching with baited breath to make sure the problem doesn&#8217;t rear it&#8217;s head again, but for the time being it seems to have been fixed.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"aligncenter size-full wp-image-126\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/42b5d-1450453104241.png\" alt=\"\" width=\"800\" height=\"459\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/42b5d-1450453104241.png 800w, http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/42b5d-1450453104241-300x172.png 300w, http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/42b5d-1450453104241-768x441.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/p>\n",
        "date": "2017-02-23 19:53:39",
        "slug": "one-setting-that-fixed-apple-airplay-with-my-airport-extreme",
        "excerpt": "AirPlay is one of my favorite features about owning Apple products. To be able to simply send music from my Macbook or iPhone to my stereo has been the Holy Grail of music playback since I ripped my first CD to MP3s. But at some point through a software update of my Airport Extreme, Apple [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/1fd13-me918.jpeg"
    },
    {
        "id": 113,
        "title": "How to clear Netflix watched list for shows and movies",
        "content": "If you're anything like me, you have TV shows and movies that you watch over and over. I always found it annoying that once you were through a series and wanted to re-watch that it appeared as though every episode was already watched. Well now you can change that.\n<h2>Clear Viewing Activity<\/h2>\nBy clearing the viewing activity for a particular TV series or movie, it will appear again as if you haven't watched it. To do so follow these steps:\n<ol>\n \t<li>Login to Netflix in a web browser (this can't be done from an app).<\/li>\n \t<li>Select the profile that you wish to clear activity from.<\/li>\n \t<li>From the menu in the top right with your profile name, select\u00a0<em>Your Account<\/em>.<\/li>\n \t<li>The last section on this page is called\u00a0<em>My Profile<\/em>. Click on\u00a0<em>Viewing activity<\/em>.<\/li>\n \t<li>Click on the x to the far right of the movie or a single episode from the series you wish to clear viewing activity from.<\/li>\n \t<li>You will be then given the option\u00a0<em>Remove series?<\/em><\/li>\n \t<li>Click\u00a0<em>Remove series<\/em> to reset the played status for every episode.<\/li>\n \t<li>Watch from the beginning all over again!<\/li>\n<\/ol>",
        "parsed_content": [
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "If you're anything like me, you have TV shows and movies that you watch over and over. I always found it annoying that once you were through a series and wanted to re-watch that it appeared as though every episode was already watched. Well now you can change that.\n<h2>Clear Viewing Activity<\/h2>\nBy clearing the viewing activity for a particular TV series or movie, it will appear again as if you haven't watched it. To do so follow these steps:\n<ol>\n \t<li>Login to Netflix in a web browser (this can't be done from an app).<\/li>\n \t<li>Select the profile that you wish to clear activity from.<\/li>\n \t<li>From the menu in the top right with your profile name, select\u00a0<em>Your Account<\/em>.<\/li>\n \t<li>The last section on this page is called\u00a0<em>My Profile<\/em>. Click on\u00a0<em>Viewing activity<\/em>.<\/li>\n \t<li>Click on the x to the far right of the movie or a single episode from the series you wish to clear viewing activity from.<\/li>\n \t<li>You will be then given the option\u00a0<em>Remove series?<\/em><\/li>\n \t<li>Click\u00a0<em>Remove series<\/em> to reset the played status for every episode.<\/li>\n \t<li>Watch from the beginning all over again!<\/li>\n<\/ol>",
                "textContent": "If you're anything like me, you have TV shows and movies that you watch over and over. I always found it annoying that once you were through a series and wanted to re-watch that it appeared as though every episode was already watched. Well now you can change that.\nClear Viewing Activity\nBy clearing the viewing activity for a particular TV series or movie, it will appear again as if you haven't watched it. To do so follow these steps:\n\n \tLogin to Netflix in a web browser (this can't be done from an app).\n \tSelect the profile that you wish to clear activity from.\n \tFrom the menu in the top right with your profile name, select\u00a0Your Account.\n \tThe last section on this page is called\u00a0My Profile. Click on\u00a0Viewing activity.\n \tClick on the x to the far right of the movie or a single episode from the series you wish to clear viewing activity from.\n \tYou will be then given the option\u00a0Remove series?\n \tClick\u00a0Remove series to reset the played status for every episode.\n \tWatch from the beginning all over again!"
            }
        ],
        "rendered_content": "<p>If you&#8217;re anything like me, you have TV shows and movies that you watch over and over. I always found it annoying that once you were through a series and wanted to re-watch that it appeared as though every episode was already watched. Well now you can change that.<\/p>\n<h2>Clear Viewing Activity<\/h2>\n<p>By clearing the viewing activity for a particular TV series or movie, it will appear again as if you haven&#8217;t watched it. To do so follow these steps:<\/p>\n<ol>\n<li>Login to Netflix in a web browser (this can&#8217;t be done from an app).<\/li>\n<li>Select the profile that you wish to clear activity from.<\/li>\n<li>From the menu in the top right with your profile name, select\u00a0<em>Your Account<\/em>.<\/li>\n<li>The last section on this page is called\u00a0<em>My Profile<\/em>. Click on\u00a0<em>Viewing activity<\/em>.<\/li>\n<li>Click on the x to the far right of the movie or a single episode from the series you wish to clear viewing activity from.<\/li>\n<li>You will be then given the option\u00a0<em>Remove series?<\/em><\/li>\n<li>Click\u00a0<em>Remove series<\/em> to reset the played status for every episode.<\/li>\n<li>Watch from the beginning all over again!<\/li>\n<\/ol>\n",
        "date": "2017-02-22 17:27:08",
        "slug": "how-to-clear-netflix-watched-list-for-shows-and-movies",
        "excerpt": "If you&#8217;re anything like me, you have TV shows and movies that you watch over and over. I always found it annoying that once you were through a series and wanted to re-watch that it appeared as though every episode was already watched. Well now you can change that. Clear Viewing Activity By clearing the [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/fc4eb-10715878456_32554dbb74_b.jpg"
    },
    {
        "id": 108,
        "title": "Logos Bible App: Separate Note Document for Every Book",
        "content": "<h2>One Notes File for All Highlights?!<\/h2>\nThe\u00a0highlighting feature of the Logos app on the iPad and mobile devices is a great way to remember passages that you would like to return to for greater study. But I was always frustrated with the fact it would dump them into a single notes file called \"Solid Colors.\" After reading three or four books, the amount of references in this document became unruly. There had to be a better way.\n<h2>Resource-specific Note Document<\/h2>\nThat's when I found \"Document for Highlights\" option in the main app settings (find out where this is on your device). By setting this to \"Resource-specific Note Document,\" each book would end up with it's own notes file. This was so much more preferable to me as a default action as it's closer to the workflow of paper books.\n\nYou can also set this to \"Most Recent Note Document\" if you're collecting passages for a sermon or research project and want to keep notes together.\n\n<img class=\"alignnone size-large wp-image-109\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/06904-img_0780.png?w=576&h=1024\" alt=\"\" width=\"525\" height=\"933\" \/>\n\n&nbsp;\n\n&nbsp;",
        "parsed_content": [
            {
                "blockName": null,
                "attrs": [],
                "innerBlocks": [],
                "innerHTML": "<h2>One Notes File for All Highlights?!<\/h2>\nThe\u00a0highlighting feature of the Logos app on the iPad and mobile devices is a great way to remember passages that you would like to return to for greater study. But I was always frustrated with the fact it would dump them into a single notes file called \"Solid Colors.\" After reading three or four books, the amount of references in this document became unruly. There had to be a better way.\n<h2>Resource-specific Note Document<\/h2>\nThat's when I found \"Document for Highlights\" option in the main app settings (find out where this is on your device). By setting this to \"Resource-specific Note Document,\" each book would end up with it's own notes file. This was so much more preferable to me as a default action as it's closer to the workflow of paper books.\n\nYou can also set this to \"Most Recent Note Document\" if you're collecting passages for a sermon or research project and want to keep notes together.\n\n<img class=\"alignnone size-large wp-image-109\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/06904-img_0780.png?w=576&h=1024\" alt=\"\" width=\"525\" height=\"933\" \/>\n\n&nbsp;\n\n&nbsp;",
                "textContent": "One Notes File for All Highlights?!\nThe\u00a0highlighting feature of the Logos app on the iPad and mobile devices is a great way to remember passages that you would like to return to for greater study. But I was always frustrated with the fact it would dump them into a single notes file called \"Solid Colors.\" After reading three or four books, the amount of references in this document became unruly. There had to be a better way.\nResource-specific Note Document\nThat's when I found \"Document for Highlights\" option in the main app settings (find out where this is on your device). By setting this to \"Resource-specific Note Document,\" each book would end up with it's own notes file. This was so much more preferable to me as a default action as it's closer to the workflow of paper books.\n\nYou can also set this to \"Most Recent Note Document\" if you're collecting passages for a sermon or research project and want to keep notes together.\n\n\n\n&nbsp;\n\n&nbsp;"
            }
        ],
        "rendered_content": "<h2>One Notes File for All Highlights?!<\/h2>\n<p>The\u00a0highlighting feature of the Logos app on the iPad and mobile devices is a great way to remember passages that you would like to return to for greater study. But I was always frustrated with the fact it would dump them into a single notes file called &#8220;Solid Colors.&#8221; After reading three or four books, the amount of references in this document became unruly. There had to be a better way.<\/p>\n<h2>Resource-specific Note Document<\/h2>\n<p>That&#8217;s when I found &#8220;Document for Highlights&#8221; option in the main app settings (find out where this is on your device). By setting this to &#8220;Resource-specific Note Document,&#8221; each book would end up with it&#8217;s own notes file. This was so much more preferable to me as a default action as it&#8217;s closer to the workflow of paper books.<\/p>\n<p>You can also set this to &#8220;Most Recent Note Document&#8221; if you&#8217;re collecting passages for a sermon or research project and want to keep notes together.<\/p>\n<p><img loading=\"lazy\" decoding=\"async\" class=\"alignnone size-large wp-image-109\" src=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/06904-img_0780.png?w=576&#038;h=1024\" alt=\"\" width=\"525\" height=\"933\" srcset=\"http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/06904-img_0780.png 750w, http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/06904-img_0780-169x300.png 169w, http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/06904-img_0780-576x1024.png 576w\" sizes=\"(max-width: 525px) 100vw, 525px\" \/><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n",
        "date": "2017-02-16 23:20:42",
        "slug": "logos-bible-app-separate-note-document-for-every-book",
        "excerpt": "One Notes File for All Highlights?! The\u00a0highlighting feature of the Logos app on the iPad and mobile devices is a great way to remember passages that you would like to return to for greater study. But I was always frustrated with the fact it would dump them into a single notes file called &#8220;Solid Colors.&#8221; [&hellip;]",
        "author": "admin",
        "featured_image": "http:\/\/localhost:8881\/wp-content\/uploads\/2017\/02\/96f1b-img_0782.png"
    }
]